488. Happy Number

Write an algorithm to determine if a number is happy.

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example
Example 1:

Input:19
Output:true
Explanation:

19 is a happy number

    1^2 + 9^2 = 82
    8^2 + 2^2 = 68
    6^2 + 8^2 = 100
    1^2 + 0^2 + 0^2 = 1

Example 2:

Input:5
Output:false
Explanation:

5 is not a happy number

25->29->85->89->145->42->20->4->16->37->58->89
89 appears again.



# this problem is more likely a mathematics. If the number isn't a happy number, it will appear same number in the calculation, which isn't 1
class Solution:
    """
    @param n: An integer
    @return: true if this is a happy number or false
    """
    '''
    # use two pointers(one direction, slow and fast)
    def isHappy(self, n):
        # write your code here
        slow = n
        fast = n
        
        while(1):
            slow = self.helper(slow)
            fast = self.helper(self.helper(fast))
            if(slow == fast):
                break
        
        return (slow == 1)
    '''
    
    # use hash table
    def isHappy(self, n):
        
        visited = set()
        
        while(n != 1):
            if(n not in visited):
                visited.add(n)
            else:
                return False
                
            n = self.helper(n)
        
        return True
    
    def helper(self, n):
        num = 0
        while(n != 0):
            num = num + (n % 10) ** 2
            n = n//10
        
        return num
