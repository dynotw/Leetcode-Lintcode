5. Kth Largest Element

Find K-th largest element in an array.

Example
Example 1:

Input:
n = 1, nums = [1,3,4,2]
Output:
4
Example 2:

Input:
n = 3, nums = [9,3,2,4,8]
Output:
4
Challenge
O(n) time, O(1) extra memory.

Notice
You can swap elements in the array


// 1st method, Quick Sort, don't meet the chanllenge
// because the sort needs O(nlogn)
/*
public class Solution {
    public int kthLargestElement(int n, int[] nums) {
        // write your code here
        
        quickSort1(nums, 0, nums.length -1);
        return nums[nums.length - n];
    }
   public void quickSort(int[] A, int start, int end){
        
        // 注意，递归的终止条件一定放在最前面（return只会跳出本身的函数，即本级的函数）
        if (start >= end){
            return;
        }
        
        int pointer1 = start;
        int pointer2 = end;
        
        // 1. pivot, A[start], A[end]
        // get the value, not the index
        //虽然任一点都可以作为pivot，但一般还是选择中点
        /*
        this place, we can't assign pivot as an index like: 
        int pivot = start + (end - start)/2
        Because during the resursion, the element on the index of pivot will change(相当于A[pivot]的值是会变化的)
        Therefore, we have to assign the value to the pivot, so that the value of pivot won't change, during the recursion.
        */
        /*
        int pivot = A[start + (end - start)/2];
        
        
        // remeber it's requirement is pointer1<=pointer2 not pointer1 < pointer2
        while (pointer1 <= pointer2){
            
            // 一直遍历到A[pointer1] >= pivot
            while (pointer1 <= pointer2 && A[pointer1] < pivot){
                pointer1++;
            }
            
            // 一直遍历到A[pointer2] <= pivot
            while (pointer1 <= pointer2 && A[pointer2] > pivot){
                pointer2--;
            } 
            
            // 通过上面的两个while循环和最大的while循环， pointer1 和 pointer2 所对应的value 都需要换位置了
            if (pointer1 <= pointer2){
                int temp = A[pointer1];
                A[pointer1] = A[pointer2];
                A[pointer2] = temp;
                
                pointer1++;
                pointer2--;
            }
        }
        
        quickSort(A, start, pointer2);
        quickSort(A, pointer1, end);
    }        
}
*/

// 2nd Quick Select, meet the chanllenge
public class Solution {
    /**
     * @param n: An integer
     * @param nums: An array
     * @return: the Kth largest element
     */
    public int kthLargestElement(int n, int[] nums) {
        // write your code here
        int k = nums.length - n;
        quickselect(nums, k, 0, nums.length - 1);
        return nums[k];
    }
    
    private void quickselect(int[] nums, int k, int start, int end){
        if(start >= end){
            return;
        }
        
        int left = start;
        int right = end;
        int pivot = nums[left + (right-left)/2];
        
        while(left<=right){
            while(left<=right && nums[left] < pivot){
                left++;
            }
            while(left<=right && nums[right] > pivot){
                right--;
            }
            if(left<=right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                
                left++;
                right--;
            }
        }
            
        if(k<=right){
            quickselect(nums, k, start, right);
        }
        else if(k>=left){
            quickselect(nums, k, left, end);
        }
        else{
            return;
        }
    }
}
