144. Interleaving Positive and Negative Numbers

Given an array with positive and negative integers. Re-range it to interleaving with positive and negative integers.

Example
Example 1

Input : [-1, -2, -3, 4, 5, 6]
Outout : [-1, 5, -2, 4, -3, 6]
Explanation :  any other reasonable answer.
Challenge
Do it in-place and without extra memory.

Notice
You are not necessary to keep the original order of positive integers or negative integers.

144. Interleaving Positive and Negative Numbers
中文English
Given an array with positive and negative integers. Re-range it to interleaving with positive and negative integers.

Example
Example 1

Input : [-1, -2, -3, 4, 5, 6]
Outout : [-1, 5, -2, 4, -3, 6]
Explanation :  any other reasonable answer.
Challenge
Do it in-place and without extra memory.

Notice
You are not necessary to keep the original order of positive integers or negative integers.


// Two pointers, Partition
// 1st method
public class Solution {  
    /**
     * @param A: An integer array.
     * @return: void
     */
    public void rerange(int[] A) {
        if (A == null || A.length == 0) {
            return;
        }

        int positiveCount = 0, negativeCount = 0;

        for (int i = 0; i < A.length; i++) {
            if (A[i] > 0) {
                positiveCount++;
            } else {
                negativeCount++;
            }
        }

        int negativeIndex = 0, positiveIndex = 1;
        if (positiveCount > negativeCount) {
            negativeIndex = 1;
            positiveIndex = 0;
        }

        while (negativeIndex < A.length && positiveIndex < A.length) {
            while (negativeIndex < A.length && A[negativeIndex] < 0) {
                negativeIndex += 2;
            }

            while (positiveIndex < A.length && A[positiveIndex] > 0) {
                positiveIndex += 2;
            }

            if (negativeIndex < A.length && positiveIndex < A.length) {
                int temp = A[negativeIndex];
                A[negativeIndex] = A[positiveIndex];
                A[positiveIndex] = temp;

                negativeIndex += 2;
                positiveIndex += 2;
            }
        }
   }
}

//2nd method
/*
两根指针，首先判断正数多还是负数多，并把多的那一部分移到后半部分，最后两根指针分别递增二交换即可
*/
// how to move positive numbers at the left part. This code is so interesting
class Solution {
    /**
     * @param A: An integer array.
     * @return: void
     */
    public int[] rerange(int[] A) {
        // Check the input parameter.
        if(A == null || A.length < 3)
            return A;
        
        int n = A.length;
        
        int countPositive = 0;//count the number of positive numbers
        
        
        
        // 遇到positive，就往Array的前面扔。Index停住，说明i碰到了negative，Index只停驻在negative
        int Index = 0;
        int pos = 1;
        int neg = 0;
        for(int i=0;i<n;i++) {
                if(A[i] > 0) {
                // Put all the positive numbers at in the left part.
                    swap(A,Index,i);
                    Index++;
                    countPositive++;
                }
        }
        
        if(countPositive > n/2) {
        // If positive numbers are more than negative numbers,
        // Put the positive numbers at first.
            pos = 0;
            neg = 1;
            // Reverse the array.
            
            int left = 0;
            int right = n-1;
            while(left < right) {
                swap(A,left,right);
                left++;
                right--;
            }
        }
        
        while(pos < n && neg <n) {
            while(pos<n && A[pos]>0)
                pos +=2;
            while(neg<n && A[neg]<0)
                neg +=2;
            if(neg >= n || pos>=n)
                break;
            swap(A,pos,neg);
        }
       return A; 
   }
   
   public void swap(int[] A, int l, int r) {
       int temp = A[l];
       A[l] = A[r];
       A[r] = temp;
   }
}
