521. Remove Duplicate Numbers in Array

Given an array of integers, remove the duplicate numbers in it.

You should:

Do it in place in the array.
Move the unique numbers to the front of the array.
Return the total number of the unique numbers.
Example
Example 1:

Input:
nums = [1,3,1,4,4,2]
Output:
[1,3,4,2,?,?]
4
Explanation:

Move duplicate integers to the tail of nums => nums = [1,3,4,2,?,?].
Return the number of unique integers in nums => 4.
Actually we don't care about what you place in ?, we only care about the part which has no duplicate integers.
Example 2:

Input:
nums = [1,2,3]
Output:
[1,2,3]
3
Challenge
Do it in O(n) time complexity.
Do it in O(nlogn) time without extra space.
Notice
You don't need to keep the original order of the integers.

// Two pointers, Same direction
// not only return, but also move and remove the number
// 1st method, use HashSet to meet the first challenge, but can't meet the second challenge
public class Solution {
    public int deduplication(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        HashSet<Integer> set = new HashSet<>();//set excellent
        int len = 0;
        for(int i =0; i < nums.length; i++){
            if (!set.contains(nums[i])){
                set.add(nums[i]);
                nums[len] = nums[i];
                len++;
            }
        }
        return len;
    }
}

// 2nd method, two pointers
// Sort is O(nlogn), it meets the second challenge
public class Solution {
    public int deduplication(int[] nums) {

        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        Arrays.sort(nums);
        
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != nums[index]) {
                nums[++index] = nums[i];
            }
        }
        
        return index + 1;
    }
}
