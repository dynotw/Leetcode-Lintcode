Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string "".

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.

 

Example 1:
Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"


Example 2:
Input: s = "a", t = "a"
Output: "a"



t may contain repeated char
## use two pointers to make up a sliding window. There're so many detail need to pay an attention
# tiem complexity: O(s); space complexity: O(26)
import collections
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        result = ""
        need = collections.Counter(t)
        # check how many char we need to match
        num = len(t)
        ## set two pointers, whihc make up a slide window
        left = 0
        right = 0
        ran = sys.maxsize
        
        # initialize s[0], because in while loop, 'right + 1' run firstly. Therefore, we need deal with s[0] out of while loop
        if s[0] in t:
            num -= 1
        need[s[0]] -= 1
        
        if(num == 0):
            return t
      
        while(left <= right and right < len(s)):
            while(num == 0 and left <= right):
                if(right - left + 1 < ran):
                    result = s[left : right+1]
                    ran = right - left + 1
                
                if s[left] in t:
                    # why here's a if statement
                    # Because we may get a specific char more times than in t  
                    if need[s[left]] >= 0:
                        num += 1
                    need[s[left]] += 1
                    
                left += 1
            
            right += 1
            if(right < len(s)):

                if(s[right] in s):      
                    if(need[s[right]] > 0):
                        num -= 1
                    need[s[right]] -= 1
     
        return result
                
