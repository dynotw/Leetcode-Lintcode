56. Two Sum

Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are zero-based.

Example
Example1:
numbers=[2, 7, 11, 15], target=9
return [0, 1]
Example2:
numbers=[15, 2, 7, 11], target=9
return [1, 2]
Challenge
Either of the following solutions are acceptable:

O(n) Space, O(nlogn) Time
O(n) Space, O(n) Time
Notice
You may assume that each input would have exactly one solution

// Classical Two Sum
// Two pointers, notice only one Solution
// 1st method, own two pointers
// the logic is wrong, because after Arrays.sort(numbers), the original index has been changed
// the right way is to store the index information firstly (bulid a construct or use HashMap)
/*
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        // write your code here
        
        int[] result = new int[2];
        if (numbers == null || numbers.length == 0){
            return result;
        }
        
        int left = 0;
        int right = numbers.length - 1;
        // First sort the array, but sorting Process needs O(nlogn)
        Arrays.sort(numbers);
        
        // because time challenge, we can't use for loop embedded in for loop
        while (left < right && left>=0 && right < numbers.length - 1){
            if (numbers[left] + numbers[right] == target){
                result[0] = left;
                result[1] = right;
                return result;
            }
            else if (numbers[left] + numbers[right] < target){
                left++;
            }
            else if (numbers[left] + numbers[right] > target){
                right--;
            }
        }
        return result;
    }
}
*/

// 2nd method: Two pointers, with using HashMap. Meet 2nd challenge, sort needs O(nlogn)
/*
public class Solution {

    public int[] twoSum(int[] numbers, int target) {
        // write your code here
        
        int[] result = new int[2];
        if (numbers == null || numbers.length == 0 || numbers.length == 1){
            return result;
        }
        
        int left = 0;
        int right = numbers.length - 1;
        Map<Integer, List<Integer>> map = new HashMap<>();
        
        for (int i=0; i< numbers.length; i++){
            if (! map.containsKey(numbers[i])){
                List<Integer> list = new ArrayList<>();
                list.add(i);
                map.put(numbers[i], list);
            }
            else{
                map.get(numbers[i]).add(i);
            }
        }
        
        Arrays.sort(numbers);
        
        // because time challenge, we can't use for loop embedded in for loop
        while (left < right && left>=0 && right < numbers.length){
            if (numbers[left] + numbers[right] == target){
                if (numbers[left] == numbers[right]){
                    result[0] = map.get(numbers[left]).get(0);
                    result[1] = map.get(numbers[left]).get(1);
                }
                
                else{
                    result[0] = map.get(numbers[left]).get(0);
                    result[1] = map.get(numbers[right]).get(0);
                }
                break;
            }
            else if (numbers[left] + numbers[right] < target){
                left++;
            }
            else if (numbers[left] + numbers[right] > target){
                right--;
            }
        }
        // where index1 must be less than index2
        Arrays.sort(result);
        return result;
    }
}
*/

// 3rd method: no two pointers, using HashMap as well, but the function is different
public class Solution{
    
    public int[] twoSum(int[] numbers, int target){
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i =0; i < numbers.length; i++){
            if (map.containsKey(numbers[i])){
                result[0] = map.get(numbers[i]);
                result[1] = i;
                return result;
            }
            
            map.put((target - numbers[i]), i);
        }
        
        return result;
    }
}



