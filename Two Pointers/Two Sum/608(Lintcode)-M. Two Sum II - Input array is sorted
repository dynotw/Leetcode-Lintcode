608. Two Sum II - Input array is sorted

Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

Example
Example 1:

Input: nums = [2, 7, 11, 15], target = 9 
Output: [1, 2]
Example 2:

Input: nums = [2,3], target = 5
Output: [1, 2]
Notice
You may assume that each input would have exactly one solution.



// same as two sum, method is better in space complexity
public class Solution {
    /**
     * @param nums: an array of Integer
     * @param target: target = nums[index1] + nums[index2]
     * @return: [index1 + 1, index2 + 1] (index1 < index2)
     */
    public int[] twoSum(int[] nums, int target) {
        // write your code here
        // HashMap, 1st is target-x, 2nd is index of x
        HashMap<Integer, Integer> map = new HashMap<>();
        int[] result = new int[2];
        
        for (int i=0; i<nums.length; i++){
        // 需要检查nums[i]是否已经在map的keys中：比如如果2被遍历过，那么map的keys中必有7
            if(!map.containsKey(nums[i])){
                map.put(target - nums[i], i);
            }
            
            else{
                result[0] = map.get(nums[i]) + 1;
                result[1] = i + 1;
                
                return result;
            }
        }
        
        return result;
    }
}


// Of course we can use two sum directly on this problem
// But it's sorted, so we can use two same direction pointers to solve this problem
// One thing needs to pay an attention is that it isn't 0-based index

// time: O(n), space: O(1); which is better than two sum, which use hashmap (space：O(n))
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int left = 0;
        int right = numbers.length - 1;
        int[] result = new int[2];
            
        while(left < right){
            if(numbers[left] + numbers[right] == target){
                result[0] = left+1;
                result[1] = right+1;
                return result;
            }
            
            else if(numbers[left] + numbers[right] > target){
                right --;
            }
            
            else{
                left++;
            }
        }
        
        return result;
    }
}
