Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up: The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000



# time: O(n+m), space: O(m+n), not good, there's time: O(log(m+n)), but it's a little complicated
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        length1 = len(nums1)
        length2 = len(nums2)
        index1=0
        index2=0
        temp = list()
        if(length1 + length2)%2 == 1:
            mid = int((length1 + length2 + 1)/2)
            # eliminate edge condition
            if (length1 == 0):
                return nums2[mid-1]
            if(length2 == 0):
                return nums1[mid-1]
            
            while(index1 < len(nums1) and index2 < len(nums2)):            
                if(nums1[index1] <= nums2[index2]):
                    temp.append(float(nums1[index1]))
                    index1 +=1
                else:
                    temp.append(float(nums2[index2]))
                    index2 +=1
                if len(temp) == mid:
                    return temp[-1]
            
            while(index1 < len(nums1)):
                temp.append(float(nums1[index1]))
                if(len(temp) == mid):
                    return temp[-1]
                index1 += 1
            
            while(index2 < len(nums2)):
                temp.append(float(nums2[index2]))
                if(len(temp) == mid):
                    return temp[-1]
                index2 += 1
                
        else:
            mid = int((length1 + length2 )/2 +1)
            # eliminate edge condition
            if (length1 == 0):
                return (nums2[mid-1] + nums2[mid-1-1])/2
            if(length2 == 0):
                return (nums1[mid-1] + nums1[mid-1-1])/2
            
            while(index1 < len(nums1) and index2 < len(nums2)):
                
                if(nums1[index1] <= nums2[index2]):
                    temp.append(float(nums1[index1]))
                    index1 +=1
                else:
                    temp.append(float(nums2[index2]))
                    index2 +=1
                
                if(len(temp) == mid):
                    return (temp[-1] + temp[-2])/2
            
            while(index1 < len(nums1)):

                temp.append(float(nums1[index1]))
                if(len(temp) == mid):
                    return (temp[-1] + temp[-2])/2                
                index1 += 1
            
            while(index2 < len(nums2)):

                temp.append(float(nums2[index2]))
                if(len(temp) == mid):
                    return (temp[-1] + temp[-2])/2            
                index2 += 1
