Given an array of integers nums and an integer threshold, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

It is guaranteed that there will be an answer.


Example 1:
Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 

Example 2:
Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

Example 3:
Input: nums = [19], threshold = 5
Output: 4





# Notice that we're supposed to get smallest divisor instead of sum
# binary search + two pointers
# time complexity: O(logn), Space complexity: O(1)
class Solution:
    def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        # set two pointer
        left = 1
        right = 2
        
        # determine the left-right range
        while(self.helper(nums, right) > threshold):
            # This place, multi 2 in order to determine range quicker
            left = right
            right *= 2
        
        
        # binary search in left-right range
        while(left + 1 < right):
            mid = left + int((right - left)/2)
            temp = self.helper(nums, mid)
            print(str(mid) +  "  " + str(temp))
            
            if self.helper(nums, mid) > threshold:
                left = mid
            
            else:
                right = mid
        
        if self.helper(nums, left) <= threshold:
            return left
        else:
            return right
                
        
    
    def helper(self, nums, divisor):
        result = 0
        for i in nums:
            temp = ceil(i/divisor)
            result += temp
        
        return result
        
