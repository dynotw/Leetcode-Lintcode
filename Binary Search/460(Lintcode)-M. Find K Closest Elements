460. Find K Closest Elements

Given target, a non-negative integer k and an integer array A sorted in ascending order, find the k closest numbers to target in A, sorted in ascending order by the difference between the number and target. Otherwise, sorted in ascending order by number if the difference is same.

Example
Example 1:

Input: A = [1, 2, 3], target = 2, k = 3
Output: [2, 1, 3]
Example 2:

Input: A = [1, 4, 6, 8], target = 3, k = 3
Output: [4, 1, 6]
Challenge
O(logn + k) time

Notice
The value k is a non-negative integer and will always be smaller than the length of the sorted array.
Length of the given array is positive and will not exceed 10^4
Absolute value of elements in the array will not exceed 10^4


// BFS, target may not in the array
public class Solution {
    /**
     * @param A: an integer array
     * @param target: An integer
     * @param k: An integer
     * @return: an integer array
     */
    public int[] kClosestNumbers(int[] A, int target, int k) {
        // write your code here
        int[] result = new int[k];
        
        // edge condition
        if (A == null || A.length == 0 || k == 0){
            return result;
        }
        
        // set two pointers
        int start = 0;
        int end = A.length - 1;
        
        while(start + 1< end){
            int mid = start + (end - start)/2;
            if(A[mid] < target){
                start = mid;
            }
            else if(A[mid] == target){
                end = mid;
            }
            else{
                end = mid;
            }
        }
        
        // index is the position, we insert val into result
        int index = 0;
        int leftIndex = start;
        int rightIndex = end;
        int leftDifference = 0;
        int rightDiference = 0;
        
        while(k>0){
            if(leftIndex >= 0){
                leftDifference = Math.abs(A[leftIndex] - target);
            }
            else{
                leftDifference = Integer.MAX_VALUE;
            }
            if(rightIndex < A.length){
                rightDiference = Math.abs(A[rightIndex] - target);
            }
            else{
                rightDiference = Integer.MAX_VALUE;
            } 
            
            if(leftDifference <= rightDiference){
                result[index] = A[leftIndex];
                index++;
                leftIndex--;
                k--;
            }
            else{
                result[index] = A[rightIndex];
                index++;
                rightIndex++;
                k--;
            }
        }
        
        return result;
    }
}
