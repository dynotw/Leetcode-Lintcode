Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.


Example 1:
Input: A = [4,7,9,10], K = 1
Output: 5
Explanation: 
The first missing number is 5.

Example 2:
Input: A = [4,7,9,10], K = 3
Output: 8
Explanation: 
The missing numbers are [5,6,8,...], hence the third missing number is 8.

Example 3:
Input: A = [1,2,4], K = 3
Output: 6
Explanation: 
The missing numbers are [3,5,6,7,...], hence the third missing number is 6.





# binary search
# time complexity: O(logn), space complexity: O(1)
class Solution:
    def missingElement(self, nums: List[int], k: int) -> int:
        n = len(nums)
        
        # corner condition, missed number is bigger than nums[-1]
        if k > self.helper(n-1,nums):
            return nums[-1] + ( k - self.helper(n-1, nums) )
        
        left = 0
        right = n -1 
        
        while(left != right):
            pivot = left + (right - left)//2
            
            # kth missed number is bigger than nums[pivot]
            if self.helper(pivot, nums) < k:
                left = pivot + 1
            
            else:
                right = pivot
            
        return (nums[left - 1] + k - self.helper(left-1, nums))
        
    
    # how many numbers are missed before nums[index]
    def helper(self, index, nums):
        return nums[index] - nums[0] - index
