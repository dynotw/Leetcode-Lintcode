1536. Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example
Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]





// Binary Search
public class Solution {
    /**
     * @param nums: the array of integers
     * @param target: 
     * @return: the starting and ending position
     */
    public List<Integer> searchRange(List<Integer> nums, int target) {
        // Write your code here.
        
        // this problem isn't an array, it's ArrayList(because we only need to search element, so use ArrayList rather than LinkedList)
        // for 14，458， they're Array
        // This problem, the input is List, so we have to use .get(),  .size()
        
        List<Integer> result = new ArrayList<>();


        if( nums == null || nums.size() == 0) {
            result.add(-1);
            result.add(-1);
            
            return result;
        }

        // it's for first position
        int firstLeft = 0;
        int firstRight = nums.size() - 1;

        while( firstLeft + 1 < firstRight) {
            int mid = firstLeft + (firstRight - firstLeft)/2;

            if (nums.get(mid) == target) {
                firstRight = mid;
            }

            else if (nums.get(mid) < target){
                firstLeft = mid;
            }

            else if (nums.get(mid) > target){
                firstRight = mid;
            }
        }

        if (nums.get(firstLeft) == target) {
            result.add(firstLeft);
        }

        else if (nums.get(firstRight) == target) {
            result.add(firstRight);
        }
        
        else{
            result.add(-1);
            result.add(-1);
            
            return result;
        }


        // it's for last position
        int lastLeft = 0;
        int lastRight = nums.size() - 1;

        while( lastLeft + 1 < lastRight) {
            int mid = lastLeft + (lastRight - lastLeft)/2;

            if( nums.get(mid) == target) {
                lastLeft = mid;
            }

            else if (nums.get(mid) < target){
                lastLeft = mid;
            }

            else if (nums.get(mid) > target){
                lastRight = mid;
            }

        }

// this 判断的先后顺序也要改，先判断end
        if (nums.get(lastRight) == target) {
            result.add(lastRight);
        }

        else if (nums.get(lastLeft) == target) {
            result.add(lastLeft);
        }

        else{
            result.add(-1);
            result.add(-1);
            
            return result;
        }

        return result;
    }
}
