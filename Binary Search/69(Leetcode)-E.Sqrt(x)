Implement int sqrt(int x).

Compute and return the square root of x, where x is guaranteed to be a non-negative integer.

Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.

Example 1:

Input: 4
Output: 2
Example 2:

Input: 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since 
             the decimal part is truncated, 2 is returned.
             
             
             



// int is to get the biggest integer, which is less than x, rather than the closest one 
// This problem need to use long 
// Time Complexity: O(logn), use binary search; Space complexity: O(1)
class Solution {
    public int mySqrt(int x) {
        if (x == 1 || x == 0){
            return x;
        }
        
        int left = 1;
        int right = x/2;
        
        while(left +1 < right){
            int mid = left + (right - left)/2;
            
            if( (long)mid * mid < x){
                left = mid;
            }
            
            else if ( (long)mid*mid == x){
                return mid;
            }
            
            else{
                right = mid;
            }
        }
        
        
        if( (long)right * right <= x){
            return right;
        }
        
        else{
            return left;
        }
    }
}
