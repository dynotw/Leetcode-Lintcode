458. Last Position of Target

Find the last position of a target number in a sorted array. Return -1 if target does not exist.

Example
Example 1:

Input: nums = [1,2,2,4,5,5], target = 2
Output: 2
Example 2:

Input: nums = [1,2,2,4,5,5], target = 6
Output: -1





public class Solution {
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    public int lastPosition(int[] nums, int target) {
        // write your code here
        
        // Firstly, consider special condition 
        if (nums == null || nums.length == 0){
            return -1;
        }
        
        
        //set two pointers
        int start = 0;
        int end = nums.length - 1;
        
        
        // use while loop to shorten the gap
        while (start + 1 < end){
            int mid = start + (end - start)/2;
            
            if (nums[mid] == target){
                
                // find the first position is: end = mid
                // because we want the gap move forward
                // but for the last position, we want the gap move backward
                
                // 下面while循环外的if判断顺序也要修改
                start = mid;
            }
            
            else if (nums[mid] < target){
                start = mid;
                // or start = mid + 1;
            }
            
            else if (nums[mid] > target){
                end = mid;
                // or end = mid - 1;
            }
        }
        
        if (nums[end] == target){
            return end;
        }
        
        else if (nums[start] == target){
            return start;
        }
        
        return -1;
        
    }
}
