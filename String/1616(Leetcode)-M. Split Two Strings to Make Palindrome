You are given two strings a and b of the same length. 
Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, 
and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.

When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. 
For example, if s = "abc", then "" + "abc", "a" + "bc", "ab" + "c" , and "abc" + "" are valid splits.

Return true if it is possible to form a palindrome string, otherwise return false.

Notice that x + y denotes the concatenation of strings x and y.

 

Example 1:

Input: a = "x", b = "y"
Output: true
Explaination: If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = "", asuffix = "x"
bprefix = "", bsuffix = "y"
Then, aprefix + bsuffix = "" + "y" = "y", which is a palindrome.
Example 2:

Input: a = "abdef", b = "fecab"
Output: false
Example 3:

Input: a = "ulacfd", b = "jizalu"
Output: true
Explaination: Split them at index 3:
aprefix = "ula", asuffix = "cfd"
bprefix = "jiz", bsuffix = "alu"
Then, aprefix + bsuffix = "ula" + "alu" = "ulaalu", which is a palindrome.



# time O(n^2); space O(n^2): time & space complexity is too high
# method2: time: O(n); space: O(1)
class Solution:
    '''
    def checkPalindromeFormation(self, a: str, b: str) -> bool:
        if (self.isPali(a) or self.isPali(b)):
            return True
        
        for i in range(len(a) - 1):
            a1, a2 = a[:i], a[i:]
            b1, b2 = b[:i], b[i:]
            # if(i == 3):
                # print(a1+b2)
                # print(b1 +a2)
                # print(self.isPali(a1+b2))
            
            if(self.isPali(a1+b2) or self.isPali(b1 + a2)):
                return True
        
        return False
        
    def isPali(self, s):
        if (len(s) == 0):
            return True
        if (len(s) == 1):
            return True
        
        left = 0
        right = len(s) - 1
        while(left <= right):
            if(s[left] == s[right]):
                left += 1
                right -= 1
            else:
                return False
            
        return True
    '''

    # firstly shorten a and b
    def checkPalindromeFormation(self, a: str, b: str) -> bool:
        
        # check a1+b2
        for i in range(ceil(len(a)/2) + 1):
            if(a[i] != b[len(b)- 1 -i]):
                break
        
        left = i
        right = len(b) - i -1
        
        isPali_a1 = True
        isPali_b2 = True
        while(left <= right):
            if(b[left] != b[right]):
                isPali_b2 = False
            
            if(a[left] != a[right]):
                isPali_a1 = False
            
            if(isPali_a1 == False and isPali_b2 == False):
                break
            
            left += 1
            right -= 1
            
                         
        if(isPali_a1 == True or isPali_b2 == True):
            return True
        
        
        # check b1 + a2
        for j in range(ceil(len(a)/2) + 1):
            if(a[len(a)-1-j] != b[j]):
                break
        
        left = j
        right = len(b) - j -1       
        
        isPali_a2 = True
        isPali_b1 = True
        while(left <= right):
            if(b[left] != b[right]):
                isPali_b1 = False
            
            if(a[left] != a[right]):
                isPali_a2 = False
            
            if(isPali_a2 == False and isPali_b1 == False):
                break
            
            left += 1
            right -= 1
            
                         
        if(isPali_a2 == True or isPali_b1 == True):
            return True
        
        return False

