423. Valid Parentheses
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

Example
Example 1:

Input: "([)]"
Output: False
Example 2:

Input: "()[]{}"
Output: True
Challenge
Use O(n) time, n is the number of parentheses.





public class Solution {
    /**
     * @param s: A string
     * @return: whether the string is a valid parentheses
     */
    public boolean isValidParentheses(String s) {
        // write your code here
        Stack<Character> stack1 = new Stack<Character>();
        for (char c : s.toCharArray()){
            if (c=='[' || c=='{' || c=='('){
                stack1.push(c);
            }
            else{
                if (c==']'){
                    if (stack1.isEmpty() || stack1.peek() != '['){
                        return false;
                    }
                }
                else if (c==')'){
                    if (stack1.isEmpty() || stack1.peek() != '('){
                        return false;
                    }
                }
                else if (c=='}'){
                    if (stack1.isEmpty() || stack1.peek() != '{'){
                        return false;
                    }
                }
                stack1.pop();
            }
        }
        return stack1.isEmpty();
    }
}
