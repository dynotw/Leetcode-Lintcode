200. Longest Palindromic Substring

Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

Example
Example 1:

Input:"abcdzdcab"
Output:"cdzdc"
Example 2:

Input:"aba"
Output:"aba"
Challenge
O(n2) time is acceptable. Can you do it in O(n) time.


// This method is bad, O(n^3)
// O(n^2) to give all substrings, then need O(n) to figure out whether each substring  is palindrome

// pay attention to "ba", "b" theses edge condition
public class Solution {
    /**
     * @param s: input string
     * @return: a string as the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        // write your code here
        int max = -1;
        int start = 0;
        int end = s.length() - 1;
        
        
        for (int left = 0; left < s.length(); left++){
            for (int right = s.length() - 1; right - left > max; right--){
                int diff = 0;
                
                if (isPalindromic(s,left,right)){
                    diff = right - left;
                    
                    if (diff > max){
                        max = diff;
                        start = left;
                        end= right;
                    }
                }
                
            }
        }
        
        String str = s.substring(start, end + 1);
        
        return str;
    }
    
    private boolean isPalindromic(String s, int pointer1, int pointer2){
        
        int left = pointer1;
        int right = pointer2;
        
        if (left > right){
            return false;
        }
        
        while (left < right){
            
            if (s.charAt(left) != s.charAt(right)){
                return false;
            }
            
            left ++;
            right --;
            
        }
        
        return true;
    } 
}


// This method is O(n^2)
// there's an another method in O(n), using Manacher's Algorithm. However, it's kind of complicated, so I give up it.
public class Solution {
    /**
     * @param s: input string
     * @return: a string as the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        // write your code here
        int max = 0;
        int left = 0;
        int right = 0;
        for (int i =0; i < s.length(); i++){
            int evenlen = longestBondary(s, i, i+1);
            int oddlen = longestBondary(s, i, i);
            
            int maxlen = Math.max(evenlen, oddlen);
            if (maxlen > max){
                max = maxlen;
                // it's even palindrome
                if (max%2 == 0){
                    left = i - (max/2 - 1);
                    right = i + 1 + (max/2 - 1);
                }
                // it's odd palindrome
                else{
                    left = i - (max-1)/2;
                    right = i + (max-1)/2;
                }
            }
        }
        
        return s.substring(left, right + 1);
    }
    
    
    // Because palindrome could be even or odd, I don't use mid-index to expand substring
    // check even substring, left = right - 1;
    // check odd substring, left = right
    private int longestBondary(String s, int left, int right){
        if (s == null || s.length() == 0){
            return 0;
        }        
        while(left >= 0 && right < s.length()){
            if (s.charAt(left) != s.charAt(right)){
                break;
            }            
            left --;
            right ++;
        }       
        return right - left - 1;
    }
}



# Python
# time: O(n^2); space: O(1)
class Solution:
    def longestPalindrome(self, s: str) -> str:
        # eliminate edge condition
        if(len(s) == 0 or s == None):
            return ""
        left = 0; right = 0
        
        for i in range(len(s)):
            even = self.helper(s, i, i + 1)
            odd = self.helper(s, i, i)
            tempMax = max(even, odd)
            
            print(tempMax)
            
            # tempMax is loner than the previous one
            if(tempMax >= (right - left +1)):
                # length of longest palindrome is even
                if(tempMax % 2 == 0):
                    left = i - ((tempMax//2)-1)
                    right = i+1 + ((tempMax//2)-1)

                else:
                    left = i - (tempMax-1) // 2
                    right = i + (tempMax-1) // 2
            
        
        return s[left: right+1]
    
    # This fucntion to figure out the longest palindrome, given by center point
    # use left & right two pinters, because length of palindrome can be even and odd, with two center pointers and one center point respectively
    def helper(self, s, left, right):
        if(len(s) == 0 or s == None):
            return 0
        
        while(left >= 0 and right <= len(s)-1 
              and left <= right and s[left] == s[right]):
            
            left -= 1
            right += 1
        
        return (right - left) + 1 - 2
        
        
