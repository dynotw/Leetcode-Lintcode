415. Valid Palindrome

Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Example
Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama"
Example 2:

Input: "race a car"
Output: false
Explanation: "raceacar"
Challenge
O(n) time without extra memory.

Notice
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.


// String & Two Pointers
public class Solution {
    /**
     * @param s: A string
     * @return: Whether the string is a valid palindrome
     */
    
    // judge whether is character
    public boolean isValid(char a){
        return Character.isLetter(a) || Character.isDigit(a);
    } 
     
    public boolean isPalindrome(String s) {
        // write your code here
        int left =0;
        int right = s.length()-1;
        
        if (s == null || s.length()==0 || s.length()==1){
            return true;
        }
        

        while(left <= right){
            while(left<right && !isValid(s.charAt(left))){
                left++;
            }
            
            // if (left==s.length()-1){
            //     return true;
            // }

            
            while(right>left && !isValid(s.charAt(right))){
                right--;
            }
            
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))){
                return false;
            }
            
            else{
                left++;
                right--;
            }
        }

        return true;
    }
}
