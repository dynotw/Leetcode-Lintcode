594. strStr II

Implement strStr function in O(n + m) time.

strStr return the first index of the target string in a source string. The length of the target string is m and the length of the source string is n.
If target does not exist in source, just return -1.

Example
Example 1:

Input：source = "abcdef"， target = "bcd"
Output：1
Explanation：
The position of the first occurrence of a string is 1.
Example 2:

Input：source = "abcde"， target = "e"
Output：4
Explanation：
The position of the first occurrence of a string is 


// This problem is same as 13(Lintcode)-E. Implement strStr()
// 13 has no time complexity requirement, so we can use naive method, but 594 requires O(m+n), so we need to use KMP Alogrithm, which is designed for string match
// https://www.youtube.com/watch?v=BXCEFAzhxGY&t=327s
# 暴力解法O(n)^2， 时间复杂度不行； 字符串匹配使用KMP(1st get prefix & suffix table of pattern; 2nd matching text and pattern)
# 无语了，Python有内置的xxx.find(xxx)函数，Java有xxx.indexOf(xxx)。只是这些内置方法的time complexity不太行
class Solution:
    """
    @param: source: A source string
    @param: target: A target string
    @return: An integer as index
    """
    def strStr2(self, source, target): 
        if(source == None or target == None or len(source) < len(target)):
            return -1
        if(len(target) ==0):
            return 0
        
        N = len(source) 
        M = len(target)
      
        # Preprocess the pattern (calculate table[] array), get tables[] that will hold the longest prefix suffix  
        table = self.computeLPSArray(target)
        
        j = 0 # index for target[]
        i = 0 # index for source[] 
        while i < N: 
            if target[j] == source[i]: 
                i += 1
                j += 1
                if(j == M):
                    return i-j 
                    # 如果只需输出第一个index，则无需对j重新赋值
                    j = table[j-1] 
            
            else:
                if j != 0: 
                    j = table[j-1] 
                else: 
                    i += 1
        
        return -1
    
    # get the prefix & suffix table of pattern
    # take AAACAAAA for example, which table is [0,1,2,0,1,2,4,3]
    def computeLPSArray(self, pattern): 
        length = 0 # length of the previous longest prefix suffix 
        
        size = len(pattern)
        table = [0] * size
 
        # the loop calculates table[i] for i = 1 to M-1(对应pattern)
        # table[0] must be 0
        i = 1
        while i < size: 
            # 
            if pattern[i]== pattern[length]: 
                length += 1
                table[i] = length
                i += 1
            
            # 需要从头匹配prefix和suffix了
            # pattern中的c，i=3时
            else:
                    length = 0
                    table[i] = 0
                    i += 1
        return table
