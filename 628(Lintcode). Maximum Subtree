628. Maximum Subtree

Given a binary tree, find the subtree with maximum sum. Return the root of the subtree.

Example
Example 1:

Input:
{1,-5,2,0,3,-4,-5}
Output:3
Explanation:
The tree is look like this:
     1
   /   \
 -5     2
 / \   /  \
0   3 -4  -5
The sum of subtree 3 (only one node) is the maximum. So we return 3.
Example 2:

Input:
{1}
Output:1
Explanation:
The tree is look like this:
   1
There is one and only one subtree in the tree. So we return 1.
Notice
LintCode will print the subtree which root is your return node.
It's guaranteed that there is only one subtree with maximum sum and the given binary tree is not an empty tree.




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


// Binary Tree, Divide, Construct a Struct
class ResultType{
    int sum;
    int maxSum;
    TreeNode maxSumSubtree;
    
    // Construct Function
    ResultType(int sum, int maxSum, TreeNode maxSumSubtree){
        this.sum = sum;
        this.maxSum = maxSum;
        this.maxSumSubtree = maxSumSubtree;
    }
}


public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the maximum weight node
     */
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        if (root == null){
            return null;
        }
        
        ResultType result = helper(root);
        
        return result.maxSumSubtree;
    }
    
    
    public ResultType helper(TreeNode root){
        if (root == null){
            return new ResultType(0, 0, null);
        }
        
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
// Conquer,这里较为特殊，因为需要new一个result（相当于root）
//一般需要比较root，root.left 和 root.right的时候，就会new一个root出来，毕竟自己在得到left和right后，我们没有得到root。
//因此我们需要自己new 一个初始化root出来进行比较       
        // 先假设maxSumSubtree就是root引导的Subtree
        ResultType result = new ResultType(
            left.sum + right.sum + root.val,
            left.sum + right.sum + root.val,
            root
        );
        
        // In this part, '>' and '>=' are both okay 
        if (left.maxSum >= result.maxSum){
            result.maxSum = left.maxSum;
            result.maxSumSubtree = left.maxSumSubtree;
        }
        
        if (right.maxSum >= result.maxSum){
            result.maxSum = right.maxSum;
            result.maxSumSubtree = right.maxSumSubtree;
        }
        
        return result;
    }
}
