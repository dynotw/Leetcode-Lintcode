14. First Position of Target
中文English
For a given sorted array (ascending order) and a target number, find the first index of this number in O(log n) time complexity.

If the target number does not exist in the array, return -1.

Example
Example 1:
	Input:  [1,4,4,5,7,7,8,9,9,10]，1
	Output: 0
	
	Explanation: 
	the first index of  1 is 0.

Example 2:
	Input: [1, 2, 3, 3, 4, 5, 10]，3
	Output: 2
	
	Explanation: 
	the first index of 3 is 2.

Example 3:
	Input: [1, 2, 3, 3, 4, 5, 10]，6
	Output: -1
	
	Explanation: 
	Not exist 6 in array.

Challenge
If the count of numbers is bigger than 2^32, can your code work properly?




public class Solution {
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    public int binarySearch(int[] nums, int target) {
        // write your code here

        // Firstly, consider special condition 
        if (nums == null || nums.length == 0){
            return -1;
        }
        
        
        //set two pointers
        int start = 0;
        int end = nums.length - 1;
        
        
        // use while loop to shorten the gap
        while (start + 1 < end){
            int mid = start + (end - start)/2;
            
            if (nums[mid] == target){
                end = mid;
            }
            
            else if (nums[mid] < target){
                start = mid;
                // or start = mid + 1;
            }
            
            else if (nums[mid] > target){
                end = mid;
                // or end = mid - 1;
            }
        }
        
        if (nums[start] == target){
            return start;
        }
        
        else if (nums[end] == target){
            return end;
        }
        
        return -1;
        
    }
}
