Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.




# time: O(nlogn),because I sort list firstly; space: O(1)
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        result = list()
        index = 0
        
        # 根据各个interval的起点排序，O(nlogn)
        intervals.sort(key=lambda num1: num1[0])

        while(index < len(intervals)):
            temp = intervals[index]
            while(index + 1 < len(intervals) and temp[1] >= intervals[index+1][0]):
                if(intervals[index+1][1] > temp[1]):
                    temp[1] = intervals[index+1][1]
                index += 1
            
            result.append(temp)
            index += 1
        
        return result
    
# it's the answer, which seems more simple than mine
# time: O(nlogn); space:O(1)
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # if the list of merged intervals is empty or if the current
            # interval does not overlap with the previous, simply append it.
            if len(merged) == 0 or merged[-1][1] < interval[0]:
                merged.append(interval)
                
            else:
            # otherwise, there is overlap, so we merge the current and previous
            # intervals.
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged
