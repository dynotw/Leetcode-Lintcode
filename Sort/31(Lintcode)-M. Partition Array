31. Partition Array

Given an array nums of integers and an int k, partition the array (i.e move the elements in "nums") such that:

All elements < k are moved to the left
All elements >= k are moved to the right
Return the partitioning index, i.e the first index i nums[i] >= k.

Example
Example 1:

Input:
[],9
Output:
0

Example 2:

Input:
[3,2,2,1],2
Output:1
Explanation:
the real array is[1,2,2,3].So return 1
Challenge
Can you partition the array in-place and in O(n)?

Notice
You should do really partition in array nums instead of just counting the numbers of integers smaller than k.

If all elements in nums are smaller than k, then return nums.length


// Two pointers, partition
// quite similar to QuickSort, but a little different: 1. left < right; 2. for right pointer, nums[right] >= k (problem mentions it)
// we have to use left < right, because the k may not be in the nums, compared with pivot must be in nums(QuickSort)
// for example: [3,3,3] with 2. If we still use left<=right, then right will become -1;
public class Solution {
    /**
     * @param nums: The integer array you should partition
     * @param k: An integer
     * @return: The index after partition
     */
    public int partitionArray(int[] nums, int k) {
        // write your code here
        
        if (nums == null || nums.length == 0){
            return 0;
        }
        
        int left = 0;
        int right = nums.length - 1;
        
        while (left < right){
            while (left < right && nums[left] < k){
                left++;
            }
            while (left < right && nums[right] >= k){
                right--;
            }          
            if (left < right){
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;            
                left++;
                right--;
            }
        }
        
        // Because we use left < right, left pointer must stop before k
        if (nums[left] < k){
            return left + 1;
        }
        else{
            return left;
        }
    }
}
