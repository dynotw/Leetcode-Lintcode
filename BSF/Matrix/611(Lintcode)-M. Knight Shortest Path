611. Knight Shortest Path

Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the shortest path to a destination position, return the length of the route.
Return -1 if destination cannot be reached.

Example
Example 1:

Input:
[[0,0,0],
 [0,0,0],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output: 2
Explanation:
[2,0]->[0,1]->[2,2]
Example 2:

Input:
[[0,1,0],
 [0,0,1],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output:-1
Clarification
If the knight is at (x, y), he can get to the following positions in one step:

(x + 1, y + 2)
(x + 1, y - 2)
(x - 1, y + 2)
(x - 1, y - 2)
(x + 2, y + 1)
(x + 2, y - 1)
(x - 2, y + 1)
(x - 2, y - 1)
Notice
source and destination must be empty.
Knight can not enter the barrier.
Path length refers to the number of steps the knight takes.




/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */


// BSF in matrix (shorest path)
// 本来matrix题，需要自定义coordinate，但是这里已经定义好了
// The first time, finish the BFS by myself(Matrix + Level Travese)
// time complexity to big, see python method 2&3
public class Solution {
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    public int shortestPath(boolean[][] grid, Point source, Point destination) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0 || (source.x == destination.x && source.y == destination.y){
            return 0;
        }
        
        Queue<Point> queue = new LinkedList<>();
        queue.offer(source);
        int[] directionX = {-1, -1, 1, 1, -2, -2, 2, 2};
        int[] directionY = {-2, 2, -2, 2, -1, 1, -1, 1};
        
        // BFS
        int time =0;
        while(!queue.isEmpty()){
            
            time++;
            
            int n = queue.size();
            for (int i = 0; i<n; i++){
                Point current = queue.poll();
                for (int j =0; j<8; j++){
                    Point move = new Point(
                        current.x + directionX[j],
                        current.y + directionY[j]);
                    
                    if(!isBound(grid, move)){
                        continue;
                    } 
                    
                    // IMPORTANT, here must be current.x == destination.x ....; 不能用current == destination
                    else if (move.x == destination.x && move.y == destination.y){
                        return time;
                    }
                    // meet the barrier
                    else if (grid[move.x][move.y] == true){
                        continue;
                    }
                    // 将走过的point标记为true，防止下次再次经过
                    else{
                        queue.offer(move);
                        grid[move.x][move.y] = true;
                    }
                }
            }
        }
        return -1;
    }
    
    private boolean isBound(boolean[][] grid, Point current){
        int n = grid.length;
        int m = grid[0].length;
        if (current.x >= 0 && current.x < n && current.y >=0 && current.y < m){
            return true;
        }
        else{
            return false;
        }
    }
}



// Python, same as Java, method 2&3 is better
"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""

class Solution:
    """
    @param grid: a chessboard included 0 (false) and 1 (true)
    @param source: a point
    @param destination: a point
    @return: the shortest path 
    """
    def isValidPostion(self, grid, point):
        height = len(grid)
        width = len(grid[0])

        return (point.x >= 0 and point.x < height and point.y >= 0 and point.y < width and grid[point.x][point.y] == 0)
    
    def shortestPath(self, grid, source, destination):
        # write your code here
        
        if (source.x == destination.x and source.y == destination.y):
            return 0
            
        step = 0
        
        # initialize queue
        queue = list()
        queue.append(source)
        
        # bfs (all step 1 is level 1; all step 2 is level 2)
        directionX = [-1,-1,1,1,-2,-2,2,2]
        directionY = [-2,2,-2,2,-1,1,-1,1]
        while (queue):
            num = len(queue)
            # this if statement is useless, because while(queue) ensure queue isn't empty
            if (num == 0):
                return -1
            step = step + 1
            for i in range(num):
                start = queue.pop(0)
                for j in range(8):
                    nextStep = Point(start.x + directionX[j], start.y + directionY[j])
                    if (self.isValidPostion(grid,nextStep)):
                        if (nextStep.x == destination.x and nextStep.y == destination.y):
                            return step
                        
                        else:
                            queue.append(nextStep)
                            grid[nextStep.x][nextStep.y] = 1
        
        return -1

// Python 2, just use matrix, don't need level traverse 
// 在while(queue)中少了一层for循环: for i in range(num):
"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""

class Solution:
        
    """
    @param grid: a chessboard included 0 (false) and 1 (true)
    @param source: a point
    @param destination: a point
    @return: the shortest path 
    """
    def shortestPath(self, grid, source, destination):
        queue = collections.deque([(source.x, source.y)])
        distance = {(source.x, source.y): 0}
        
        DIRECTIONS = [(-2, -1), (-2, 1), (-1, 2), (1, 2),(2, 1), (2, -1), (1, -2), (-1, -2)]
        while queue:
            x, y = queue.popleft()
            if (x, y) == (destination.x, destination.y):
                return distance[(x, y)]
            for dx, dy in DIRECTIONS:
                next_x, next_y = x + dx, y + dy
                if (next_x, next_y) in distance:
                    continue
                if not self.is_valid(next_x, next_y, grid):
                    continue
                distance[(next_x, next_y)] = distance[(x, y)] + 1
                queue.append((next_x, next_y))
        return -1
        
    def is_valid(self, x, y, grid):
        n, m = len(grid), len(grid[0])

        if x < 0 or x >= n or y < 0 or y >= m:
            return False
            
        return not grid[x][y]

// Python 3, 双向bfs，不会


