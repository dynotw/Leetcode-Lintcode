788. The Maze II

There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. 
When the ball stops, it could choose the next direction.

Given the ball's start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. 
The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.

The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. 
The start and destination coordinates are represented by row and column indexes.

Example
Example 1:
	Input:  
	(rowStart, colStart) = (0,4)
	(rowDest, colDest)= (4,4)
	0 0 1 0 0
	0 0 0 0 0
	0 0 0 1 0
	1 1 0 1 1
	0 0 0 0 0

	Output:  12
	
	Explanation:
	(0,4)->(0,3)->(1,3)->(1,2)->(1,1)->(1,0)->(2,0)->(2,1)->(2,2)->(3,2)->(4,2)->(4,3)->(4,4)

Example 2:
	Input:
	(rowStart, colStart) = (0,4)
	(rowDest, colDest)= (0,0)
	0 0 1 0 0
	0 0 0 0 0
	0 0 0 1 0
	1 1 0 1 1
	0 0 0 0 0

	Output:  6
	
	Explanation:
	(0,4)->(0,3)->(1,3)->(1,2)->(1,1)->(1,0)->(0,0)
	
Notice
1.There is only one ball and one destination in the maze.
2.Both the ball and the destination exist on an empty space, and they will not be at the same position initially.
3.The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.
4.The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.


class Coordinate{
    int x;
    int y;
    int steps;
    
    public Coordinate(int x, int y, int steps){
        this.x = x;
        this.y = y;
        this.steps =steps;
    }
}
// It's Stop at destination, instead of through destination
// 对于经过的点不能简单地标记为1，因为此题是可能走回头路的,所以本题另建了visited[][]。此作用是防止queue重复添加相同点，同时不改变maze[][]，因此不影响回头路。
// Based on Maze, Coordinate class add steps. Usually, we use HashMap to deal with distance problem, but we use PriorityQueue in this problem.
public class Solution {
    /**
     * @param maze: the maze
     * @param start: the start
     * @param destination: the destination
     * @return: whether the ball could stop at the destination
     */
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        // write your code here
        // eliminate edge condition
        if(maze == null || start == null || destination == null){
            return -1;
        }
        if(start[0] > maze.length || start[1] > maze[0].length || destination[0] > maze.length || destination[1] > maze[0].length){
            return -1;
        }
        
        PriorityQueue<Coordinate> queue = new PriorityQueue<Coordinate>((p1, p2)->(p1.steps - p2.steps));
        int[][] visited = new int[maze.length][maze[0].length];
        
        Coordinate root = new Coordinate(start[0], start[1], 0);
        queue.offer(root);
        visited[start[0]][start[1]] = 1;
        
        while(!queue.isEmpty()){
            int[] directionX = {-1,1,0,0};
            int[] directionY = {0,0,-1,1};
            Coordinate head = queue.poll();
            if(head.x == destination[0] && head.y == destination[1]){
                return head.steps;
            }
            
            for(int i=0; i<4; i++){
                // System.out.println("i is " + i);
                Coordinate next = new Coordinate(head.x, head.y, head.steps);
                // System.out.println("最初x是 " + next.x + "最初y是 " + next.y);
                
                while(isValidPostion(maze, next)){
                    next.x = next.x + directionX[i];
                    next.y = next.y + directionY[i];
                    next.steps = next.steps + 1;
                    
                    // System.out.println("中途x是 " + next.x + "中途y是 " + next.y);
                }

                next.x = next.x - directionX[i];
                next.y = next.y - directionY[i];
                next.steps = next.steps - 1;
                
                if(isValidPostion(maze, next) && visited[next.x][next.y] != 1){
                    queue.add(next);
                    // System.out.println("最终x是 " + next.x + "最终y是 " + next.y);
                    visited[next.x][next.y] = 1;
                }
            }
        }        
        return -1;
    }
    
    private boolean isValidPostion(int[][] maze, Coordinate point){
        int height = maze.length;
        int width = maze[0].length;
        
        if(point.x >= height || point.x < 0){
            return false;
        }        
        if(point.y >= width || point.y <0){
            return false;
        }        
        if(maze[point.x][point.y] == 1){
            return false;
        }        
        else{
            return true;
        }
    }
}
