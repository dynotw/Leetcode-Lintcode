Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally

Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.

Note: The length of each dimension in the given grid does not exceed 50.




# BFS + little modify
# time complexity: O(n^2); sapce complexity: O(n^2)
from collections import deque
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        maxnum = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    temp = self.bfs(grid, (i,j))
                    if temp > maxnum:
                        maxnum = temp
        
        return maxnum
                    
                    
                    
    def bfs(self, grid, position):
        queue = deque()
        queue.append(position)
        grid[position[0]][position[1]] = 0
        x = [-1, 1, 0, 0]
        y = [0, 0, -1, 1]
        num = 0
        
        while(queue):
            current = queue.popleft()
            num += 1
            for i in range(4):
                neigh = (current[0] + x[i], current[1] + y[i])
                if(self.isValid(grid, neigh)):
                    queue.append(neigh)
                    grid[neigh[0]][neigh[1]] = 0
        
        return num
    
    def isValid(self,grid,position):
        # out of boundary
        x = position[0]
        y = position[1]
        if(x >=len(grid) or x < 0):
            return False
        if (y >=len(grid[0]) or y < 0):
            return False
        
        return grid[x][y] == 1
            
