Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, 
so please be creative and come up with different approaches yourself.

 

Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]
 

Constraints:
The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# Both function implement BFS
# time complexity: O(n); space complexity: O(n)
from collections import deque
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        result = ''
        if root == None:
            return result
        
        visited = deque()
        visited.append(root)
        result += str(root.val) + ','
        
        while(visited):
            node = visited.popleft()
            
            if node != None:
                left = node.left
                right = node.right

                if left != None:
                    result += str(left.val) + ','
                else:
                    result += "None,"
                if right != None:
                    result += str(right.val) + ','
                else:
                    result += 'None,'

                visited.append(left)
                visited.append(right)

       
        return result
        
        
    def deserialize(self, data):
        # empty data 
        if not data:
            return None
        
        ls = data.split(',')
        root = TreeNode(int(ls[0]))
        queue = deque()
        queue.append(root)
        
        i = 1
        while queue and i < len(ls):
            node = queue.popleft()
            if ls[i] != 'None':
                left = TreeNode(int(ls[i]))
                node.left = left
                queue.append(left)
                
            i += 1
            if ls[i] != 'None':
                right = TreeNode(int(ls[i]))
                node.right = right
                queue.append(right)
            i += 1
        return root
        
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
