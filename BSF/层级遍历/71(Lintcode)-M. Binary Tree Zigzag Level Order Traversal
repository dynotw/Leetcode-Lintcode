71. Binary Tree Zigzag Level Order Traversal

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

Example
Example 1:

Input:{1,2,3}
Output:[[1],[3,2]]
Explanation:
    1
   / \
  2   3
it will be serialized {1,2,3}
Example 2:

Input:{3,9,20,#,#,15,7}
Output:[[3],[20,9],[15,7]]
Explanation:
    3
   / \
  9  20
    /  \
   15   7
it will be serialized {3,9,20,#,#,15,7}


/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// BFS in Binary Tree, 层级遍历(prefer 2nd method, because it also uses queue)
// 1st method, still uses queue
public class Solution{
    public List<List<Integer>> zigzagLevelOrder(TreeNode root){
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        if (root == null){
            return result;
        }
        boolean reverse = false;
        Queue<TreeNode> queue = new LinkedList<>();
        
        queue.offer(root);
        
        while(!queue.isEmpty()){
            List<Integer> currLevel = new LinkedList<>();
            int size = queue.size();
            
            for (int i=0; i<size; i++){
                TreeNode head = queue.poll();
                if (reverse){
                    currLevel.add(0,head.val);
                }
                else{
                    currLevel.add(head.val);
                }
                
                if (head.left != null){
                    queue.offer(head.left);
                }
                if (head.right != null){
                    queue.offer(head.right);
                }
            }
            reverse = ! reverse;
            result.add(currLevel);
        }
        return result;
    }
}

// In this problem, we need to use Stack instead of Queue
// because we need to use the property of Stack, FILO
        Stack<TreeNode> currLevel = new Stack<TreeNode>();
    
    // 层序遍历完之后，看层数，偶数层reverse一下即可
        boolean normalOrder = true;    
        currLevel.push(root);
        
        while (!currLevel.isEmpty()) {
            ArrayList<Integer> currLevelResult = new ArrayList<Integer>();
            
    /*
    Because Stack is FILO, we can't put the nextLevel's node into currLevel directly
    If we do in this way, pop() operation will get the nextLevel's node rather than currLevel' node, 
    so we new a nextLevel to put the nextLevel's node temporarily as buffer.
    
    */
            Stack<TreeNode> nextLevel = new Stack<TreeNode>();
            
            int n = currLevel.size();
            for (int i=0; i < n; i++){
                TreeNode node = currLevel.pop();
                currLevelResult.add(node.val);
            
                if (normalOrder) {
                    if (node.left != null) {
                        nextLevel.push(node.left);
                    }
                    if (node.right != null) {
                        nextLevel.push(node.right);
                    }
                }
                else {
                    if (node.right != null) {
                            nextLevel.push(node.right);
                    }
                    if (node.left != null) {
                        nextLevel.push(node.left);
                    }
                } 
            }
            
            result.add(currLevelResult);
            currLevel = nextLevel;
            normalOrder = !normalOrder;
        }

        return result;
    }
}


// 2nd method


