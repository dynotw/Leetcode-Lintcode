615. Course Schedule

There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Example
Example 1:

Input: n = 2, prerequisites = [[1,0]] 
Output: true
Example 2:

Input: n = 2, prerequisites = [[1,0],[0,1]] 
Output: false



// Graph, BFS, topological
public class Solution {
    /*
     * @param numCourses: a total of n courses
     * @param prerequisites: a list of prerequisite pairs
     * @return: true if can finish all courses or false
     */
     
//1.根据先修课关系，建立有向图的hashmap(这步是127没有的，因为127中直接给了Node)
//2.根据先修课关系，建立indegree的hashmap
//3.把所有入度为0 的课程加入到队列中
//4.拓扑排序，处理节点，统计节点个数（经典Topo模板）

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // write your code here
       if (prerequisites == null || prerequisites.length == 0 || prerequisites[0].length == 0) {
            return true;
        }
        
        // 用来存放上过的课
        List<Integer> courses = new LinkedList<>();
        
        Map<Integer, ArrayList<Integer>> map = new HashMap<>();
        Map<Integer, Integer> indegree = new HashMap<>();

        //initialize map and indegree
        for (int i = 0; i < numCourses; i++) {
            map.put(i, new ArrayList<Integer>());
            indegree.put(i, 0);
        }
        
        //populating map and indegree
        for (int i = 0; i < prerequisites.length; i++) {
            // prerequisites[i][1] 和 prerequisites[i][0] 分别代表什么
            // 所有pair都是由两个元素组成，prerequisites[i][0]就要学的课，prerequisites[i][1]就是prerequisites[i][0]的课程的先修课
            
            // map.get(key), return corresponding value
            // prerequisites[i][0]相当于是Node.label, prerequisites[i][1]相当于是neighbors中的一个neighbor（ArrayList<>中的一个元素）
            map.get(prerequisites[i][1]).add(prerequisites[i][0]);
            indegree.put(prerequisites[i][0], indegree.get(prerequisites[i][0]) + 1);
        }
        
        
        //put all courses that with indegree == 0 to queue
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegree.get(i) == 0) {
                queue.offer(i);
                courses.add(i);
            }
        }
        
        //topological sorting
        // This part is similar to 127
        // 从queue中读取元素后，就将此元素指向的元素的indgree都减一，若此时有元素的indgree变成0，则将其放入queue
        // count & courses 用一个即可，只是用courses更接近127
        // int count = 0;
        while (!queue.isEmpty()) {
            //count++;
            int cur = queue.poll();
            for (int next : map.get(cur)) {
                indegree.put(next, indegree.get(next) - 1);
                
                if (indegree.get(next) == 0) {
                    queue.offer(next);
                    courses.add(next);
                }
            }
        }
        return (courses.size() == numCourses);
        //return count == numCourses;
    }
}
