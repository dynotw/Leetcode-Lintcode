616. Course Schedule II

There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example
Example 1:

Input: n = 2, prerequisites = [[1,0]] 
Output: [0,1]
Example 2:

Input: n = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] 
Output: [0,1,2,3] or [0,2,1,3]


// This problem is same as 615, the only one difference is that 615 outputs boolean, but 616 outputs array

// Java
public class Solution {
    /*
     * @param numCourses: a total of n courses
     * @param prerequisites: a list of prerequisite pairs
     * @return: the course order
     */
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        // write your code here
        List<Integer> result = new ArrayList<>();

        if (numCourses == 0){
            return new int[0];
        }

        // initialize directed graph
        HashMap<Integer,List<Integer>> directedGraph = new HashMap<>();

        for (int i=0; i<numCourses; i++){
            List<Integer> neighbors = new LinkedList<>();
            directedGraph.put(i, neighbors);
        }

        for (int[] pair : prerequisites){
            directedGraph.get(pair[1]).add(pair[0]);
        }

        System.out.println(directedGraph);

        // initialize indegree
        HashMap<Integer,Integer> indegree = new HashMap<>();
        for (int i=0; i<numCourses;i++){
            indegree.put(i, 0);
        }
        for (int i=0; i<numCourses; i++){
            for (int course : directedGraph.get(i)){
                indegree.put(course, indegree.get(course) + 1);
            }
        }

        // initialize queue
        Queue<Integer> queue = new LinkedList<>();
        for (int i =0; i<numCourses; i++){
            if (indegree.get(i) == 0){
                queue.offer(i);
                result.add(i);
            }
        }

        // bfs
        while(! queue.isEmpty()){
            int start = queue.poll();
            for (int next: directedGraph.get(start)){
                indegree.put(next, indegree.get(next)-1);
                if (indegree.get(next) == 0){
                    queue.offer(next);
                    result.add(next);
                }
            }
        }
        
        if (result.size() == numCourses){
            int[] order = new int[numCourses];
            int index = 0;
            for (int i: result){
                order[index] = i;
                index++;
            }
            
            return order;
        }
        
        return new int[0];
        
    }

}
