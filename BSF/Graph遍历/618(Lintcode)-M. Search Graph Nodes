618. Search Graph Nodes

Given a undirected graph, a node and a target, return the nearest node to given node which value of it is target, 
return NULL if you can't find.

There is a mapping store the nodes' values in the given parameters.

Example
Example 1:

Input:
{1,2,3,4#2,1,3#3,1,2#4,1,5#5,4}
[3,4,5,50,50]
1
50
Output:
4
Explanation:
2------3  5
 \     |  | 
  \    |  |
   \   |  |
    \  |  |
      1 --4
Give a node 1, target is 50

there a hash named values which is [3,4,10,50,50], represent:
Value of node 1 is 3
Value of node 2 is 4
Value of node 3 is 10
Value of node 4 is 50
Value of node 5 is 50

Return node 4
Example 2:

Input:
{1,2#2,1}
[0,1]
1
1
Output:
2
Notice
It's guaranteed there is only one available solution




/**
 * Definition for graph node.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { 
 *         label = x; neighbors = new ArrayList<UndirectedGraphNode>(); 
 *     }
 * };
 */

// Graph, BFS, recommend 2nd method
// 1st method, this method is more like BFS in Binary Tree, because I get the size of queue, and use the size to control for loop， 不同it's unnesaccery  
public class Solution {
    /*
     * @param graph: a list of Undirected graph node
     * @param values: a hash mapping, <UndirectedGraphNode, (int)value>
     * @param node: an Undirected graph node
     * @param target: An integer
     * @return: a node
     */
    public UndirectedGraphNode searchNode(ArrayList<UndirectedGraphNode> graph,
                            // values describe the label of each UndirectedGraphNode
                                          Map<UndirectedGraphNode, Integer> values,
                                          UndirectedGraphNode node,
                                          int target) {
        // write your code here
        
        if (node == null) {
            return null;
        }
        
        // 记住Queue基本都用LinkedList的实现
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        queue.offer(node);
        
        // 当我们不希望container里面重复出现相同元素，就用HashSet
        HashSet<UndirectedGraphNode> hash = new HashSet<>();
        hash.add(node);
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                UndirectedGraphNode currNode = queue.poll();
                
                // 判断currNode.label(Integer) is equal to target
                if (values.get(currNode) == target) {
                    // because we only need to return the closet UndirectedGraphNode, 
                    // the first UndirectedGraphNode found must be the closet UndirectedGraphNode
                    // then we just return the UndirectedGraphNode, the code should be over
                    return currNode;
                }
                
                else {
                    for (UndirectedGraphNode neighbor : currNode.neighbors) {
                        if (!hash.contains(neighbor)) {
                            queue.offer(neighbor);
                            hash.add(neighbor);
                        }
                    }
                }
            }
        }
        
        // Loop doesn't return any UndirectedGraphNode, it means there is no such UndirectedGraphNode
        return null;
    }
}

// 2nd method, this method is more like BFS in Graph Traverse
/**
 * Definition for graph node.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { 
 *         label = x; neighbors = new ArrayList<UndirectedGraphNode>(); 
 *     }
 * };
 */

public class Solution {
    /*
     * @param graph: a list of Undirected graph node
     * @param values: a hash mapping, <UndirectedGraphNode, (int)value>
     * @param node: an Undirected graph node
     * @param target: An integer
     * @return: a node
     */
    public UndirectedGraphNode searchNode(ArrayList<UndirectedGraphNode> graph,
                                          Map<UndirectedGraphNode, Integer> values,
                                          UndirectedGraphNode node,
                                          int target) {
        // write your code here
        //eliminate edge condition
        if(graph == null || values == null || node == null){
            return null;
        }
        // 在bfs中，我将判断放在了while内部，这样就忽略了queue中的第一个object，which is offered out of bfs
        if(values.get(node) == target){
            return node;
        }
        
        // bfs
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        Set<UndirectedGraphNode> hashset = new HashSet<>();
        queue.offer(node);
        hashset.add(node);
        
        while(! queue.isEmpty()){
            UndirectedGraphNode head = queue.poll();
            
            for (UndirectedGraphNode neigh : head.neighbors){
                if(values.get(neigh) == target){
                    return neigh;
                }
                
                if(! hashset.contains(neigh)){
                    queue.offer(neigh);
                }
            }
        }
        return null;
    }
}
