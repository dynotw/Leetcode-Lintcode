531. Six Degrees

Six degrees of separation is the theory that everyone and everything is six or fewer steps away, by way of introduction, from any other person in the world, so that a chain of "a friend of a friend" statements can be made to connect any two people in a maximum of six steps.

Given a friendship relations, find the degrees of two people, return -1 if they can not been connected by friends of friends.

Example
Example1

Input: {1,2,3#2,1,4#3,1,4#4,2,3} and s = 1, t = 4 
Output: 2
Explanation:
    1------2-----4
     \          /
      \        /
       \--3--/
Example2

Input: {1#2,4#3,4#4,2,3} and s = 1, t = 4
Output: -1
Explanation:
    1      2-----4
                 /
               /
              3
              
              

/**
 * Definition for Undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { 
 *         label = x;
 *         neighbors = new ArrayList<UndirectedGraphNode>(); 
 *     }
 * };
 */

// bfs in graph, queue+hashset
public class Solution {
    /*
     * @param graph: a list of Undirected graph node
     * @param s: Undirected graph node
     * @param t: Undirected graph nodes
     * @return: an integer
     */
    public int sixDegrees(List<UndirectedGraphNode> graph, UndirectedGraphNode s, UndirectedGraphNode t) {
        // write your code here
        
        //eliminate edge condition
        if(graph == null || s==null || t==null){
            return -1;
        }
        if(s==t){
            return 0;
        }
        //bfs
        int degree=0;
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        Set<UndirectedGraphNode> visited = new HashSet<>();
        queue.offer(s);
        visited.add(s);
        
        while(! queue.isEmpty()){
            int people = queue.size();
            degree++;
            
            for(int i=0; i<people; i++){
                UndirectedGraphNode head = queue.poll();
                
                for(UndirectedGraphNode next : head.neighbors){
                    if(next == t){
                        return degree;
                    }
                    
                    if(! visited.contains(next)){
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
        }
        
        return -1;
    }
}
