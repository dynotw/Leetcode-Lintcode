Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
  
  
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// BFS, just extension problem of binary tree level travesal
// Time Complexity: O(n); Space complexity: O(n)
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new LinkedList<>();
        // eliminate edge condition
        if (root == null){
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        result.add(root.val);
        
        while(! queue.isEmpty()){
            // follow level traversal in BFS
            int size = queue.size();
            boolean insert = false; // to show whether val has been showed in this level
            for (int i=0; i < size; i++){
                TreeNode start = queue.poll();
                if(start.right != null){
                    queue.offer(start.right);
                    if (insert == false){
                        result.add(start.right.val);
                        insert = true;
                    }
                }
                if(start.left != null){
                    queue.offer(start.left);
                    if (insert == false){
                        result.add(start.left.val);
                        insert = true;
                    }
                }
                
            }
        }
        
        return result;
    }
}
