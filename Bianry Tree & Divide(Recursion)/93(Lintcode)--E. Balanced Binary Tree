93. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.
This problem refers to height, so we don't need to think minimum depth, just campare the maximum depth of each subtree

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example
Example  1:
	Input: tree = {1,2,3}
	Output: true
	
	Explanation:
	This is a balanced binary tree.
		  1  
		 / \                
		2   3

	
Example  2:
	Input: tree = {3,9,20,#,#,15,7}
	Output: true
	
	Explanation:
	This is a balanced binary tree.
		  3  
		 / \                
		9  20                
		  /  \                
		 15   7 

	
Example  3:
	Input: tree = {1,#,2,3,4}
	Output: false
	
	Explanation:
	This is not a balanced tree. 
	The height of node 1's right sub-tree is 2 but left sub-tree is 0.
		  1  
		   \                
		   2                
		  /  \                
		 3   4
	




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// This problem is Binary Tree and Divide
// Use Divide, and construct own struct(class)

// define a struct to return the depth of tree and whether it's balanced.
class ResultType{
    public int depth;
    public boolean isBalanced;
    // 构造函数
    public ResultType(int depth, boolean isBalanced){
        this.isBalanced = isBalanced;
        this.depth = depth;
    }
}

public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        // write your code here
        
        // eliminate special case
	// this (root == null)，不是recursion中的over条件（不是divide的部分），只是单纯的排除特殊情况
        if (root == null){
            return true;
        }
        
        return helper(root).isBalanced;
    }
    
    // 如果自己定义了一个construct，通常也会对应地定义一个函数
    public ResultType helper(TreeNode root){
        
        ResultType result = new ResultType(0,true);
        if (root == null){
            result.depth = 0;
            result.isBalanced = true;
            return result;
        }
        
        // Divide
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        // 
        if (!left.isBalanced || !right.isBalanced){
            // must return ResultType (because we define hepler in this way)
            // this condition, we can return any depth. 
            // isBalanced is false, so whatever depth is, always return fasle 
            // we only care the isBalanced of ResultType
            result.depth = 0;
            result.isBalanced = false;
            return result;
        }
        
        else if (Math.abs(left.depth - right.depth) > 1){
            // 与上一个condition一样
            result.depth = 0;
            result.isBalanced = false;
            return result;
        }
        
        // this case, we must return the maxDepth
        else{
            result.depth = Math.max(left.depth,right.depth) + 1;
            result.isBalanced = true;
            return result;
        }
    }
}



// Method 2 (without ResultType)
public class Solution {
    public boolean isBalanced(TreeNode root) {
        return maxDepth(root) != -1;
    }

    private int maxDepth(TreeNode root) {
        // exit of recursion
	if (root == null) {
            return 0;
        }
	
	// Divide
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
	
	// Conquer
        if (left == -1 || right == -1 || Math.abs(left-right) > 1) {
            return -1;
        }
        return Math.max(left, right) + 1;
    }
}
