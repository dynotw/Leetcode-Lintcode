1358. Path Sum

Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Example
Example 1:

Input:tree = [5,4,8,11,#,13,4,7,2,#,#,#,#,#,1], sum = 22
Output: true
Explanation: Given the below binary tree
      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
Example 2:

Input:tree = [5,4,8], sum =18 
Output: false
Notice
A leaf is a node with no children.



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: TreeNode, sum: int) -> bool:
        result=self.helper(root, sum)
        
        return result
        
    def helper(self, root, sum):
        # exit of recursion
        if(root == None):
            return False
        if(root.left == None and root.right == None):
            return sum == root.val
        
        left = self.helper(root.left, sum - root.val)
        right = self.helper(root.right, sum - root.val)
        
        return (left or right)
        
    
