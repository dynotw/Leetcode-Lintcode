376. Binary Tree Path Sum

Given a binary tree, find all paths that sum of the nodes in the path equals to a given number target.

A valid path is from root node to any of the leaf nodes.

Example
Example 1:

Input:
{1,2,4,2,3}
5
Output: [[1, 2, 2],[1, 4]]
Explanation:
The tree is look like this:
	     1
	    / \
	   2   4
	  / \
	 2   3
For sum = 5 , it is obviously 1 + 2 + 2 = 1 + 4 = 5
Example 2:

Input:
{1,2,4,2,3}
3
Output: []
Explanation:
The tree is look like this:
	     1
	    / \
	   2   4
	  / \
	 2   3
Notice we need to find all paths from root node to leaf nodes.
1 + 2 + 2 = 5, 1 + 2 + 3 = 6, 1 + 4 = 5 
There is no one satisfying it.





/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /*
     * @param root: the root of binary tree
     * @param target: An integer
     * @return: all valid paths
     */
    public List<List<Integer>> binaryTreePathSum(TreeNode root, int target) {
        // write your code here
        
        //result stores the whole output
        List<List<Integer>> result = new ArrayList<>();
        
        // path 储存每个可能path，并且在将path写入rst后，会将这个path清理一下，储存新的path
        ArrayList<Integer> path = new ArrayList<>();
    
        if (root == null) {
            return result;
        }
        
        dfs(result, path, root, 0, target);
        return result;
    }
    
    private void dfs (List<List<Integer>> result, ArrayList<Integer> path, TreeNode root, int currSum, int target) {
        
        path.add(root.val);
        
        // this condition is when recursion is over  
        if (root.left == null && root.right == null) {
            if (currSum + root.val == target) {
                
                // 因为在后面我们还对path进行了remove的操作，所以我们不能直接将path插入rst里面
                // 这样会使得，当我们在进行remove操作时，rst里面的所插入path的对应值也发生改变（因为path不是值传递，引用传递），所以我们要new一个新的对象。
                // 这里不是对path做个新的引用，而是根据path的内容new一个新的对象
                
                ArrayList path1 = new ArrayList<>(path);
                result.add(path1);
            }
            
            // 这个return 不是退出整个函数，而是退出其所在的那层函数(相当于最底层的dfs函数)
            return;
        }
        
        if (root.left != null) {
            dfs(result, path, root.left, currSum + root.val, target);
            
            // 当一条支路做完后，要把dfs所插入path的root.val全部删除，再重新开始计算另外一条支路
            path.remove(path.size() - 1);
        }
 
        if (root.right != null) {
            dfs(result, path, root.right, currSum + root.val, target);
            path.remove(path.size() - 1);
        }
    }
}
