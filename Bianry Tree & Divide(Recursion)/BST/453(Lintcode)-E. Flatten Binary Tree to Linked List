453. Flatten Binary Tree to Linked List

Flatten a binary tree to a fake "linked list" in pre-order traversal.

Here we use the right pointer in TreeNode as the next pointer in ListNode.

Example
Example 1:

Input:{1,2,5,3,4,#,6}
Output：{1,#,2,#,3,#,4,#,5,#,6}
Explanation：
     1
    / \
   2   5
  / \   \
 3   4   6

1
\
 2
  \
   3
    \
     4
      \
       5
        \
         6
Example 2:

Input:{1}
Output:{1}
Explanation：
         1
         1
Challenge
Do it in-place without any extra memory.

Notice
Don't forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.






/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// Binary Tree, Divide, Traverse
// This problem is difficult, I can't figure out
/*
// 自己的做法，错误在Left.right = Right
// Right应该放在Left的leaf.right而不是直接放在Left.right。因为这样使得原本的Left.right所引导的subtree消失了。
public class Solution {
    public void flatten(TreeNode root) {
        // write your code here
        helper(root);
    }
    
    private TreeNode helper(TreeNode root){
        if(root == null){
            return null;
        }
        
        TreeNode Left = helper(root.left);
        TreeNode Right = helper(root.right);
        
        if (Left != null){
            Left.right = Right;
            Left.left = null;
            root.right = Left;
            root.left = null;
        }
        
        if (Left == null){
            root.right = Right;
            root.left = null;
        }
        
        return root;
    }
}
*/

// Divide & Conquer in BST, Compared to 1534, 同时对Binary Tree Traversal的基础上进行改动
// 2nd method, Own method based on Preorder in Binary Tree
// Don't need to worry about when I change the root.left and root.right, certain subtrees in original tree will disapper(like in 1st method)
// because all information about subtree is already stored in left and right two List<TreeNode>(through 2.Divide)
public class Solution{
    public void flatten(TreeNode root){
        if (root == null){
            return;
        }
        helper(root);
    }
    
    private List<TreeNode> helper (TreeNode root){
        List<TreeNode> result = new LinkedList<>();
        
        // 1. Over
        if (root == null){
            return result;
        }
        
        // 2.Divide
        List<TreeNode> left = helper(root.left);
        List<TreeNode> right = helper(root.right);
    
        // 3. Conquer
        int leftSize = left.size();
        int rightSize = right.size();
        result.add(root);
        result.addAll(left);
        result.addAll(right);
        
        root.left =null;
        if (leftSize > 0){
            root.right = left.get(0);
            if (rightSize > 0){
                TreeNode leftLast = left.get(leftSize - 1);
                leftLast.right = right.get(0);
            }
        }
        
        else if (leftSize <= 0){
            if (rightSize > 0){
                root.right = right.get(0);
            }
        }
        
        return result;
    }
}

/*
// 画图才能理解
// 答案有一点没理解，答案return的是新的Binary Tree的leaf而不是root
public class Solution {
    public void flatten(TreeNode root) {
        helper(root);
    }
    
    // flatten root and return the last node
    private TreeNode helper(TreeNode root) {
        if (root == null) {
            return null;
        }
        
        TreeNode leftLast = helper(root.left);
        TreeNode rightLast = helper(root.right);
        
        // connect leftLast to root.right
        if (leftLast != null) {
            leftLast.right = root.right;
            root.right = root.left;
            root.left = null;
        }
        
        if (rightLast != null) {
            return rightLast;
        }
        
        if (leftLast != null) {
            return leftLast;
        }
        
        return root;
    }
}
*/
