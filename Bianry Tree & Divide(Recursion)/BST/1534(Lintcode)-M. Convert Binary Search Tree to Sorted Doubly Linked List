1534. Convert Binary Search Tree to Sorted Doubly Linked List

Convert a BST to a sorted circular doubly-linked list in-place. Think of the left and right pointers as synonymous to the previous and next pointers in a doubly-linked list.

Let's take the following BST as an example, it may help you understand the problem better:

bstdlloriginalbst

We want to transform this BST into a circular doubly linked list. Each node in a doubly linked list has a predecessor and successor. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

The figure below shows the circular doubly linked list for the BST above. The "head" symbol means the node it points to is the smallest element of the linked list.

bstdllreturndll

Specifically, we want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. We should return the pointer to the first element of the linked list.

The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.

bstdllreturnbst

Example
Example 1:

Input: {4,2,5,1,3}
        4
       /  \
      2   5
     / \
    1   3
Output: "left:1->5->4->3->2  right:1->2->3->4->5"
Explanation:
Left: reverse output
Right: positive sequence output
Example 2:

Input: {2,1,3}
        2
       /  \
      1   3
Output: "left:1->3->2  right:1->2->3"




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


// Divide &Conquer in BST, use Inorder Traverse,
// In Conquer, we connect each node
// 1st method, Own method (效率也不错), 就记这个method
// Don't need to worry that certain subtree in Binary Tree will disappear when I change the root.left and root.right
// Because all Subtree Nodes have been stored in left and right, two List<TreeNode>.
// Even certain Nodes lose the pointer(root), we also can use List<TreeNode> to access them
public class Solution{
    public TreeNode treeToDoublyList(TreeNode root){
        // eliminate special case
        if(root == null){
            return root;
        }
        
        List<TreeNode> result = new LinkedList<>();
        
        result = helper(root);
        TreeNode head = result.get(0);
        TreeNode tail = result.get(result.size()-1);
        head.left = tail;
        tail.right = head;
        
        return head;
    }
    
    private List<TreeNode> helper(TreeNode root){
        List<TreeNode> result = new LinkedList<>();
        
        // 1.Over
        if (root == null){
            return result;
        }
        
        // 2.Divide
        List<TreeNode> left = helper(root.left);
        int leftSize = left.size();
        List<TreeNode> right = helper(root.right);
        int rightSize = right.size();
        
        // 3.Conquer
        if (leftSize > 0){
            TreeNode leftTail = left.get(leftSize-1);
            leftTail.right = root;
            root.left = leftTail;
        }
        result.addAll(left);
        result.add(root);
        result.addAll(right);
        if (rightSize > 0){
            TreeNode rightHead = right.get(0);
            root.right = rightHead;
            rightHead.left = root;
        }
        
        return result;
    }
}



/*
// 2nd method
class Solution {
    public TreeNode treeToDoublyList(TreeNode root) {
        // eliminate special case
        if (root == null) {
            return null;
        }
        
        TreeNode[] minMax = dfs(root);
        minMax[0].left = minMax[1];
        minMax[1].right = minMax[0];            
        return minMax[0];
    }
    
    public TreeNode[] dfs(TreeNode root) {
        if (root == null) return new TreeNode[] {null, null};
        
        TreeNode[] lefts = dfs(root.left);       
        TreeNode[] rights = dfs(root.right);
        
        root.left = lefts[1];
        if (lefts[1] != null) lefts[1].right = root;
        root.right = rights[0];
        if (rights[0] != nulTreel) {
           rights[0].left = root; 
        }
        
        TreeNode min = lefts[0] != null ? lefts[0] : root;
        TreeNode max = rights[1] != null ? rights[1] : root;
        return new TreeNode[] {min, max};
    }
}
*/


/*
// The code of this problem is modified from the Inorder Traversal
// 3rd
// 不是太理解过程
public class Solution {
    public TreeNode treeToDoublyList(TreeNode root) {
        // Write your code here.
        List<TreeNode> list = new ArrayList<>();
        if (root == null){
            return root;
        }
        
        helper(root, list);
        
        // helper fucntion只能linked list内部的node，一头一尾还得单独linked
        TreeNode head = list.get(0);
        TreeNode tail = list.get(list.size()-1);
        head.left = tail;
        tail.right = head;
        
        return head;
    }
    
    private void helper(TreeNode root, List<TreeNode> list){
        if (root == null){
            return;
        }
        
        helper(root.left, list);
        list.add(root);
        
        // make the linked between two nodes
        // This if statement have to put after list.add(root), I don't know why
        if (list.size() >= 2){
            int n = list.size();
            TreeNode a = list.get(n-2);
            TreeNode b = list.get(n-1);
            a.right = b;
            b.left = a;
        }   
        
        helper(root.right, list);
    }
}
*/
