902. Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Example
Example 1:

Input：{1,#,2},2
Output：2
Explanation：
	1
	 \
	  2
The second smallest element is 2.
Example 2:

Input：{2,1,3},1
Output：1
Explanation：
  2
 / \
1   3
The first smallest element is 1.
Challenge
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Notice
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.



// Divide &Connquer in BST
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        result = self.helper(root, k)
        return result[k-1]
    
    def helper(self,root,k):
        result = list()
        if(root == None):
            return result
        
        # divide
        left = self.helper(root.left, k)
        # more k element, there's no need check right subtree
        if(len(left) > k):
            return left
        right = self.helper(root.right, k)
        
        # Conquer
        result.extend(left)
        result.append(root.val)
        result.extend(right)
        
        return result
        
