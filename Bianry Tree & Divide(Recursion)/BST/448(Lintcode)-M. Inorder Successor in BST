448. Inorder Successor in BST

Given a binary search tree (See Definition) and a node in it, find the in-order successor of that node in the BST.

If the given node has no in-order successor in the tree, return null.

Example
Example 1:
Input: {1,#,2}, node with value 1
Output: 2
Explanation:
  1
   \
    2
    
Example 2:
Input: {2,1,3}, node with value 1
Output: 2
Explanation: 
    2
   / \
  1   3
  
Binary Tree Representation

Challenge
O(h), where h is the height of the BST.

Notice
It's guaranteed p is one node in the given tree. (You can directly compare the memory address to find p)


// time complexity is O(h), h is height of bst.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code 
        TreeNode result = null;
        while(root != null){
            // successor is root or at left subtree
            if(p.val < root.val){ 
                result = root;
                root = root.left;
            }
            // 1. root.right == null: there's no successor; 2. root.right != null, successor is the most left TreeNode
            else if(p.val == root.val){
                root = root.right;
            }
            // 1. root.right == null: there's no successor; 2. root.right != null, successor is in the right subtree
            else{
                root = root.right;
            }
        }
        return result;
    }
}



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# 相当于findNext()
class Solution:
    def inorderSuccessor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        result = None
        
        # It's inorder in BST, non-decreasing
        while(root != None):
            # successor is root or at left subtree
            if p.val < root.val:
                result = root
                root = root.left
            
            # 1. no successor, 2. successor is the most left treenode               
            elif(p.val == root.val):
                root = root.right
            
            # 1. no successor; 2.successor is in the right subtree
            else:
                root = root.right
        
        return result
