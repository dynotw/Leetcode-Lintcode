900. Closest Binary Search Tree Value

Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Example
Example1

Input: root = {5,4,9,2,#,8,10} and target = 6.124780
Output: 5
Explanation：
Binary tree {5,4,9,2,#,8,10},  denote the following structure:
        5
       / \
     4    9
    /    / \
   2    8  10
Example2

Input: root = {3,2,4,1} and target = 4.142857
Output: 4
Explanation：
Binary tree {3,2,4,1},  denote the following structure:
     3
    / \
  2    4
 /
1
Notice
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.



// This problem isn't used Divide & Conquer
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
// This problem use the feature of BST, so we don't need to divide & conquer
public class Solution {

    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    public int closestValue(TreeNode root, double target) {
        // write your code here
        if(root == null) return -1;

        int closestVal;

        int LowerBound = Integer.MIN_VALUE;
        int UpperBound = Integer.MAX_VALUE;

        TreeNode node = root;
        while (node != null) {
            int curVal = node.val;
            if(curVal == target) return curVal;

            if (curVal < target) {
                LowerBound = curVal;
                node = node.right;
            } else {
                UpperBound = curVal;
                node = node.left;
            }
        }
        
        // There maybe all node.val is less or great than target. target is closer to MAX_VALUE or MIN_VALUE
        if(LowerBound == Integer.MIN_VALUE && UpperBound != Integer.MAX_VALUE) return UpperBound;
        if(UpperBound == Integer.MAX_VALUE && LowerBound != Integer.MIN_VALUE) return LowerBound;

        closestVal = Math.abs(LowerBound - target) < Math.abs(UpperBound - target) ? LowerBound : UpperBound;
        return closestVal;
    }
}
