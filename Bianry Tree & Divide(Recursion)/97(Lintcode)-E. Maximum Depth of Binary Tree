97. Maximum Depth of Binary Tree

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example
Example 1:

Input: tree = {}
Output: 0
Explanation: The height of empty tree is 0.
Example 2:

Input: tree = {1,2,3,#,#,4,5}
Output: 3	
Explanation: Like this:
   1
  / \                
 2   3                
    / \                
   4   5
it will be serialized {1,2,3,#,#,4,5}
Notice
The answer will not exceed 5000




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// this problem is about Binary tree
// Use two methods: 1. Recursion, 2. Divide Conquer

// 1st method: Recursion(Traversal 的 recursion)
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: An integer
     */
    
    // this max must be 全局变量
    // 因为helper函数需要用到max变量，但我们不能将max变量设定为其的参数（形参）
    // 因为max是int类型，这样就会变成值传递，函数结束后，max的值没有发生改变。（只在函数内部发生改变）
    // 所以我们只能将max声明为全局变量，这样不讲max设为helper的变量，helper也可以用max
    public int max =0;
    
    public int maxDepth(TreeNode root) {
        // write your code here
        
        // eliminate the special case
        if (root == null){
            return 0;
        }
        
        
        // depth = 1, 因为头节点不为0时，从头节点遍历下去，就是root节点深度 + 1（头节点）
        helper(root,1);
        return max;
    }
    
    // 此函数结束后max的value会变吗？（会变）
    // 见笔记（Java基础）
    // 这里千万不能将max设定为helper的参数（形参），这样只有函数内部的max(形参)发生改变。
    public void helper(TreeNode root, int depth){
        
        // 递归终止条件
        if(root == null){
            return;
        }
        
        // max 的位置放在helper之后也可
        max= Math.max(depth,max);
        helper(root.left, depth + 1);
        helper(root.right, depth + 1);
    }
}


//
/*
// 2nd method: Divide(recommend)
public class Solution {
    /*
     * @param root: The root of binary tree.
     * @return: An integer
     */
    
    /* 
    public int maxDepth(TreeNode root) {
        // write your code here
        if (root == null){
            return 0;
        }
        
        // Divide 
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        
        // Conquer
        // +1， because root is counted as 1 depth
        return Math.max(leftDepth),rightDepth) + 1;
    }
}
*/
