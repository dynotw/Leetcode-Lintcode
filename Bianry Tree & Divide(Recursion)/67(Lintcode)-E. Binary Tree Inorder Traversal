67. Binary Tree Inorder Traversal

Given a binary tree, return the inorder traversal of its nodes' values.

Example
Example 1:

Input：{1,2,3}
Output：[2,1,3]
Explanation:
   1
  / \
 2   3
it will be serialized {1,2,3}
Inorder Traversal
Example 2:

Input：{1,#,2,3}
Output：[1,3,2]
Explanation:
1
 \
  2
 /
3
it will be serialized {1,#,2,3}
Inorder Traversal
Challenge
Can you do it without recursion?







/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 // Binary Tree, Traverse(Recursion), Divide
 // recursion method
 // inorder, preorder, postorder都可以用recursion
 /*
 // 1st Traverse(recursion)
 public class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {
    Linkedlist<Integer> result = new Linkedlist<Integer>();
        if(root ==null){
            return result;
        }
        
        helper(root, result);
 
        return result;
    }
    
    // inorder is left-root-right
    // 先对left child 调用 helper（求left.child的inorder），再写入root，再对 right.child 调用helper（求right.child的inorder）
 
    public void helper(TreeNode p, Linkedlist<Integer> result){
    
    //recursion的终止条件
        if (p == null){
            return;
        }
    
        if(p.left!=null){
            helper(p.left,result);
        }
    
        res.add(p.val);
 
        if(p.right!=null){
            helper(p.right,result);
        }
    }
}
*/

/*
// 2nd method: Divide
public class Solution{
    
    public List<Integer> inorderTraversal(TreeNode root){
        
        List<Integer> result = new ArrayList<>();
        
        if (root == null){
            return result;
        }
        
        // Divide
        List<Integer> left = inorderTraversal(root.left);
        List<Integer> right = inorderTraversal(root.right);
        
        // Conquer
        result.addAll(left);
        result.add(root.val);
        result.addAll(right);
        
        return result;
    }
}
*/


// 3rd method: Stack
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Inorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<>();
        ArrayList<Integer> result = new ArrayList<>();
        
        while (root != null) {
            stack.push(root);
            root = root.left;
        }
    
        while (!stack.isEmpty()) {
            TreeNode node = stack.peek();
            result.add(node.val);
            
            if (node.right == null) {
                node = stack.pop();
                while (!stack.isEmpty() && stack.peek().right == node) {
                    node = stack.pop();
                }
            } else {
                node = node.right;
                while (node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }
        }
        return result;
    }
}
