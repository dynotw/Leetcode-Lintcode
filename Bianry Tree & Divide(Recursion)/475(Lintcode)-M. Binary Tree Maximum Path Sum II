475. Binary Tree Maximum Path Sum II

Given a binary tree, find the maximum path sum from root.

The path may end at any node in the tree and contain at least one node in it.

Example
Example 1:

Input: {1,2,3}
Output: 4
Explanation:
    1
   / \
  2   3
1+3=4
Example 2:

Input: {1,-1,-1}
Output: 1
Explanation:
    1
   / \
  -1 -1



/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// Binary Tree, Divide
// Maxinmum Path Sum 系列有三种问题：1. root到leaf；2.root到anynode；3.anynode到anynode
// This problem is root 到 anyone
// 94 是anynode to anynode
public class Solution {
    /**
     * @param root: the root of binary tree.
     * @return: An integer
     */
    public int maxPathSum2(TreeNode root) {
        // write your code here
        
        if (root == null){
            return 0;
        }
        
        //Divide
        int left = maxPathSum2(root.left);
        int right = maxPathSum2(root.right);
        
        
        // root到anynode，所以我们无需一定向下遍历。如果子节点的val<0,我们就停止遍历。
        // 所以我们将左右字数的最大值与0作对比
        // 最后再加上root的value
        return Math.max(0, Math.max(left,right))+root.val;
        
        // 如果是root到leaf，则无需与0作对比。因为我们无论如何都要遍历到底
        // return Math.max(left,right)+root.val;
    }
}
