628. Maximum Subtree

Given a binary tree, find the subtree with maximum sum. Return the root of the subtree.

Example
Example 1:

Input:
{1,-5,2,0,3,-4,-5}
Output:3
Explanation:
The tree is look like this:
     1
   /   \
 -5     2
 / \   /  \
0   3 -4  -5
The sum of subtree 3 (only one node) is the maximum. So we return 3.
Example 2:

Input:
{1}
Output:1
Explanation:
The tree is look like this:
   1
There is one and only one subtree in the tree. So we return 1.
Notice
LintCode will print the subtree which root is your return node.
It's guaranteed that there is only one subtree with maximum sum and the given binary tree is not an empty tree.




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


// Binary Tree, Divide, Construct a Struct
class ResultType{
    int sum;
    int maxSum;
    TreeNode maxSumSubtree;
    
    // Construct Function
    ResultType(int sum, int maxSum, TreeNode maxSumSubtree){
        this.sum = sum;
        this.maxSum = maxSum;
        this.maxSumSubtree = maxSumSubtree;
    }
}

// Divide & Conquer in Binary Tree, Construct a Struct
class ResultType{
    int sum;
    int maxSum;
    TreeNode maxSumSubtree;
    
    ResultType(TreeNode maxSumSubtree, int sum, int maxSum){
        this.sum = sum;
        this.maxSum = maxSum;
        this.maxSumSubtree = maxSumSubtree;
    }
}

// 1st own method
public class Solution{
    public TreeNode findSubtree(TreeNode root){
        if (root == null){
            return null;
        }
        
        ResultType result = helper(root);
        
        return result.maxSumSubtree;
    }
    
    private ResultType helper(TreeNode root){

        // this time over codition, I think we should return this kind of ResultType. 
        // 2nd method return (null, 0, 0) can't be right, if all node.val in the binary tree are negative
        // because we have to ensure leaf will return itself (root, root.val, root.val)
        if (root == null){
            return new ResultType(null, 0, Integer.MIN_VALUE);
        }
        
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        int pathMax = Math.max(left.maxSum, right.maxSum);
        int allSum = left.sum + right.sum + root.val;
        int max = Math.max(pathMax, allSum);
      
        if (max == left.maxSum){
            return new ResultType(left.maxSumSubtree, allSum, left.maxSum);
        }
        
        else if (max == right.maxSum){
            return new ResultType(right.maxSumSubtree, allSum, right.maxSum);
        }
        
        else{
            return new ResultType(root, allSum, allSum);
        }
    }
}


// 2nd method, 对if (root == null)时的return，保留质疑
其他部分与1st method 思路一样
public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the maximum weight node
     */
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        if (root == null){
            return null;
        }
        
        ResultType result = helper(root);
        
        return result.maxSumSubtree;
    }
    
    
    public ResultType helper(TreeNode root){
        if (root == null){
            return new ResultType(0, 0, null);
        }
        
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
// Conquer,这里较为特殊，因为需要new一个result（相当于root）
//一般需要比较root，root.left 和 root.right的时候，就会new一个root出来，毕竟自己在得到left和right后，我们没有得到root。
//因此我们需要自己new 一个初始化root出来进行比较       
        // 先假设maxSumSubtree就是root引导的Subtree
        ResultType result = new ResultType(
            left.sum + right.sum + root.val,
            left.sum + right.sum + root.val,
            root
        );
        
        // In this part, '>' and '>=' are both okay 
        if (left.maxSum >= result.maxSum){
            result.maxSum = left.maxSum;
            result.maxSumSubtree = left.maxSumSubtree;
        }
        
        if (right.maxSum >= result.maxSum){
            result.maxSum = right.maxSum;
            result.maxSumSubtree = right.maxSumSubtree;
        }
        
        return result;
    }
}

/*
思路
分治法。
我们用一个全局的maxNode来存当前拥有最大subtree sum的节点。用maxWeight来存当前最大的subtree sum的值。
以当前节点为root的subtree sum，就是当前root.val加上左儿子的subtree sum和右儿子的subtree sum。这样我们把这个活儿外包给两个小弟去做，一个找root.left的，一个找root.right的。
找完以后，我们要和两个全局变量比一比，如果发现现在的subtree sum更大了，那么我们要更新maxNode和maxWeight。
完事以后，maxNode就是指向最大subtree sum的节点。
*/
// jiuzhang's answer
public class Solution {
    /**
     * @param root the root of binary tree
     * @return the maximum weight node
     */
    private TreeNode maxNode = null;
    private int maxWeight = Integer.MIN_VALUE;
    
    public TreeNode findSubtree(TreeNode root) {
        // Write your code here
        int root_weight = helper(root);
        return maxNode;
    }
    
    public int helper(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        int leftWeight = helper(root.left);
        int rightWeight = helper(root.right);
        
        if (root.val + leftWeight + rightWeight > maxWeight) {
            maxNode = root;
            maxWeight = root.val + leftWeight + rightWeight;
        }
        
        return root.val + leftWeight + rightWeight;
    }
}
