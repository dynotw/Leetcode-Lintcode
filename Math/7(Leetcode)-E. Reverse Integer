Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0




#time: O(logn); Space: O(1)
class Solution:
    def reverse(self, x: int) -> int:
        result = 0
        # x = 0
        if(x == 0):
            return x
        
        # x > 0
        elif(x > 0):            
            while(x > 0):
                result *= 10
                temp = x % 10
                result += temp
                x = x // 10
            if(result > 2**31 - 1):
                return 0
            
            return result
        
        # x < 0
        else:
            x *= -1
            while(x > 0):
                result *= 10
                temp = x % 10
                result += temp
                x = x // 10
            if (-result < - 2**31):
                return 0
            return -result
        
