On an infinite plane, a robot initially stands at (0, 0) and faces north.  The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degress to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

 

Example 1:
Input: "GGLLGG"
Output: true
Explanation: 
The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).
When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.

Example 2:
Input: "GG"
Output: false
Explanation: 
The robot moves north indefinitely.

Example 3:
Input: "GL"
Output: true
Explanation: 
The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...
 

Note:
1 <= instructions.length <= 100
instructions[i] is in {'G', 'L', 'R'}





# This problem, we can't stimulate the moving proccess until robot goes back to origin, because if it can't come back, it will be a infinite loop 
# This is an interesting question, involved in mathematics

# Time complexity: O(n); Space Complexity: O(1)
class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        # direction list follows clockwise: north(0), west(1), south(2), east(3)
        direction = [[1,0],[0,-1],[-1,0],[0,1]]
        position = [0,0]
        move_direction = 0
        
        for i in instructions:
            if(i == 'G'):
                position = [position[0] + direction[move_direction][0], position[1] + direction[move_direction][1]]           
            elif (i == "L"):
                move_direction = abs((move_direction + 1) % 4)
            else:
                move_direction = abs((move_direction - 1) % 4)
        
        # There're two judgement: 1. back to origin; 2. the direction isn't north
        if(move_direction != 0) or position == [0,0]:
            return True
        else:
            return False
