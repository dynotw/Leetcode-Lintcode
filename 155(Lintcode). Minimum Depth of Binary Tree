155. Minimum Depth of Binary Tree

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Example
Example 1:

Input: {}
Output: 0
Example 2:

Input:  {1,#,2,3}
Output: 3	
Explanation:
	1
	 \ 
	  2
	 /
	3    
it will be serialized {1,#,2,3}
Example 3:

Input:  {1,2,3,#,#,4,5}
Output: 2	
Explanation: 
      1
     / \ 
    2   3
       / \
      4   5  
it will be serialized {1,2,3,#,#,4,5}






/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


// Binary Tree, use Divide Conquer
public class Solution {
    /**
     * @param root: The root of binary tree
     * @return: An integer
     */
    public int minDepth(TreeNode root) {
        // write your code here
        
        // eliminate special case或者是divide的递归终止条件
        if (root==null){
            return 0;
        }
        
        // Divide
        // 左子树深度
        int leftDepth = minDepth(root.left);
        // 右子树深度
        int rightDepth = minDepth(root.right);
        
        
        // this part is different from 97(Lintcode). Maximum Depth of Binary Tree
        // because {1,#,2,3} should return 3 rather than 1
        if (leftDepth == 0){
            return rightDepth + 1;
        }
        
        else if (rightDepth == 0){
            return leftDepth + 1;
        }
        
        return Math.min(leftDepth,rightDepth) + 1;
    }
}
