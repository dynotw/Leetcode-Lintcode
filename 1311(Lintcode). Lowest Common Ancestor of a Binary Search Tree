1311. Lowest Common Ancestor of a Binary Search Tree
中文English
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given binary search tree: root = {6,2,8,0,4,7,9,#,#,3,5}

Example
Example 1:

Input: 
{6,2,8,0,4,7,9,#,#,3,5}
2
8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:

Input: 
{6,2,8,0,4,7,9,#,#,3,5}
2
4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Notice
All of the nodes' values will be unique.
p and q are different and both values will exist in the BST.






/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


// Binary Tree, Divide
public class Solution {
    /**
     * @param root: root of the tree
     * @param p: the node p
     * @param q: the node q
     * @return: find the LCA of p and q
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // write your code here
        
        
        // 递归结束条件和排除特殊情况
        if (root == null){
            return null;
        }
        
        if (p == root || q == root){
            return root;
        }
        
        
        // Divide
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p,q);
        
        /* three case, 1.LCA在left(p,q都在left);
                       2.LCA在right(p,q都在right);
                       3.LCA在root(p,q不在同一边)
            分别对应: 1.left return LCA, right return null; 
                      2.left return null, right return LCA; 
                      3.left and right 最深层分别return p或q,然后逐层return各自的root 
        */
        
        
        // Conquer
        if (left != null && right != null){
            return root;
        }
        
        else if (left != null){
            return left;
        } 
        
        else if (right != null){
            return right;
        }
        
        return null;
    }
}
