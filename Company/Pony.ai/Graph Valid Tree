Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

Example 1:

Input: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]
Output: true
Example 2:

Input: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]
Output: false



# time complexity: O(n); Space complexity: O(n)
class Union_Find(object):
    def __init__(self, n):
        # 这样的做法就是parent和rank的index就表示对象本身。例：数字1在parent和rank中的index就是1
        # 因为parent[0] and rank[0]实际上是无意义点，因为没有数字0加入到graph中
        self.parent = [i for i in range(n+1)]
        self.rank = [1] * (n+1)
        self.num = n
    
    # 第一次使用find method,(compress-find), so the following find method is O(1)
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    # 第一次使用union method is O(n), and the following union method is O(1)
    # 如果两者已经union了，返回false； 反之返回true
    def union(self, x, y):
        xRoot, yRoot = self.find(x), self.find(y)
        
        # x and y are already in the same union
        if xRoot == yRoot:
            return False
        
        if self.rank[xRoot] < self.rank[yRoot]:
            self.parent[xRoot] = yRoot
            self.rank[yRoot] += self.rank[xRoot]
            
        elif self.rank[xRoot] > self.rank[yRoot]:
            self.parent[yRoot] = xRoot
            self.rank[xRoot] += self.rank[yRoot]
            
        else:
            self.parent[yRoot] = xRoot
            self.rank[xRoot] += self.rank[yRoot]
        
        self.num -= 1
        return True
        
        
class Solution:
    def validTree(self, n: int, edges: List[List[int]]) -> bool:
        disjoint = Union_Find(n)
        for edge in edges:
            # check whether there's a circle
            if not disjoint.union(edge[0], edge[1]):
                return False
        
        # check whether it's only one union
        return (disjoint.num == 1)
        
