You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.


Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []




# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# time complexity: O(nlogk): k is the number of linked lists, N nodes in the final linked list.
# space complexity: O(k) + O(n)
import heapq
# here's ListNode rather than integer
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return None
        heap = list()
        index = 0
        dummy = ListNode(0)
        head = dummy
        
        for nodes in lists:
            if (nodes != None):
                heapq.heappush(heap, (nodes.val, index, nodes))
                # heapd 无法排序相同的数，加一个index；，多一个第二的排序标准
                index += 1
        
        while heap:
            head.next = heapq.heappop(heap)[2]
            head = head.next
            if(head.next is not None):
                heapq.heappush(heap, (head.next.val, index, head.next))
                index += 1
        
        return dummy.next
        
