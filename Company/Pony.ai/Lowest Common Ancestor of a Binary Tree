Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).”


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1



# time complexity: O(n); space complexity: O(1)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        result = self.helper(root, p, q)        
        return result
           
    def helper(self, root, p, q):
        # exit of recursion
        if(root == None):
            return None
        if(root ==p or root == q):
            return root
        
        # Divide
        left = self.helper(root.left , p, q)
        right = self.helper(root.right, p, q)
        
        # Conquer
        if(left == None and right == None):
            return None
        elif(left != None and right != None):
            return root
        elif(left != None and right == None):
            return left
        else:
            return right
