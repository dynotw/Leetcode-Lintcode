Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:
Input: [1,3,5]
Output: 1

Example 2:
Input: [2,2,2,0,1]
Output: 0


# 特性:跟153相比，可能会有多个rotate点
# binary search: time complexity: O(logn); space complexity: O(1)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        # eliminate corner condition
        if(len(nums) == 1):
            return nums[0]
        
        # binary search
        left = 0
        right = len(nums)-1
        
        while(left + 1 < right):
            mid = left + (right-left)//2
            
            if(nums[mid] < nums[right]):
                right = mid
            elif(nums[mid] > nums[right]):
                left = mid+1
            else:
                right -= 1
        
        return min(nums[left], nums[right])
