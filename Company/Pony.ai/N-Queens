The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:
Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.



# dfs time complexity: O(n!); space complexity: O(n)
class Solution: 
    def solveNQueens(self, n: int) -> List[List[str]]:
        result = list()
        subnet = list()
        visited = list()
        
        self.dfs(result, subnet, visited, n)
        allSolution = list()
        for chess in result:
            allSolution.append(self.drawChess(n, chess))
        return allSolution
        
    def dfs(self, result, subnet, visited, n):
        if(len(subnet) == n):
            if(subnet not in visited):
                result.append(subnet[:])
                visited.append(subnet[:])
        
        for i in range(n):
            if(not self.isValid(subnet, i)):
                continue
            subnet.append(i)
            self.dfs(result, subnet, visited, n)
            subnet.pop()
        
        return
    
    # whether queeens will meet another queen 
    def isValid(self, subnet, column_index):
        row_num = len(subnet)
        for i in range(row_num):
            # same column
            if(subnet[i] == column_index):
                return False
            # 右斜线
            if (i + subnet[i] == row_num + column_index):
                return False
            # 左斜线
            if (i - subnet[i] == row_num - column_index):
                return False
        return True
    
    def drawChess(self, n, subnet):
        result = list()
        for i in range(n):
            temp = ""
            for j in range(n):
                if (j == subnet[i]):
                    temp += 'Q'
                else:
                    temp += '.'
            result.append(temp)
        return result
        
