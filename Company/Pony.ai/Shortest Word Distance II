Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 and word2 and return the shortest distance between these two words in the list. Your method will be called repeatedly many times with different parameters. 

Example:
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Input: word1 = “coding”, word2 = “practice”
Output: 3

Input: word1 = "makes", word2 = "coding"
Output: 1



# timecomplexity： O(n); space complexity: O(n)
from collections import defaultdict
class WordDistance:

    def __init__(self, words):
        self.indexs = defaultdict(list)
        
        for index, word in enumerate(words):
            self.indexs[word].append(index)

    def shortest(self, word1, word2):
        index_list_1, index_list_2 = self.indexs[word1], self.indexs[word2]
        index_1, index_2 = 0, 0
        distance = sys.maxsize

        # Until the shorter of the two lists is processed
        while (index_1 < len(index_list_1) and index_2 < len(index_list_2)):
            distance = min(distance, abs(index_list_1[index_1] - index_list_2[index_2]))
            if index_list_1[index_1] < index_list_2[index_2]:
                index_1 += 1
            else:
                index_2 += 1
                
        return distance
