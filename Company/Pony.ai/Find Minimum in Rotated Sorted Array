Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Return the minimum element of this array.

Example 1:
Input: nums = [3,4,5,1,2]
Output: 1

Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0

Example 3:
Input: nums = [1]
Output: 1




# 特性，如果rotated了，左序列的最小值大于右序列的最大值
# binary search: time complexity: O(logn); space complexity: O(1)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        # eliminate corner condition
        if(len(nums) == 1):
            return nums[0]
        
        # binary search
        left = 0
        right = len(nums)-1
        
        # 根本没有rotate
        if(nums[right] > nums[left]):
            return nums[left]
        
        while(left + 1 < right):
            mid = left + (right-left)//2
            print(nums[mid])
            if(nums[mid] >=  nums[mid+1]):
                return nums[mid+1]
            if(nums[mid] > nums[left]):
                left = mid
            else:
                right = mid
        
        return min(nums[left], nums[right])
