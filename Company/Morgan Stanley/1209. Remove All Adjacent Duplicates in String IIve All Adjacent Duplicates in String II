1209. Remove All Adjacent Duplicates in String II
Medium

You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, 
causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 
Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"


# use stack, so we can know the last char. BTW, we need to use two stack
# stack_1 is to store char; stack_2 is to store duplicate times
# stack_2 is for condition that second and later delete, because we need to store duplicate times when we append char to stack_1
# In order to understancd stack_2, we can remove num list in the following code

# time complexity: O(n); space complexity: O(n)
class Solution:
    def removeDuplicates(self, s: str, k: int) -> str:
        stack = list()
        num = list()
        count = 1
        
        for i in s:
            if stack:
                last = stack[-1]
                stack.append(i)
                
                if last == i:
                    count = num[-1] + 1
                    num.append(count)
                    
                    if count == k:
                        stack = stack[:len(stack) -k]
                        num = num[:len(num)-k]
                        
                else:
                    count = 1
                    num.append(count)
                
            else:
                stack.append(i)
                num.append(count)
        
        return ''.join(stack)
                
    def removeDuplicates_1(self, s: str, k: int) -> str:
        stack = []
        counter_stack = []
        for val in s:
            if not stack or stack[-1]!=val:
                stack.append(val)
                counter_stack.append(1)
            elif stack[-1]==val:
                counter_stack[-1]+=1
            if counter_stack[-1]==k:
                counter_stack.pop()
                stack.pop()
        return ''.join([stack[i]*counter_stack[i] for i in range(len(stack))])        
