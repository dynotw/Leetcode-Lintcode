200. Number of Islands
Medium

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

 

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3




# time complexity: O(mn); space complexity: O(mn)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        num = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if(grid[i][j] == "1"):
                    self.bfs(grid, [i, j])
                    num += 1
        return num
        
    def bfs(self, grid, position):
        
        xIndirection = [-1, 0, 0 ,1]
        yIndirection = [0, 1, -1 ,0]
        
        queue = list()
        queue.append(position)
        
        while(queue):
            current = queue.pop(0)
            for i in range(4):
                next = [current[0] + xIndirection[i] , current[1] + yIndirection[i]]
                if(self.isValid(grid, next)):
                    queue.append(next)
                    grid[next[0]][next[1]] = "0"
    
    def isValid(self, grid, position):
        height = len(grid)
        width = len(grid[0])
        
        if(position[0] >= 0 and position[0] < height and position[1] >= 0 and position[1] < width):
            if(grid[position[0]][position[1]] == "1"):
                return True
        
        else:
            return False
