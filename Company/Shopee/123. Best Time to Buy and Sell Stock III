123. Best Time to Buy and Sell Stock III
Hard

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.

Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Example 4:
Input: prices = [1]
Output: 0




# You must sell the stock before you buy again, 相当于手上有stock时，就不能买
# This method uses state machine， state machine的状态转移就相当于dp的状态转移方程
# Time complexity: O(n); Space Complexity: O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:

# 		dp_2_hold: max profit with 2 transactions, and in hold state (one transaction not sell)
# 		dp_2_not_hold: max profit with 2 transactions, and not in hold state (all transaction sell)
    
# 		dp_1_hold: max profit with 1 transaction, and in hold state
# 		dp_1_not_hold: max profit with 1 transaction, and not in hold state
		
# 		Note: it is impossible to have stock in hand and sell on first day, therefore -infinity is set as initial profit value for hold state
        
        dp_2_hold, dp_2_not_hold = float('-inf'), 0
        dp_1_hold, dp_1_not_hold = float('-inf'), 0
        
        # Buy: not_hold -> hold  --- balance -= stock_price
        # Sell hold -> not hold  --- balance += stock_price
        for stock_price in prices:
            dp_2_not_hold = max(dp_2_not_hold, dp_2_hold + stock_price)
            dp_2_hold = max(dp_2_hold, dp_1_not_hold - stock_price)
            dp_1_not_hold = max(dp_1_not_hold, dp_1_hold + stock_price)
            dp_1_hold = max(dp_1_hold, 0 - stock_price)
            
        return dp_2_not_hold
        
        

