939. Minimum Area Rectangle
Medium

Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.
If there isn't any rectangle, return 0.

 

Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2



# Time Complexity: O(n^2); Space Complexity: O(n)
# If get maximum, use max() instead of min()
class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        points.sort()
        points_set = set([tuple(point) for point in points])
        smallest = float('inf')
        for i, (x1, y1) in enumerate(points):
            for j, (x2, y2) in enumerate(points[i:]):
                if x1 < x2 and y1 < y2 and (x1, y2) in points_set and (x2, y1) in points_set:
                    area = (x2 - x1) * (y2 - y1)
                    smallest = min(smallest, area)
        if smallest != float('inf'):
            return smallest
        else:
            return 0
            
            
            
