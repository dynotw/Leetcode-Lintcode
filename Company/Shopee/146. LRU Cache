146. LRU Cache
Medium

Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. 
If the number of keys exceeds the capacity from this operation, evict the least recently used key.
Follow up:
Could you do get and put in O(1) time complexity?

 

Example 1:
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4



# use OrdereDict in python
# If interviewer request to implement LRU without exsited data structure, See method 2
# we also can use doublelinkedlist in Java(must, Java don't have OrderedDict) and Python(optional)
'''
Time complexity: O(1) both for put and get since all operations with ordered dictionary : 
        get/in/set/move_to_end/popitem (get/containsKey/put/remove) are done in a constant time.

Space complexity: O(capacity) since the space is used only for an ordered dictionary with at most capacity + 1 elements.
'''

import collections
class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.order = collections.OrderedDict()

    def get(self, key: int) -> int:
        if (key not in self.order.keys()):
            return -1
        else:
            self.order.move_to_end(key)
            return self.order[key]

    def put(self, key: int, value: int) -> None:
        if key in self.order.keys():
            self.order.move_to_end(key)
        
        self.order[key] = value
        
        if(len(self.order) > self.capacity):
            self.order.popitem(last = False)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
