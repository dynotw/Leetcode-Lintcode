622. Design Circular Queue
Medium

Design your implementation of the circular queue. The circular queue is a linear data structure 
in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. 
It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. 
In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, 
we can use the space to store new values.



class MyCircularQueue:
    def __init__(self, k: int):
        # data array is to store 
        self.data = [0] * k
        self.maxSize = k
        self.head = 0
        self.tail = -1
    def enQueue(self, val: int) -> bool:
        # Circular Queue is already full
        if self.isFull(): 
            return False
        # Because queue is FIFO, we insert at tail
        self.tail = (self.tail + 1) % self.maxSize
        self.data[self.tail] = val
        return True
    def deQueue(self) -> bool:
        if self.isEmpty(): return False
        if self.head == self.tail: 
            self.head, self.tail = 0, -1
        else: 
            self.head = (self.head + 1) % self.maxSize
        return True
    
    def Front(self) -> int:
        if self.isEmpty():
            return -1
        else:
            return self.data[self.head]
            
    def Rear(self) -> int:
        if self.isEmpty():
            return -1
        else:
            return self.data[self.tail]

    def isEmpty(self) -> bool:
        return self.tail == -1
    
    def isFull(self) -> bool:
        return not self.isEmpty() and (self.tail + 1) % self.maxSize == self.head
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
