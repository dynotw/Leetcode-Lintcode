516. Longest Palindromic Subsequence
Medium

Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:
Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".



# Use DP
# Time complexity: O(n^2); Space Compelxity: O(n^2)
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        # eliminate corner case:
        if s == s[::-1]:
            return len(s)
        dp = [[0] * len(s) for _ in range(len(s))]
        
        # k is length of subsequence
        for k in range(len(s)):
            # i is index of mostleft
            # j is index of mostright
            for i in range(len(s) - k):
                j = k + i           
                # subsequence is just a char
                if i == j:
                    dp[i][j] = 1
                # subsequence is two chars, and they're same. Like aa, bb
                elif i + 1 == j and s[i] == s[j]:
                    dp[i][j] = 2
                elif s[i] == s[j]:
                    dp[i][j] = dp[i+1][j-1] + 2
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        return dp[0][-1]
        
        
        
        
