144. Binary Tree Preorder Traversal
Easy

Given the root of a binary tree, return the preorder traversal of its nodes' values.

 
Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Example 5:
Input: root = [1,null,2]
Output: [1,2]




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # Iteration use stack
    def preorderTraversal_1(self, root: TreeNode) -> List[int]:
        result = list()
        # eliminate corner condition
        if root == None:
            return result

        stack = list()
        stack.append(root)

        while(len(stack) > 0):
            current = stack.pop()
            result.append(current.val)
            
            # pre-order go leftnode then rightnode. append rightnode firstly, since stack is LIFO
            if current.right != None:
                stack.append(current.right)
            if current.left != None:
                stack.append(current.left)

        return result
    
    # Use recursion
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        result = list()
        # exit of recursion
        if root == None:
            return result
        
        # divide
        left = self.preorderTraversal(root.left)
        right = self.preorderTraversal(root.right)
        
        # Conquer
        result.append(root.val)
        result.extend(left)
        result.extend(right)
        
        return result
        
        
        
        
