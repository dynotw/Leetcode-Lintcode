39. Combination Sum
Medium

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. 
You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Example 4:
Input: candidates = [1], target = 1
Output: [[1]]

Example 5:
Input: candidates = [1], target = 2
Output: [[1,1]]
 
 
 
class Solution:
    # each element can be used many times
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = list()
        # eliminate corner condition
        if(candidates == None or len(candidates) == 0):
            return result
        
        combination = list()
        visited = list()
        # self.dfs(candidates, target, result, subnet, 0, visited, 0)
        self.dfs1(candidates, result, visited, combination, 0, target, 0)
        return result
    
    
    def dfs1(self, candidates, result, visit, combination, currentSum, targetSum, startIndex):
        # exit of recursion
        if currentSum > targetSum:
            return
        
        if currentSum == targetSum:
            if combination not in visit:
                result.append(combination[:])
                visit.append(combination[:])            
            return
        
        # recursion
        for index in range(startIndex, len(candidates)):
            combination.append(candidates[index])
            currentSum += candidates[index]
            
            self.dfs1(candidates, result, visit, combination, currentSum, targetSum, index)
            
            # backtracking
            currentSum -= combination[-1]
            combination.pop()
        
        return 
            
