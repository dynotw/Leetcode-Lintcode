LRUCache Count Miss

https://jincheng8841.gitbooks.io/leetcode-note/content/lrucache_count_miss.html


# Method 1
class Solution {
  public:
    int countMiss(vector<int> input, int size) {
      unordered_map<int, int> map;
      priority_queue<pair<int, int> > minHeap;
      int n = input.size();
      int count = 0;
      for ( int i = 0; i < n; i++ ) {
        if ( map.find(input[i]) == map.end() and map.size() < size ) {
          // case of count
          map[input[i]] = i;
          minHeap.push(pair<int, int>(-i, input[i]));
          count += 1;
          continue;
        }
        if ( map.find(input[i]) != map.end() ) {
          // case of hit
          map[input[i]] = i; // will update in heap in later manipulation;
          continue;
        }
        while ( true ) {
          int j = -minHeap.top().first, val = minHeap.top().second;
          minHeap.pop();
          if ( map[val] != j ) minHeap.push(pair<int, int>(-map[val], val));
          else {
            map.erase(map.find(val));
            break;
          }
        }
        map[input[i]] = i;
        minHeap.push(pair<int, int>(-i, input[i]));
        count += 1;
      }
      return count;
    }
};

int main() {
  Solution sol;
  int arr[7] = {1,2,3,4,5,4,1};
  vector<int> input(arr, arr + sizeof(arr)/sizeof(arr[0]));
  int size = 5;
  int res = sol.countMiss(input, size);
  cout << res << endl;
  return 0;
}
