LRUCache Count Miss

https://jincheng8841.gitbooks.io/leetcode-note/content/lrucache_count_miss.html


# Method 1
class Solution {
  public:
    int countMiss(vector<int> input, int size) {
      unordered_map<int, int> map;
      priority_queue<pair<int, int> > minHeap;
      int n = input.size();
      int count = 0;
      for ( int i = 0; i < n; i++ ) {
        if ( map.find(input[i]) == map.end() and map.size() < size ) {
          // case of count
          map[input[i]] = i;
          minHeap.push(pair<int, int>(-i, input[i]));
          count += 1;
          continue;
        }
        if ( map.find(input[i]) != map.end() ) {
          // case of hit
          map[input[i]] = i; // will update in heap in later manipulation;
          continue;
        }
        while ( true ) {
          int j = -minHeap.top().first, val = minHeap.top().second;
          minHeap.pop();
          if ( map[val] != j ) minHeap.push(pair<int, int>(-map[val], val));
          else {
            map.erase(map.find(val));
            break;
          }
        }
        map[input[i]] = i;
        minHeap.push(pair<int, int>(-i, input[i]));
        count += 1;
      }
      return count;
    }
};

int main() {
  Solution sol;
  int arr[7] = {1,2,3,4,5,4,1};
  vector<int> input(arr, arr + sizeof(arr)/sizeof(arr[0]));
  int size = 5;
  int res = sol.countMiss(input, size);
  cout << res << endl;
  return 0;
}



# Method 2
from typing import List
def lru_cache_misses(num: int, pages: List[int], max_cache_size: int) -> int:
    # WRITE YOUR BRILLIANT CODE HERE
    class LRUCache:
    return 0
        class DLL:
            def __init__(self, key, val):
                self.key = key
                self.val = val
                self.next = None
                self.prev = None
        def __init__(self, capacity: int):
            self.m = {}
            self.head = self.DLL(0,0)
            self.tail = self.DLL(0,0)
            self.head.next = self.tail
            self.tail.prev = self.head
            self.size = 0
            self.capacity = capacity
        def get(self, key: int) -> int:
            if key in self.m:
                loc = self.m[key]
                loc.prev.next = loc.next
                loc.next.prev = loc.prev
                self.head.next.prev = loc
                loc.next = self.head.next
                self.head.next = loc
                loc.prev = self.head
                return loc.val
            else:
                return -1
        def put(self, key: int, value: int) -> None:
            if key in self.m:
                self.get(key)
                self.m[key].val = value
                return
            self.size += 1
            if self.size > self.capacity:
                lru = self.tail.prev
                del self.m[lru.key]
                self.tail.prev.val = self.tail.val
                self.tail.prev.next = None
                self.tail = self.tail.prev
                self.size -= 1
            new_head = self.DLL(key, value)
            self.head.next.prev = new_head
            new_head.next = self.head.next
            self.head.next = new_head
            new_head.prev = self.head
            self.m[key] = new_head
    cache = LRUCache(max_cache_size)
    misses = 0
    for page in pages:
        if cache.get(page) == -1:
            misses += 1
        cache.put(page, None)
    return misses
