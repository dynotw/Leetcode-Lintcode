Optimal Utilization

https://leetcode.com/discuss/interview-question/373202


# Method 1
    private List<int[]> getPairs(List<int[]> a, List<int[]> b, int target) {
        Collections.sort(a, (i,j) -> i[1] - j[1]);
        Collections.sort(b, (i,j) -> i[1] - j[1]);
        List<int[]> result = new ArrayList<>();
        int max = Integer.MIN_VALUE;
        int m = a.size();
        int n = b.size();
        int i =0;
        int j =n-1;
        while(i<m && j >= 0) {
            int sum = a.get(i)[1] + b.get(j)[1];
            if(sum > target) {
                 --j;
            } else {
                if(max <= sum) {
                    if(max < sum) {
                        max = sum;
                        result.clear();
                    }
                    result.add(new int[]{a.get(i)[0], b.get(j)[0]});
                    int index = j-1;
                    while(index >=0 && b.get(index)[1] == b.get(index+1)[1]) {
                         result.add(new int[]{a.get(i)[0], b.get(index--)[0]});
                    }
                }
                ++i;
            }
        }
        return result;
    } 
    

# Method 2
class Solution:
    def findPairs(self, a, b, target):
        a.sort(key=lambda x: x[1])
        b.sort(key=lambda x: x[1])
        l, r = 0, len(b) - 1
        ans = []
        curDiff = float('inf')
        while l < len(a) and r >= 0:
            id1, i = a[l]
            id2, j = b[r]
            if (target - i - j == curDiff):
                ans.append([id1, id2])
            elif (i + j <= target and target - i - j < curDiff):
                ans.clear()
                ans.append([id1, id2])
                curDiff = target - i - j
            if (target > i + j):
                l += 1
            else:
                r -= 1
        return ans
