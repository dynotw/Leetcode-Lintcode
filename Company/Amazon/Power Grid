Power Grid

https://leetcode.com/discuss/interview-question/797541/Amazon-Online-Assessment-2-SDE-1



import java.util.*;

class Pair{
	char from, to;
	int cost;
	Pair(char from, char to, int cost){
		this.from = from;
		this.to = to;
		this.cost = cost;
	}
}

class Node{
	int data;
	Node parent;
	Node(int data){
		this.data = data;
		this.parent = this;
	}
}

class MinimumConnectionCost
{
	public static boolean isValid(int i, int size){
		if(i < 0 || i >= size){
			return false;
		}
		return true;
	}
		
	public static void heapify(ArrayList<Pair> heap, int i){
		if(i >= heap.size()){
			return ;
		}
		int lChild = 2 * i + 1;
		int rChild = 2* i + 2;
		if(isValid(lChild, heap.size()) && isValid(rChild, heap.size())){
			if(heap.get(lChild).cost <= heap.get(rChild).cost){
				if(heap.get(lChild).cost < heap.get(i).cost){
					Pair temp = heap.get(lChild);
					heap.set(lChild, heap.get(i));
					heap.set(i, temp);
					heapify(heap, lChild);
				}
			}
			else{
				if(heap.get(rChild).cost < heap.get(i).cost){
					Pair temp = heap.get(rChild);
					heap.set(rChild, heap.get(i));
					heap.set(i, temp);
					heapify(heap, rChild);
				}
			}
		}
		else if(isValid(lChild, heap.size())){
			if(heap.get(lChild).cost < heap.get(i).cost){
				Pair temp = heap.get(lChild);
				heap.set(lChild, heap.get(i));
				heap.set(i, temp);
				heapify(heap, lChild);
			}
		}
		else if(isValid(rChild, heap.size())){
			if(heap.get(rChild).cost < heap.get(i).cost){
				Pair temp = heap.get(rChild);
				heap.set(rChild, heap.get(i));
				heap.set(i, temp);
				heapify(heap, rChild);
			}
		}
		return ;
	}
	
	public static void formHeap(ArrayList<Pair> heap){
		for(int i=heap.size()/2;i>=0;i--){
			heapify(heap, i);
		}
		return ;
	}
	
	public static Pair extractMin(ArrayList<Pair> heap){
		Pair temp = heap.get(0);
		heap.set(0, heap.get(heap.size() - 1));
		heap.remove(heap.size() - 1);
		heapify(heap, 0);
		return temp;
	}
	
	public static Node findParent(Node node, ArrayList<Node> path){
		if(node.parent == node){
			for(int i=0;i<path.size();i++){
				path.get(i).parent = node;
			}
			return node;
		}
		path.add(node);
		return findParent(node.parent, path);
	}
	
	public static ArrayList<Pair> findMinimumCostToConnectServers(ArrayList<Pair> heap){
		ArrayList<Pair> res = new ArrayList<> ();
		
		formHeap(heap);
		
		Node node[] = new Node[26];
		for(int i=0;i<26;i++){
			node[i] = new Node(i);
		}
		
		while(heap.size() > 0){
			Pair ele = extractMin(heap);
			
			Node parentFrom = findParent(node[ele.from - 'A'], new ArrayList<> ());
			Node parentTo = findParent(node[ele.to - 'A'], new ArrayList<> ());
			
			if(parentFrom != parentTo){
				parentTo.parent = parentFrom;
				res.add(new Pair(ele.from, ele.to, ele.cost));
			}
		}
		return res;
	}
	
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n=sc.nextInt();
		ArrayList<Pair> a = new ArrayList<> ();
		for(int i=0;i<n;i++){
			a.add(new Pair(sc.next().charAt(0), sc.next().charAt(0), sc.nextInt()));
		}
		ArrayList<Pair> ans = findMinimumCostToConnectServers(a);
		for(int i=0;i<ans.size();i++){
			System.out.println(ans.get(i).from+" "+ans.get(i).to+" "+ans.get(i).cost);
		}
	}
}
