Labeling System

https://leetcode.com/discuss/interview-question/1331455/amazon-oa-june-2021-labeling-system-multiprocessor-system


Labeling System
Amazon is looking to develop a new labeling system in the fulfilment centers. New labels will be devised from the original string labels. Given the original string label, 
construct a new string by rearranging the original string and deleting characters as needed. 
Return the alphabetically-largest string that can be constructed respecting the limit as to how many consecutive characters can be the same (represented by k).

"Alphabetically-largest" is defined in reverse alphabetical order (e.g., b is "larger" than a, c is "larger" than b, etc.) from left to right (e.g., "ba" is larger than "ab").

Write an algorithm to return the alphabetically-largest string that can be constructed respecting the
above limits.

Input
The input to the function/method consists of two arguments:
originalLabel, a string representing the original string label;
charLimit, an integer representing the maximum number of identical consecutive characters the new string can have (k).

Output
Return a string representing the alphabetically largest string that can be constructed that has no
more than k identical consecutive characters.



# Method 1
public static String getLargestString(String origin, int k) {
        int[] board = new int[26];
        for(char c : origin.toCharArray()) {
            board[c-'a']++;
        }
        StringBuilder sb = new StringBuilder();
        int index = 25;
        int lastCount = 0;
        while(index >= 0) {
            if(board[index] == 0) {
                index--;
                lastCount = 0;
                continue;
            }
            if(lastCount < k) {
                sb.append((char)('a'+index));
                lastCount++;
                board[index]--;
            } else {
                for(int i=index-1; i>=0; i--) {
                    if(board[i] > 0) {
                        sb.append((char)('a'+i));
                        board[i]--;
                        lastCount = 0;
                        break;
                    }
                }
                if(lastCount != 0) {
                    break;
                }
            }
        }
        return sb.toString();
    }



# Method 2
def relabel(originalLabel: str, charLimit: int) -> str:
    newLabel = ''
    oldLabel = sorted(originalLabel, reverse=True)

    refChar = oldLabel[0]
    numSimChars = 0         # tracks how many times the current letter has been repeated
    q = []                  # a queue that tracks letters that are cut-off when max number of letters is exceeded
    for char in oldLabel:
        # Look out for any change in the letter to restart counting repeated letters
        if char != refChar:
            refChar = char
            numSimChars = 1
        else:
            numSimChars += 1

        # Add letters that exceed the limit to the queue
        if numSimChars > charLimit:
            q.append(char)
            continue

        # Add current letter to the new label
        newLabel += char

        # Add letters from the queue if there are any
        nAddedFromQ = 0
        if q:
            while q and (nAddedFromQ < charLimit):
                newLabel += q.pop(0)
                nAddedFromQ += 1
            numSimChars = 0
    
    return newLabel



# Method 3
private static String combine(String s, int k) {
	StringBuilder sb = new StringBuilder();
	Map<Character, Integer> map = new HashMap<Character, Integer>();
	int n = s.length();
	for (int i = 0; i < n; i++) {
		char c = s.charAt(i);
		map.put(c, map.getOrDefault(c, 0) + 1);
	}

	PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<Map.Entry<Character, Integer>>(
			new Comparator<Map.Entry<Character, Integer>>() {

				@Override
				public int compare(Entry<Character, Integer> o1, Entry<Character, Integer> o2) {
					return o2.getKey() - o1.getKey();
				}
			});
	pq.addAll(map.entrySet());

	Map.Entry<Character, Integer> previous = new AbstractMap.SimpleEntry<Character, Integer>('$', -1);
	while (!pq.isEmpty()) {
		Map.Entry<Character, Integer> current = pq.poll();
		if (current.getValue() > k) {
			sb.append(generateString(current.getKey(), k));
			current.setValue(current.getValue() - k);
		} else {
			sb.append(generateString(current.getKey(), current.getValue()));
			current.setValue(current.getValue() - k);
		}

		if (previous.getValue() > 0) {
			pq.add(previous);
		}
		previous = current;
	}
	return sb.toString();
}
