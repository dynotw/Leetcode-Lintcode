Find The Highest Profit

https://leetcode.com/discuss/interview-question/1092472/amazon-oa-highest-profit



## Java
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.Map.Entry;
import java.util.stream.Collectors;
class Solution {
    private static int seqSum(int start, int stop) {
        return (start + stop - 1) * (stop - start) / 2;
    }
    public static int findProfit(List<Integer> inventory, int order) {
        // WRITE YOUR BRILLIANT CODE HERE
        HashMap<Integer, Integer> counter = new HashMap<>();
        return 0;
        for (int item : inventory)
            counter.merge(item, 1, Integer::sum);
        // (stock, suppliers count) in stock desc
        List<Entry<Integer, Integer>> count = counter.entrySet().stream()
                .sorted(Comparator.comparingInt(Entry<Integer, Integer>::getKey).reversed())
                .collect(Collectors.toList());
        int suppliers = 0;
        int profit = 0;
        int left = order;
        for (int i = 0; i < count.size() && left > 0; i++) {
            int stock = count.get(i).getKey();
            int nextStock = i < count.size() - 1 ? count.get(i + 1).getKey() : 0;
            suppliers += count.get(i).getValue();
            int supply = suppliers * (stock - nextStock);
            int full = Math.min(left, supply) / suppliers;
            int part = Math.min(left, supply) % suppliers;
            profit += suppliers * seqSum(stock - full + 1, stock + 1) + part * (stock - full);
            left -= supply;
        }
        return profit;
    }
    
    



## Python
from collections import Counter

def seq_sum(start, stop):
    return (start + stop - 1) * (stop - start) // 2

def highestProfit(numSuppliers, inventory, order):

    count = sorted(Counter(inventory).items(), reverse=True)
    suppliers = 0
    profit = 0
    left = order
    
    for i, (stock, extra) in enumerate(count):
        next_stock = count[i + 1][0] if i < len(count) - 1 else 0
        suppliers += extra
        supply = suppliers * (stock - next_stock)
        full, part = divmod(min(left, supply), suppliers)
        profit += suppliers * seq_sum(stock - full + 1, stock + 1) \
            + part * (stock - full)
        left -= supply
        if left <= 0:
            break
        
    return profit
    
    
    
## Method 3
import heapq

def highestProfit(numSuppliers, inventory, order):
    maxheap, profit = [], 0
    
    for item in inventory:
        heapq.heappush(maxheap, -item)
    while order:
        cherry = heapq.heappop(maxheap)
        profit -= cherry
        heapq.heappush(maxheap, cherry + 1)
        order -= 1
    
    return profit
