class Solution:
    # each element can be used many times
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = list()
        # eliminate corner condition
        if(candidates == None or len(candidates) == 0):
            return result
        
        subnet = list()
        visited = list()
        self.dfs(candidates, target, result, subnet, 0, visited, 0)
        return result
    
    def dfs(self, candidates, target, result, subnet, allSum, visited, startIndex):
        if (allSum == target):
            if(subnet not in visited):
                result.append(subnet[:])
                visited.append(subnet[:])
                return
        if(allSum > target):
            return
        
        for i in range(startIndex, len(candidates)):
            if(allSum + candidates[i] > target):
                continue
            subnet.append(candidates[i])
            allSum += candidates[i]
            self.dfs(candidates, target, result, subnet, allSum, visited, i)
            last = subnet.pop()
            allSum -= last
        
        return 




// DFS in combination
public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target: An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> subset = new ArrayList<>();
        
        if(candidates == null || candidates.length == 0){
            return result;
        }
        
        // This sort is important, beause 'if statement' in dfs will break, if candidate[i] > reaminTarget.
        // If we don't sort: [8,7,4,3], target = 3, then result = []. Because the first number 7 > 3, break happens, no following recursion.
        Arrays.sort(candidates);
        
        // 防止访问重复点
        Set<ArrayList<Integer>> visited = new HashSet<>();
        
        dfs(candidates, target, 0, subset, result, visited);
        return result;
    }


    private void dfs(int[] candidates, int remianTarget, int startIndex,
                     List<Integer> subset, List<List<Integer>> result,
                     Set<ArrayList<Integer>> visited) {
        if (remianTarget == 0) {
            if (!visited.contains(subset)){
                result.add(new ArrayList<Integer>(subset));
                visited.add(new ArrayList<Integer>(subset));
            }
            return;
        }
        
        for (int i = startIndex; i < candidates.length; i++) {
        // 这个if statement非常重要，如果没有break，code就会Stack Overflow
        // 因为在dfs调用时（相同元素可以repeat unlimited times）如果没有这个break，就真的无限的repeat的下去了，一直调用dfs下去了
         （因为后续永远不满足return 的if statement）
            if (candidates[i] > remianTarget){
                break;
            }
            subset.add(candidates[i]);
            // 注意此处的dfs调用，我的startIndex是从i不是从i+1了
            // i表示candidates[i]可以repeat unlimited times
            // i+1,每个元素只能用一次（是每个元素，不是相同元素）而且得按原有顺序,比较17-subset这道对比即可 
            dfs(candidates, remianTarget - candidates[i], i, subset, result, visited);
            subset.remove(subset.size() - 1);
        }
    }
}
