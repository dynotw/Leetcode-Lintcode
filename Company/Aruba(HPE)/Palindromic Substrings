# Use two pointer (center expansion) to find a consecutive substring with the same char, 
# sum them up and add it to result, then start looking to the left and to the right.
class Solution:
    def countSubstrings(self, s):
        num = 0
        left, right = 0, 0
        while left < len(s):
            while right < len(s) and s[right] == s[left]:
                right += 1
            num += self.sum(right - left)
            
            l, r = left-1, right
            while l >= 0 and r < len(s) and s[r] == s[l]:
                num += 1
                l -= 1
                r += 1
            left = right
            
        return num
    
    # 大palindrome下面有多少个小的palindrome
    def sum(self, n):
        s = 0
        for i in range(1, n + 1):
            s += i
        return s
