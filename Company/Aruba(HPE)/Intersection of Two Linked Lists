# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        nodes_in_B = set()

        while headB is not None:
            nodes_in_B.add(headB)
            headB = headB.next

        while headA is not None:
            # if we find the node pointed to by headA,
            # in our set containing nodes of B, then return the node
            if headA in nodes_in_B:
                return headA
            headA = headA.next

        return None
    
    
    
    def getIntersectionNode_1(self, headA: ListNode, headB: ListNode) -> ListNode:
        # set two pointer
        p_A = headA
        p_B = headB
        
        while(p_A != p_B):
            if not p_A:
                p_A = headB
            else:
                p_A = p_A.next
            
            if not p_B:
                p_B= headA
            else:
                p_B= p_B.next
                
            print("A is" + str(p_A))
            print("B is" + str(p_B))
        return p_A
