# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # Recursion
    def inorderTraversal_1(self, root: TreeNode) -> List[int]:
        result = list()
        
        # exit of recursion
        if root == None:
            return result
        
        # Divide 
        left = self.inorderTraversal(root.left)
        right = self.inorderTraversal(root.right)
        
        # conquer
        result.extend(left)
        result.append(root.val)
        result.extend(right)
        
        return result


题解：首先访问左子树，将左子树存入栈中，每次将栈顶元素存入结果，如果右子树为空，取出栈顶元素，
如果当前元素为栈顶元素右子树，一直弹出至当前元素不为栈顶元素右子树(此处说明访问右子树，根节点已经被访问过，弹出即可)。
如果节点右子树不为空，访问右子树，继续循环遍历左子树，存入栈中
    # Iteration
    def inorderTraversal(self, root):
        stack = list()
        result = list()
        
        while(root != None):
            stack.append(root)
            root = root.left
        
        while(stack):
            node = stack[-1]
            result.append(node.val)
            
            if node.right == None:
                node = stack.pop()
                while(stack and stack[-1].right == node):
                    node = stack.pop()
            
            else:
                node = node.right
                while(node):
                    stack.append(node)
                    node = node.left
                    
        return result
