535. Encode and Decode TinyURL
Medium

Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and 
it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. 
You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:
Solution() Initializes the object of the system.
String encode(String longUrl) Returns a tiny URL for the given longUrl.
String decode(String shortUrl) Returns the original long URL for the given shortUrl.
It is guaranteed that the given shortUrl was encoded by the same object.
 

Example 1:
Input: url = "https://leetcode.com/problems/design-tinyurl"
Output: "https://leetcode.com/problems/design-tinyurl"

Explanation:
Solution obj = new Solution();
string tiny = obj.encode(url); // returns the encoded tiny url.
string ans = obj.decode(tiny); // returns the original url after deconding it.



# This problem there's no unique answer, each one can has his own approach
"""
1. The number of URLs that can be encoded is quite large in this case, nearly of the order (10+26*2)^6.
2. The length of the encoded URLs is fixed to 6 units, which is a significant reduction for very large URLs.
3. The performance of this scheme is quite good, due to a very less probability of repeated same codes generated.
4. We can increase the number of encodings possible as well, by increasing the length of the encoded strings. Thus, there exists a tradeoff between the length of the code and the number of encodings possible.
5. Predicting the encoding isn't possible in this scheme since random numbers are used.
"""
import random 
class Codec:
    def __init__(self):
        self.charset = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        self.urls = dict()
        
    def get_key(self):
        return ''.join(random.choices(self.charset, k = 6))
            
    def encode(self, longUrl: str) -> str:
        """
        Encodes a URL to a shortened URL.
        """
        key = self.get_key() 
        while key in self.urls: # generate a non-existing key
            key = self.get_key()
        
        self.urls[key] = longUrl
        return "http://tinyurl.com/" + key

    def decode(self, shortUrl: str) -> str:
        """
        Decodes a shortened URL to its original URL.
        """
        key = shortUrl[shortUrl.rindex('/')+1:]
        return self.urls[key] if key in self.urls else ''
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))
