706. Design HashMap
Easy

Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:
MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:
Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]




# Follow the HashMap (learnt) in Java
# Bucket(array) + LinkedList(New kind LinkedList Node)
# May require use red-black tree or AVL to replace LinkedList
class Node:
    def __init__(self, key=-1, val=-1, next = None):
        self.key = key
        self.val = val
        self.next = next
        
        
class MyHashMap:
    def __init__(self):
        # size is based on key range
        self.size = 1024
        self.bucket = [Node()] * self.size

    def put(self, key: int, value: int) -> None:
        index = self.get_index(key)
        head = self.bucket[index]
        while(head.next):
            if head.key == key:
                head.val = value
                break    
            head = head.next
            
        # To last Node in LinkedList
        if head.key == key:        
            head.val = value
        else:
            head.next = Node(key, value)

    def get(self, key: int) -> int:
        index = self.get_index(key)
        head = self.bucket[index]
        
        while(head):
            if head.key == key:
                return head.val
            head = head.next
            
        return -1

    def remove(self, key: int) -> None:
        index = self.get_index(key)
        head = self.bucket[index]
        
        while(head.next):
            if head.next.key == key:
                head.next = head.next.next
                break
            head = head.next
    
    # Just calculate the hashkey
    def get_index(self, key):
        index = key % self.size
        return index
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
