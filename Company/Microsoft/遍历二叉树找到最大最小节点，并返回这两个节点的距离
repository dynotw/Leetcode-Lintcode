1。遍历树，找到最大和最小点
2. 找到最大最小点的LCA
3. 分别计算最大最小点到LCA的距离，然后相加

# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# 1. Preorder，stack
    def preorderTraversal_1(self, root: TreeNode) -> List[int]:
        result = list()
        # eliminate corner condition
        if root == None:
            return result

        stack = list()
        stack.append(root)

        while(len(stack) > 0):
            current = stack.pop()
            result.append(current.val)
            
            # pre-order go leftnode then rightnode. append rightnode firstly, since stack is LIFO
            if current.right != None:
                stack.append(current.right)
            if current.left != None:
                stack.append(current.left)

        return result
        
        
# 2. LCA
    def helper(self, root, p, q):
        # exit of recursion
        if(root == None):
            return None
        if(root ==p or root == q):
            return root
        
        # Divide
        left = self.helper(root.left , p, q)
        right = self.helper(root.right, p, q)
        
        # Conquer
        if(left == None and right == None):
            return None
        elif(left != None and right != None):
            return root
        elif(left != None and right == None):
            return left
        else:
            return right
            
# 3. 计算距离 (其实就是计算Height)
        def getHeight(self, node, target):
            if not node:
                return float("inf")
            if node.val == target:
                return 0
            return 1 + min(getHeight(node.left, target), getHeight(node.right, target))
