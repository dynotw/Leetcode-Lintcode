118. Pascal's Triangle (Whole Triangle).  -->  119. Pascal's Triangle II (Only one row)  --> Only one position ([row][col])
Easy

Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
Output: [[1]]


# 118. Pascal's Triangle (Whole Triangle)
# DP，矩形的下半个直角三角
# Time Complexity: O(n^2); Space Complexity: O(1)
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        # Initialze dp
        dp = [[0] * (i+1) for i in range(numRows)] 
        dp[0][0] = 1
        for row in range(numRows):
            for col in range(row+1):
                if col == row or col == 0:
                    dp[row][col] = 1
                
                else:
                    dp[row][col] = dp[row-1][col - 1] + dp[row-1][col]
                
        return dp
        
 
 
 # 119. Pascal's Triangle II (Only one row)
 class Solution:
    # 记录所有row， 然后return 目标row
    # Time Complexity: O(n^2); Space Compelxity: O(n^2)
    def getRow_1(self, rowIndex: int) -> List[int]:        
        res = list()
        # rowIndex should be reachable, so range is 0 -- rowIndex+1
        for i in range(rowIndex+1):
            res.append([])
            for j in range(i+1):
                if j == 0 or j == i:
                    res[i].append(1)
                else:
                    res[i].append(res[i - 1][j - 1] + res[i - 1][j])
        return res[rowIndex]
    
    # 只有一个row，dp是更新此row，而不是增加新row
    # Time Complexity: O(n^2); Space Complexity: O(n) --> O(n) for result
    def getRow(self, rowIndex: int) -> List[int]:
        res= []
        temp = 0
        for row in range(rowIndex+1):
            for col in range(row+1):
                if col == row:
                    res.append(1)
                    temp = 1
                    
                elif col == 0:
                    continue

                else:
                    curr_temp = res[col]
                    res[col] = temp + res[col]
                    temp = curr_temp

        return res
        


# Only for one position
“““
# In mathematics, Pascal's triangle is a triangular array of the binomial coefficients.
# The entry in the nth row and rth column of Pascal's triangle is denoted C（n｜r）
“““

import math
def getPosition(row, col):
  return math.comb(row, col)
