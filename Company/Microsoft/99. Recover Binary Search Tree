99. Recover Binary Search Tree
Medium

You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. 
Recover the tree without changing its structure.


Example 1:
Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

Example 2:
Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# BST inorder traverse is no-decreasing 
class Solution:
    def recoverTree(self, root):
        stack = list()
        result = list()
        swith1 = None
        switch2 = None
        times = 0
        
        while(root != None):
            stack.append(root)
            root = root.left
        
        while(stack):
            node = stack[-1]
            if len(result) > 0:
                if node.val < result[-1].val:
                    if times == 0:
                        switch1 = result[-1]
                        switch2 = node
                    else:
                        switch2 = node
                    times += 1

            result.append(node)
            # print("-------")
            # for i in result:
            #     print(i.val)
            
            if node.right == None:
                node = stack.pop()
                while(stack and stack[-1].right == node):
                    node = stack.pop()
            
            else:
                node = node.right
                while(node):
                    stack.append(node)
                    node = node.left
        
        switch1.val, switch2.val = switch2.val, switch1.val
