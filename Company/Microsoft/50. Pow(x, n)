50. Pow(x, n)

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 
Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25


# Time Complexity: O(logN); Space Complexity: O(logN)
# This is recursion, we can reduce Space Compelxity from O(logN) to O(1), if we use iteration. (See below)
class Solution:
    # Brute-Force will be time exceeded
    # Use recursion (Divide & Conquer)
    def myPow(self, x: float, n: int) -> float:
        # exit of recursion
        if n == 0:
            return 1
        if n == 1:
            return x
        if n == -1:
            return 1/x
        
        # whether n is odd or even
        temp1 = self.myPow(x, n//2)
        temp2 = self.myPow(x, n%2)
        
        return temp1* temp1 * temp2


  
# Time Complexity: O(logN); Space Complexity: O(1)
# This is iterative; Space Complexity is O(logN), if we use recursion
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if x == 0 and n < 0:
            return False
        if x == 0 and n == 0:
            return "Undefined"
        
        if n == 0:
            return 1
        elif n == 1:
            return x
        elif n == -1:
            return 1/x
        
        temp_n = abs(n)
        res = 1
        while(temp_n != 0):
            if temp_n % 2 == 1:
                res *= x
            x *= x
            temp_n //= 2
        
        if n < 0:
            return 1/res
        else:
            return res
