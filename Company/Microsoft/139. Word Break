139. Word Break  --> 140. Word Break II 
Medium


Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:
Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:
Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false


# BFS, put the potentiel index in queue
from collections import deque
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        # eliminate corner case
        if s == None or len(s) == 0:
            return True
        
        queue = deque()
        queue.append(0)
        
        visit_index = set()
        visit_index.add(0)
        
        set_wordDict = set(wordDict)
        
        while(queue):
            index = queue.popleft()
            for i in range(index, len(s)):
                if s[index: i+1] in set_wordDict and (i+1) not in visit_index:
                    if i+1 == len(s):
                        return True
                    queue.append(i+1)
                    visit_index.add(i+1)
        
        return False
                    
