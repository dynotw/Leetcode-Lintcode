110. Balanced Binary Tree
Easy


Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 
Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# divide & conquer
'''
class resultType:
    def __init__(self, depth, isBalanced):
        self.depth = depth
        self.isBalanced = isBalanced
        
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        result = self.helper(root)
        return result.isBalanced
    
    def helper(self, root):
        # exit of recursion
        if(root == None):
            return resultType(0, True)
        
        # Divide
        leftResult = self.helper(root.left)
        rightResult = self.helper(root.right)
        
        # Conquer
        if(leftResult.isBalanced == False or rightResult.isBalanced == False):
            return resultType(0, False)
        elif abs(leftResult.depth - rightResult.depth) > 1:
            return resultType(0, False) 
        else:
            return resultType(max(leftResult.depth, rightResult.depth) + 1, True)
'''

# dfs 感觉也是divide & conquer
class Solution:

    def isBalanced(self, root: TreeNode) -> bool:
        return (not self.helper(root) == -1)
    
    # depth == -1 means not balanced
    def helper(self, root):
        if(root == None):
            return 0
        
        # Divide
        left = self.helper(root.left)
        right = self.helper(root.right)
        
        # Conquer
        if(left == -1 or right == -1 or abs(left - right) >1):
            return -1
        
        else:
            return max(left, right) + 1
