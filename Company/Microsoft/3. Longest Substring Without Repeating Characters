3. Longest Substring Without Repeating Characters
Medium


Given a string s, find the length of the longest substring without repeating characters.


Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.




# left and right make up a sliding window
# time: O(n), space: O(n)
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        visited = set()
        left = 0
        right = 0
        result = 0
        
        while(left <= right and right < len(s) and len(s) - left > result):
            if(s[right] not in visited):
                visited.add(s[right])
                result = max(result, right - left + 1)
                right += 1
            
            else:
                visited.remove(s[left])
                left += 1
    
        return result
