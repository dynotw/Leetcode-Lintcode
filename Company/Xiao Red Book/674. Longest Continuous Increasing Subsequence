674. Longest Continuous Increasing Subsequence
Easy

Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). 
The subsequence must be strictly increasing.
A continuous increasing subsequence is defined by two indices l and r (l < r) 
such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

 

Example 1:
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element4.

Example 2:
Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.



# Time complexity: O(n); Space complexity: O(1)
class Solution:
    def findLengthOfLCIS_1(self, nums: List[int]) -> int:
        # eliminate corner condition
        if nums == None or len(nums) == 0:
            return 0
        
        result = 1
        count = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                count += 1
                result = max(result,count)
            
            else:
                count = 1
        
        return result

    # Try to use DP
    # Time complexity: O(n); Space complexity: O(n)
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        # eliminate corner condition
        if nums == None or len(nums) == 0:
            return 0
        
        # initialize
        state = [1] * len(nums)
        
        # 
        for i in range(1, len(state)):
            if nums[i] > nums[i-1]:
                state[i] = state[i-1] + 1
        
        return max(state)
        result = 1
        count = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                count += 1
                result = max(result,count)

            else:
                count = 1

        return result   
