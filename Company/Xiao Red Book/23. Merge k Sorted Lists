23. Merge k Sorted Lists
Hard

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

 
Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# Use PriorityQueue
# len(lists) = k; 总共有n个ListNode
# Time complexity: O(nlogk); Space complexity: O(n)
# heappop & heappush are O(logn)
import heapq
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        pq = list()
        dummy = head = ListNode()
        
        count = 0
        for node in lists:
            # ensure node is no-empty
            if node:
                heapq.heappush(pq, (node.val, count, node))
                count += 1
            
        
        while(len(pq) > 0):
            current_node = heapq.heappop(pq)[2]
            next_node = current_node.next
            if next_node:
                heapq.heappush(pq,(next_node.val, count, next_node))
                count += 1
            
            head.next = current_node
            head = head.next
        
        
        return dummy.next
