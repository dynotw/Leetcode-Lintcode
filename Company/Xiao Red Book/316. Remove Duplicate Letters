316. Remove Duplicate Letters
Medium

Given a string s, remove duplicate letters so that every letter appears once and only once. 
You must make sure your result is the smallest in lexicographical order among all possible results.
 
Example 1:
Input: s = "bcabc"
Output: "abc"

Example 2:
Input: s = "cbacdcbc"
Output: "acdb"



# Time Complexity: O(n); Space Complexity: O(n)
class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        # Notice: It's not only about remove, but also lexicographical order
        stack = []
        visited = set()

        # this will let us know if there are no more instances of s[i] left in s
        last_occurrence = {c: index for index, c in enumerate(s)}
        
        print(last_occurrence)
        for index, c in enumerate(s):
            # we can only try to add c if it's not already in our solution
            # this is to maintain only one of each character
            if c not in visited:
                # if the last letter in our solution:
                #    1. exists (stack isn't empty)
                #    2. is greater than c so removing it will make the string smaller
                #    3. it's not the last occurrence
                # we remove it from the solution to keep the solution optimal
                while stack and c < stack[-1] and index < last_occurrence[stack[-1]]:
                    visited.remove(stack.pop())
                visited.add(c)
                stack.append(c)
                
        return ''.join(stack)
            
