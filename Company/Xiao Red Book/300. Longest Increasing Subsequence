300. Longest Increasing Subsequence
Medium

Given an integer array nums, return the length of the longest strictly increasing subsequence.
A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. 
For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].


Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1



# DP
# Time complexity: O(n^2); Space complexity: O(n)
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        # eliminate corner condition
        if len(nums) == 0 or nums == None:
            return 0
        if len(nums) == 1:
            return 1
        
        # initialize
        dp = [1] * len(nums)
        for i in range(1, len(state)):
            # check dp[i] 应该接哪个dp[j]
            for j in range(i):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[j] + 1, dp[i])
        
        return max(dp)
        
