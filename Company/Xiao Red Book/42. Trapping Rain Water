42. Trapping Rain Water
Hard

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.


Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9


# Use two pointers 
# Time Complexity: O(n); Space Complexity: O(1)

class Solution:
    def trap(self, height: List[int]) -> int:           
        # eliminate corner condition
        if len(height)<= 2:
            return 0
        
        # set two pointers
        left = 0
        right = len(height) - 1
        result = 0
        
        #initialising leftmax to the leftmost bar and rightmax to the rightmost bar
        lmax = height[0]
        rmax = height[-1]
        
        while left <= right:
            # check lmax and rmax for current i, j positions
            if height[left] > lmax:
                lmax = height[left]
            if height[right] > rmax:
                rmax = height[right]
            
            #fill water upto lmax level for index i and move i to the right
            if lmax <= rmax:
                result += lmax - height[left]
                left += 1
				
            #fill water upto rmax level for index j and move j to the left
            else:
                result += rmax - height[right]
                right -= 1
                
        return result
