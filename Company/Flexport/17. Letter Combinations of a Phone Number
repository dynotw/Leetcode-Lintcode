17. Letter Combinations of a Phone Number
Medium

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. 
Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]



# Time complexity: O(4^n * n); Space Complexity: O(n)
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        # Eliminate corner case
        if digits == None or len(digits) == 0:
            return []
        
        letters = {'1': '', '2': 'abc', '3': 'def', '4':'ghi', '5':'jkl', '6':'mno', '7': 'pqrs', '8':'tuv', '9':'wxyz'}
        res = list()
        self.dfs(digits, letters, res, "", 0)
        return res
        
    def dfs(self, digits, letters, res, comb, startIndex):
        if len(comb) == len(digits):
            res.append(comb)
            return
            
        for i in range(startIndex, len(digits)):
            curr = digits[i]
            
            for j in letters[curr]:
                comb += j
                self.dfs(digits, letters, res, comb, i+1)
                comb = comb[:-1]
        
        return
