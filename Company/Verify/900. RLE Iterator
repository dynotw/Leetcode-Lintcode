900. RLE Iterator
Medium


Write an iterator that iterates through a run-length encoded sequence.
The iterator is initialized by RLEIterator(int[] A), where A is a run-length encoding of some sequence. 
More specifically, for all even i, A[i] tells us the number of times that the non-negative integer value A[i+1] is repeated in the sequence.
The iterator supports one function: next(int n), which exhausts the next n elements (n >= 1) and returns the last element exhausted in this way.  
If there is no element left to exhaust, next returns -1 instead.
For example, we start with A = [3,8,0,9,2,5], which is a run-length encoding of the sequence [8,8,8,5,5].  
This is because the sequence can be read as "three eights, zero nines, two fives".

 
Example 1:
Input: ["RLEIterator","next","next","next","next"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
Output: [null,8,8,5,-1]
Explanation: 
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).
This maps to the sequence [8,8,8,5,5].
RLEIterator.next is then called 4 times:

.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].

.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].

.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,
but the second term did not exist.  Since the last term exhausted does not exist, we return -1.





class RLEIterator:
    def __init__(self, A: List[int]):
        self.pointer = 0
        self.sequence = A

    def next(self, n: int) -> int:
        # while loop 的两个条件：1. pointer有效，2.self.pointer所指的char的出现次数比n小
        while(self.pointer < len(self.sequence) and self.sequence[self.pointer] < n):
            n -= self.sequence[self.pointer]
            self.pointer += 2
        
        if self.pointer >= len(self.sequence):
            return -1
        
        # 更新sequence中的char的出现次数，同时返回答案
        self.sequence[self.pointer] -= n
        return self.sequence[self.pointer + 1]
    
    # This method works, but it exceed time 
    '''
    def __init__(self, A: List[int]):
        self.RLE = list()
        i = 0
        while(i < len(A)):
            self.RLE.extend([A[i+1]] * A[i])
            i+=2

    def next(self, n: int) -> int:
        if n > len(self.RLE):
            return -1      
        result = self.RLE[n-1]
        self.RLE = self.RLE[n:]
        return result
    '''


# Your RLEIterator object will be instantiated and called as such:
# obj = RLEIterator(A)
# param_1 = obj.next(n)
