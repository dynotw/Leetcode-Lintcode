46. Permutations
Medium

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]



class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        result = list()
        #
        if(nums == None or len(nums) == 0):
            return result
        
        subnet = list()
        visited = list()
        visited1 = [False] * len(nums)
        self.dfs(nums, result, subnet, visited, visited1)
        return result
        
        
    def dfs(self, nums, result, subnet, visited, visited1):
        length = len(nums)
        if(len(subnet) == length):
            if(subnet not in visited):
                result.append(subnet[:])
                visited.append(subnet[:])
            
            return
        
        for i in range(length):
            if(visited1[i] == True):
                continue
