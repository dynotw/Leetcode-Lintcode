1499. Max Value of Equation
Hard

Given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. 
You are also given an integer k.
Find the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length. 
It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.

 

Example 1:
Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. 
Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.
No other pairs satisfy the condition, so we return the max of 4 and 1.

Example 2:
Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.




# sliding window, xi is ascending
# Because xi < xj,
# yi + yj + |xi - xj| = (yi - xi) + (yj + xj)
# So for each pair of (xj, yj), we have xj + yj, and we only need to find out the maximum yi - xi.
# To find out the maximum element in a sliding window,
# we can use priority queue or queue.

# Time complexity: O(NlogN); Space Complexity: O(N)
import heapq
class Solution:
    # Use Priority Queue
    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:
        # 因为python默认是最小堆，所以存x-y，而不是y-x
        pq = [] # store (x-y, x)
        res = -float('inf')
        for x, y in points:
            # delete all pair which |xi - xj| > k
            while pq and x - pq[0][1] > k:
                heapq.heappop(pq)
                
            if pq: 
                res = max(res, -pq[0][0] + y + x)
            heapq.heappush(pq, (x - y, x))
        return res


# Time Complexity: O(n); Space Complexity: O(n)
    # Use queue, 在queue中是按原有顺序保存pair，所以过程更加直观
    # This queue store (y-x, x), and keep this queue is kinds of 根据（y-x）单调递减list
    def findMaxValueOfEquation(self, A, k):
        queue = collections.deque()
        res = -float('inf')
        for x, y in A:
            # delete all pair which |xi - xj| > k
            while queue and x - queue[0][1] > k:
                queue.popleft()
            if queue: 
                res = max(res, queue[0][0] + y + x)
                
            # 为了保证y-x最大的出现在头部，queue[0]
            # 因为y-x必定小于前者，相当于是一个单调递减queue
            while queue and queue[-1][0] <= y - x:
                queue.pop()
            queue.append([y - x, x])
        return res
