1219. Path with Maximum Gold
Medium

In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.
 

Example 1:
Input: grid = [[0,6,0],
               [5,8,7],
               [0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.

Example 2:
Input: grid = [[1,0,7],
               [2,0,6],
               [3,4,5],
               [0,3,0],
               [9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.





# Use DFS
class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        result = 0
        for row in range(len(grid)):
            for column in range(len(grid[0])):
                if grid[row][column] != 0:
                    start = (row, column)
                    
                    start_gold = grid[row][column]
                    grid[row][column] = 0
                    num_gold = start_gold
                    max_gold = num_gold
                    
                    result = max(result, self.dfs(start, grid, num_gold, max_gold))  
                    
                    grid[row][column] = start_gold
                    
        return result
        
        
    def dfs(self, start, grid, num_gold, max_gold):
        directionX = [-1,1,0,0]
        directionY = [0,0,-1,1]
        
        for i in range(4):
            next_position = (start[0]+directionX[i], start[1]+directionY[i])
            if self.isValid(next_position, grid):
                current_gold = grid[next_position[0]][next_position[1]]
                grid[next_position[0]][next_position[1]] = 0
                num_gold += current_gold
                temp = self.dfs(next_position, grid, num_gold, max(num_gold, max_gold))

                if temp > max_gold:
                    max_gold = temp
                
                # backtrack
                grid[next_position[0]][next_position[1]] = current_gold
                num_gold -= current_gold
        
        return max_gold
                
                  
    def isValid(self, position, grid):
        height = len(grid)
        width = len(grid[0])
        x = position[0]
        y = position[1]
        if x < 0 or x >= height or y < 0 or y >= width:
            return False
        if grid[x][y] == 0:
            return False
        return True
    
