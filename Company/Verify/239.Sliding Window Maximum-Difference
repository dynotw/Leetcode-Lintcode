This problem is similiar to Leetcode 239. Sliding Window Maximum
We just need to get 239. Sliding Window Maximum - Sliding Window Minimum


239. Sliding Window Maximum
Hard


You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 
Example 2:
Input: nums = [1], k = 1
Output: [1]

Example 3:
Input: nums = [1,-1], k = 1
Output: [1,-1]

Example 4:
Input: nums = [9,11], k = 2
Output: [11]

Example 5:
Input: nums = [4,-2], k = 2
Output: [4]




# use deque which pops from / pushes to either side with the same O(1) performance.
# Time Complexity: O(n); Space Complexity: O(n)

from collections import deque
class Solution:
    def maxdiffSlidingWindow(self, nums: 'List[int]', k: 'int') -> 'List[int]':
        # eliminate corner case
        n = len(nums)
        if n ==0 or k == 0:
            return []
        if k == 1:
            return [0] * len(nums)
        
        # initalize deque and output
        # deque store index of nums rather than number itself
        deq_max = deque()
        deq_min =deque()

        for i in range(k):
            # Maximum
            self.clean_deque_max(i, nums, deq_max, k)
            deq_max.append(i)
            
            # Minimum
            self.clean_deque_min(i, nums, deq_min, k)
            deq_min.append(i)

        output = [nums[deq_max[0]] - nums[deq_min[0]]]
        
        # build output
        for i in range(k, n):
            # Maximum
            self.clean_deque_max(i, nums, deq_max, k)          
            deq_max.append(i)
            
            # Minimum
            self.clean_deque_min(i, nums, deq_min, k)          
            deq_min.append(i)
                 
            output.append(nums[deq_max[0]] - nums[deq_min[0]])
            
        return output        
    
    # 确保deq中的num[deq[0]] > num[deq[1]]
    def clean_deque_max(self, i, nums, deq, k):
        # remove indexes which should not from sliding window
        # 我们不能用len(deq) >= k, 因为我们存在deq中的index可能是不连续的
        # 例如 [1,3,(1,2,0),5] , k =3
        # deq = [1, 3, 4] ;   if we use len(deq) >= k
        
        # i - k 确定的是以i结尾，长度为k的sliding window的起点
        if deq and deq[0] == i - k:
            deq.popleft()

        # remove from deq indexes of all elements 
        # which are smaller than current element nums[i]
        while deq and nums[i] > nums[deq[-1]]:
            deq.pop()

    def clean_deque_min(self, i, nums, deq, k):
        # remove indexes which should not from sliding window
        # 我们不能用len(deq) >= k, 因为我们存在deq中的index可能是不连续的
        # 例如 [1,3,(1,2,0),5] , k =3
        # deq = [1, 3, 4] ;   if we use len(deq) >= k
        
        # i - k 确定的是以i结尾，长度为k的sliding window的起点
        if deq and deq[0] == i - k:
            deq.popleft()

        # remove from deq indexes of all elements 
        # which are smaller than current element nums[i]
        while deq and nums[i] < nums[deq[-1]]:
            deq.pop()



# Leetcode 239
from collections import deque
class Solution:
    def maxSlidingWindow(self, nums: 'List[int]', k: 'int') -> 'List[int]':
        # eliminate corner case
        n = len(nums)
        if n ==0 or k == 0:
            return []
        if k == 1:
            return nums
        
        # initalize deque and output
        # deque store index of nums rather than number itself
        deq = deque()
        max_idx = 0
        for i in range(k):
            self.clean_deque(i, nums, deq, k)
            deq.append(i)
            # compute max in nums[:k]
            if nums[i] > nums[max_idx]:
                max_idx = i

        output = [nums[max_idx]]
        
        # build output
        for i in range(k, n):
            self.clean_deque(i, nums, deq, k)          
            deq.append(i)
            output.append(nums[deq[0]])
            
        return output        
    
    # 确保deq中的num[deq[0]] > num[deq[1]]
    def clean_deque(self, i, nums, deq, k):
        # remove indexes which should not from sliding window
        # 我们不能用len(deq) >= k, 因为我们存在deq中的index可能是不连续的
        # 例如 [1,3,(1,2,0),5] , k =3
        # deq = [1, 3, 4] ;   if we use len(deq) >= k
        
        # i - k 确定的是以i结尾，长度为k的sliding window的起点
        if deq and deq[0] == i - k:
            deq.popleft()

        # remove from deq indexes of all elements 
        # which are smaller than current element nums[i]
        while deq and nums[i] > nums[deq[-1]]:
            deq.pop()


