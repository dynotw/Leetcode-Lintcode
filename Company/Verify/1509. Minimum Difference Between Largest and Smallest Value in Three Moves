1509. Minimum Difference Between Largest and Smallest Value in Three Moves
Medium


Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.
Return the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.

 
Example 1:
Input: nums = [5,3,2,4]
Output: 0
Explanation: Change the array [5,3,2,4] to [2,2,2,2].
The difference between the maximum and minimum is 2-2 = 0.

Example 2:
Input: nums = [1,5,0,10,14]
Output: 1
Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. 
The difference between the maximum and minimum is 1-0 = 1.

Example 3:
Input: nums = [6,6,0,1,1,4,6]
Output: 2

Example 4:
Input: nums = [1,5,6,14,15]
Output: 1




# Use priority queue
# Timecomplexit: O(n * log(4)); Space complexity: O(1)
import heapq
class Solution:
    def minDifference(self, nums: List[int]) -> int:
        # eliminate corner case
        if len(nums) < 4:
            return 0
        
        result = float('inf')
        # We only move 3 nums, so it could 3-0; 2-1; 1-2; 0-3 nums removed from max/min respectively
        # 我们只需要知道remove后的最大和最小值分别是什么即可
        # Time complexity: O(n * log(t)) -> O(n*log(4))
        max_candidates = heapq.nlargest(4, nums)
        min_candidates = heapq.nsmallest(4, nums)

        for i in range(4):
            min_current = min_candidates[i]
            max_current = max_candidates[3-i]
            result = min(result, max_current - min_current)
        
        return result
