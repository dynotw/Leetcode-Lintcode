418. Sentence Screen Fitting
Medium

Given a rows x cols screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen.

Note:
A word cannot be split into two lines.
The order of words in the sentence must remain unchanged.
Two consecutive words in a line must be separated by a single space.
Total words in the sentence won't exceed 100.
Length of each word is greater than 0 and won't exceed 10.
1 ≤ rows, cols ≤ 20,000.

Example 1:
Input:
rows = 2, cols = 8, sentence = ["hello", "world"]
Output: 
1
Explanation:
hello---
world---
The character '-' signifies an empty space on the screen.

Example 2:
Input:
rows = 3, cols = 6, sentence = ["a", "bcd", "e"]
Output: 
2
Explanation:
a-bcd- 
e-a---
bcd-e-
The character '-' signifies an empty space on the screen.

Example 3:
Input:
rows = 4, cols = 5, sentence = ["I", "had", "apple", "pie"]
Output: 
1
Explanation:
I-had
apple
pie-I
had--
The character '-' signifies an empty space on the screen.



class Solution:
    # It works, but time exceeded
    def wordsTyping_1(self, sentence: List[str], rows: int, cols: int) -> int:
        times = 0
        index = 0
        for row in range(rows):
            col_index = 0
            while(col_index + len(sentence[index]) <= cols):
                # print("row is ", row, " word is ", sentence[index])
                col_index += len(sentence[index]) + 1
                index += 1

                if index == len(sentence):
                    index = 0
                    times += 1
        
        return times
    
# case 1: sentence_ptr at the end of the screen falls on space in the sentence. Go to the next letter sentence_ptr+1 in the next row of the screen.
# case 2: sentence_ptr at the end of the screen falls on the last letter of a word. We skip the space in the sentence as the last letter coincides with the screen end: sentence_ptr+2
# case 3: sentence_ptr points in the middle of a word at the end of the screen: roll back sentence_ptr till there's a space in the sentence. his corresponds to starting to fill the word in the next row, as it does not fit into the current. sentence_ptr > 0 is needed for the case when a word is longer than cols; sentence_ptr will be < len(s)
    def wordsTyping(self, sentence: List[str], rows: int, cols: int) -> int:
        # 注意末尾需要加一个空格
        s = ' '.join(sentence) + ' '
        sentence_ptr = 0
        for i in range(rows):
            sentence_ptr += cols - 1
            # case 1: sentence_ptr at the end of screen falls exactly on the space
            if s[sentence_ptr % len(s)] == ' ':
                sentence_ptr += 1
                
            # case 2: sentence_ptr at the end of screen coincides with the last letter of a word (next is space)
            elif s[(sentence_ptr + 1) % len(s)] == ' ':
                sentence_ptr += 2
                
            else:
                # case 3: sentence_ptr at the end of screen falls in the middle of a word; roll back until space
                while sentence_ptr > 0 and s[(sentence_ptr - 1) % len(s)] != ' ':
                    sentence_ptr -= 1
                    
        return sentence_ptr // len(s)
        
