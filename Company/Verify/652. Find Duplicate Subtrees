652. Find Duplicate Subtrees
Medium

Given the root of a binary tree, return all duplicate subtrees.
For each kind of duplicate subtrees, you only need to return the root node of any one of them.
Two trees are duplicate if they have the same structure with the same node values.

 

Example 1:
Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]

Example 2:
Input: root = [2,1,1]
Output: [[1]]

Example 3:
Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]







# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# Time complexity: O(n); Space Complexity: O(n)
from collections import defaultdict
class Solution:
    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:
        allTree = defaultdict(int)
        result = list()
        self.dfs(root, list(), allTree, result)
        
        #print(allTree)
        return result
    
    # Use dfs to find all nodes Tree
    def dfs(self, node, tree, allTree, result):
        if node == None:
            tree.append('#')
            return tree
        
        left = self.dfs(node.left, tree, allTree, result)
        tree.append(node.val)
        right = self.dfs(node.right, tree, allTree, result)
        
        #tree.extend(left)
        # tree.append(node.val)
        #tree.extend(right)
        print("node is ", node)
        print("Tree is ", tree)
        
        # There's duplicated subtree, and we only need to append the root treenode rather than the whole subtree
        allTree[tuple(tree[:])] += 1
        if allTree[tuple(tree[:])] == 2:
            result.append(node)
        
        return tree
