695. Max Area of Island
Medium

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0



from collections import deque
class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        maxnum = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    temp = self.bfs(grid, (i,j))
                    if temp > maxnum:
                        maxnum = temp
        
        return maxnum
                    
                    
                    
    def bfs(self, grid, position):
        queue = deque()
        queue.append(position)
        grid[position[0]][position[1]] = 0
        x = [-1, 1, 0, 0]
        y = [0, 0, -1, 1]
        num = 0
        
        while(queue):
            current = queue.popleft()
            num += 1
            for i in range(4):
                neigh = (current[0] + x[i], current[1] + y[i])
                if(self.isValid(grid, neigh)):
                    queue.append(neigh)
                    grid[neigh[0]][neigh[1]] = 0
        
        return num
    
    def isValid(self,grid,position):
        # out of boundary
        x = position[0]
        y = position[1]
        if(x >=len(grid) or x < 0):
            return False
        if (y >=len(grid[0]) or y < 0):
            return False
        
        return grid[x][y] == 1
            
            
            
            
