986. Interval List Intersections
Medium

You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. 
Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a < b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. 
For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 

Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
Output: []

Example 3:
Input: firstList = [], secondList = [[4,8],[10,12]]
Output: []

Example 4:
Input: firstList = [[1,7]], secondList = [[3,10]]
Output: [[3,7]]



# Two pinters refer to first and second respectively. Btw this question has sorted array.
# This question isn't hard, but must figure out the relationship between two pointers
# Time complexity: O(n); Space complexity: O(1)
class Solution:
    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        # eliminate corner condition
        if len(firstList)==0 or len(secondList) == 0:
            return []
        
        result = list()
        first = 0
        second = 0
        while(first < len(firstList) and second < len(secondList)):
            # 1(0)-1(1) - 2(0)-2(1)
            if secondList[second][0] > firstList[first][1]:
                first += 1
                
            # 2(0)-2(1) - 1(0)-1(1)
            elif secondList[second][1] < firstList[first][0]:
                second += 1
            
            # 1(0) - 2(0) - 2(1) - 1(1)
            elif secondList[second][0] >= firstList[first][0] and secondList[second][1] <= firstList[first][1]:
                result.append(secondList[second])
                second +=1
            
            # 1(0) -2(0) - 1(1) - 2(1)
            elif secondList[second][0] >= firstList[first][0] and secondList[second][1] >= firstList[first][1]:
                result.append([secondList[second][0], firstList[first][1]])
                first += 1
            
            
            # 2(0) - 1(0) - 1(1) - 2(1)
            elif secondList[second][0] <= firstList[first][0] and secondList[second][1] >= firstList[first][1]:
                result.append(firstList[first])
                first+=1
            
            # 2(0) -1(0) - 2(1) - 1(1) 
            else:
                result.append([firstList[first][0], secondList[second][1]])
                second +=1
            
        
        return result
                
            
            
        
