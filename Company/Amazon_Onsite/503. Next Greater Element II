Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, 
which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.


Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]


# Time complexity: O(n); Space Complexity: O(n)
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        n = len(nums)
        stack = list()
        
        # from right to left, put all indexes into stack
        for i in range(n-1,-1,-1):
            stack.append(i)
        
        
        result = [-1] * n
        # 1. nums[i] < nums[i+1] -> find greater
        # 2. nums[i] >= nums[i+1], then compare nums[i] & greater of nums[i+1], .......
        # Firstly, find greater of the most right element, 
        # stack.append(i) represents nums[i+1], in terms of next for loop
        # stack[-2] is next greater of nums[i+1], if there's next greater of nums[i+1]
        for i in range(n-1,-1,-1):
            while(stack and nums[stack[-1]] <= nums[i]):
                stack.pop()
            
            # 说明 there's a number greater than nums[i]
            if stack:
                result[i] = nums[stack[-1]]
            
            stack.append(i)
        
        return result
