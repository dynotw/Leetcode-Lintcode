15. Permutations
Given a list of numbers, return all possible permutations.

Example
Example 1:

Input: [1]
Output:
[
  [1]
]
Example 2:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
Challenge
Do it without recursion.

Notice
You can assume that there is no duplicate numbers in the list.




// DFS in permutation
// This problem need boolean[] to avoid repeated, if we still use a HashSet above boolean[], this HashSet is redundant. 
// If we just use HashSet is not enough. For example, [1,2] ->[1,1] [1,2] [2,1] [2,2] (each element can be shown array.length times)
public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        
        // The function of the boolean[] is to restrict the for loop in DFS function
        // Main aim is to avoid repeated
        boolean[] visited = new boolean[nums.length];
        
        if (nums == null) {
            return results;
        }
        
        dfs(nums, subset, results, visited);
        
        return results;
    }
    
    // There's not startIndex anymore
    private void dfs(int[] nums,
                     List<Integer> subset,
                     List<List<Integer>> results,
                     boolean[] visited) {
        if (nums.length == subset.size()){
                results.add(new ArrayList<Integer>(subset));
                return;
        }
        
        // There's no startIndex anymore, so whether each number can be repeat depends on the boolean[]
        // Use the boolean[] means each number only use once
        // without boolean[], each number can be used array.length times
        for (int i = 0; i < nums.length; i++) {
            if(visited[i]){
                continue;
            }
            subset.add(nums[i]);
            visited[i] = true;
            dfs(nums, subset, results, visited);
            subset.remove(subset.size() - 1);
            visited[i] = false;
        }
    }
}
