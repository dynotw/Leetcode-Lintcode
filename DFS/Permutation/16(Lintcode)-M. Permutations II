16. Permutations II

Given a list of numbers with duplicate number in it. Find all unique permutations.

Example
Example 1:

Input: [1,1]
Output:
[
  [1,1]
]
Example 2:

Input: [1,2,2]
Output:
[
  [1,2,2],
  [2,1,2],
  [2,2,1]
]
Challenge
Using recursion to do it is acceptable. If you can do it without recursion, that would be great!




// DFS in permutation
public class Solution {
    /*
     * @param :  A list of integers
     * @return: A list of unique permutations
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        Set<ArrayList<Integer>> visited = new HashSet<>();
        
        // This boolean[] is to restrict the for loop in DFS
        boolean[] visited1 = new boolean[nums.length];
        
        if (nums == null){
            return result;
        }
        
        Arrays.sort(nums);
        dfs(nums, subset, result, visited, visited1);
        return result;
    }
    
    private void dfs(int[] nums, List<Integer> subset, List<List<Integer>> result, 
                     Set<ArrayList<Integer>> visited, boolean[] visited1){
        
        if (subset.size() == nums.length){
            if (!visited.contains(subset)){
                result.add(new ArrayList<Integer>(subset));
                visited.add(new ArrayList<Integer>(subset));
                return;
            }
        }
        
        for (int i=0; i<nums.length; i++){
            if (visited1[i] == true){
                continue;
            }
            
            subset.add(nums[i]);
            visited1[i] = true;
            dfs(nums, subset, result, visited, visited1);
            subset.remove(subset.size() -1);
            visited1[i] = false;
            
        }
    } 
}
