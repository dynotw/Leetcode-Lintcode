16. Permutations II

Given a list of numbers with duplicate number in it. Find all unique permutations.

Example
Example 1:

Input: [1,1]
Output:
[
  [1,1]
]
Example 2:

Input: [1,2,2]
Output:
[
  [1,2,2],
  [2,1,2],
  [2,2,1]
]
Challenge
Using recursion to do it is acceptable. If you can do it without recursion, that would be great!


// DFS in permutation
// this problem is different from Permutation(15), there could be same elements in nums
public class Solution {
    /*
     * @param :  A list of integers
     * @return: A list of unique permutations
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> subset = new ArrayList<>();
        Set<ArrayList<Integer>> visited = new HashSet<>();
        
        // This boolean[] is to restrict the for loop in DFS
        boolean[] visited1 = new boolean[nums.length];
        
        if (nums == null){
            return result;
        }
        
        // If I've used HashSet, I don't need to sort. However, we need to sort firstly, if we use jiuzhang's method, which is without HashSet
        // the aim of sort is to put same element together, for following boolean[], which is the if statement in dfs
        // Arrays.sort(nums);
        dfs(nums, subset, result, visited, visited1);
        return result;
    }
    
    private void dfs(int[] nums, List<Integer> subset, List<List<Integer>> result, 
                     Set<ArrayList<Integer>> visited, boolean[] visited1){
        
        if (subset.size() == nums.length){
            if (!visited.contains(subset)){
                result.add(new ArrayList<Integer>(subset));
                visited.add(new ArrayList<Integer>(subset));
            }
            return;
        }
        
        for (int i=0; i<nums.length; i++){
            if (visited1[i] == true){
                continue;
            }
            
            subset.add(nums[i]);
            visited1[i] = true;
            dfs(nums, subset, result, visited, visited1);
            subset.remove(subset.size() -1);
            visited1[i] = false;            
        }
    } 
}



// Jiuzhang's method, which don't use HashSet, but we need to sort firstly.
public class Solution {
    /*
     * @param :  A list of integers
     * @return: A list of unique permutations
     */
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> results = new LinkedList<>();
        List<Integer> subset = new LinkedList<>();
        boolean[] visited = new boolean[nums.length];
        if (nums == null) {
            return results;
        }
        
        Arrays.sort(nums);
        dfs(nums, visited, subset, results);
        
        return results;
    }
    
    private void dfs(int[] nums,
                     boolean[] visited,
                     List<Integer> permutation,
                     List<List<Integer>> results) {
                         
        if (nums.length == permutation.size()) {
            results.add(new ArrayList<Integer>(permutation));
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) {
                continue;
            }
            // Sort is for this if statement
            // ! visited[i-1] == falseï¼Œ ensure it's in the same for loop
            if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {
                System.out.println("nums is "+ Arrays.toString(nums));
                System.out.println("i is " + i);
                System.out.println("visited is " + Arrays.toString(visited));
                System.out.println("permutation is " + permutation);
                continue;
            }
            
            permutation.add(nums[i]);
            visited[i] = true;
            dfs(nums, visited, permutation, results);
            visited[i] = false;
            permutation.remove(permutation.size() - 1);
        }
    }
 };


// Leetcode Method
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        results = []
        def backtrack(comb, counter):
            if len(comb) == len(nums):
                # make a deep copy of the resulting permutation,
                # since the permutation would be backtracked later.
                results.append(list(comb))
                return

            for num in counter:
                if counter[num] > 0:
                    # add this number into the current combination
                    comb.append(num)
                    counter[num] -= 1
                    # continue the exploration
                    backtrack(comb, counter)
                    # revert the choice for the next exploration
                    comb.pop()
                    counter[num] += 1

        backtrack([], Counter(nums))

        return results
