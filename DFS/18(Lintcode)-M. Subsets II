18. Subsets II
中文English
Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Example
Example 1:

Input: [0]
Output:
[
  [],
  [0]
]
Example 2:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
Challenge
Can you do it in both recursively and iteratively?

Notice
Each element in a subset must be in non-descending order.
The ordering between two subsets is free.
The solution set must not contain duplicate subsets.





// DFS in combination
// compared with 17
// 1st method, jiuzhang
class Solution {
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // write your code here
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if (nums == null){
            return result;
        } 
        
        if (nums.length == 0) {
            results.add(new ArrayList<Integer>());
            return results;
        }
        
        // don't forget to sort 
        Arrays.sort(nums);

        List<Integer> subset = new ArrayList<Integer>();
        helper(nums, 0, subset, results);
        
        return results;
        
        
    }
    public void helper(int[] nums, int startIndex, List<Integer> subset, List<List<Integer>> results){
        results.add(new ArrayList<Integer>(subset));
        for(int i=startIndex; i<nums.length; i++){
            
            //前提是我们之前进行了排序，所以相同的数在nums里是从小到大排序的
            // for loop 是改变同一位上的数字，所以if statement 功能如下
            // i ！= startIndex 是为了保证[1,2,2]不被删除, 
            // nums[i] == nums[i-1] 是为了保证只有一个[1,2]，
            // 综上，如果for loop时同一位上的元素可能出现相等，那么我们只取第一个
            /*
            如果现在取了[1, 2(1), 2(2), 2(3)]。这时候2(1)是startPos - 1对应的。接下来递归是从startPos开始选下一个数。
            那么再选的时候只能选[1, 2(1), 2(2)]而不能选[1, 2(1), 2(3)]，不能跳着选。
            不能选的这个情况，如果num[i] == num[i - 1]并且i != startPos （必须先从 startPos开始选），那么说明跳着选了，我们不采用，continue掉。
            */
            // but this if statement, it's a liitle hard to understand. see 2nd method use HashSet来避免重复元素
            
            if (i != startIndex && nums[i]==nums[i-1]) {
                continue;
            }
            subset.add(nums[i]);
            helper(nums, i+1, subset, results);
            subset.remove(subset.size()-1);
        }
        
        return;
    }
}


2nd method
public class Solution {
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        // write your code here
        // new the return
        
        // don't forget to sort
        Arrays.sort(nums);
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> subset = new ArrayList<Integer>();
        
        // eliminate special case 
        if (nums == null){
            return result;
        }
        
        if (nums.length == 0){
            result.add(subset);
            return result;
        }
        
        Set<ArrayList<Integer>> visited = new HashSet<ArrayList<Integer>>();
        recursion(subset, nums, 0, result, visited);
        return result;
    }
    
    private void recursion(List<Integer> headNumber, int[] nums, int start, List<List<Integer>> result, Set<ArrayList<Integer>> visited){
        
        // Compared to 17, just add this if statement to eliminate same headNumber
        // but I prefer to use HashSet to eliminate same headNumber
        // because 如果想排除重复访问相同元素，在多数题中普遍都用HashSet， 所以用HashSet普适性更强
        /*
        if (!result.contains(headNumber)){
            result.add(new ArrayList<Integer>(headNumber));
        }
        */
        
        if (!visited.contains(headNumber)){
            result.add(new ArrayList<Integer>(headNumber));
            visited.add(new ArrayList<Integer>(headNumber));
        }
        
        for (int i = start; i < nums.length; i++){
            headNumber.add(nums[i]);
            recursion(headNumber, nums, i+1, result, visited);
            headNumber.remove(headNumber.size()-1);
        }
        
        return;
    }
}

// 2nd method, use HashSet 来避免重复点
