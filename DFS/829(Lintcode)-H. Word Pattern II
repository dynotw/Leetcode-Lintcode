829. Word Pattern II

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.(i.e if a corresponds to s, then b cannot correspond to s. For example, given pattern = "ab", str = "ss", return false.)

Example
Example 1

Input:
pattern = "abab"
str = "redblueredblue"
Output: true
Explanation: "a"->"red","b"->"blue"
Example 2

Input:
pattern = "aaaa"
str = "asdasdasdasd"
Output: true
Explanation: "a"->"asd"
Example 3

Input:
pattern = "aabb"
str = "xyzabcxzyabc"
Output: false
Notice
You may assume both pattern and str contains only lowercase letters.

// DFS in combination
/*
1. 本题和字模式I不同,题干没有给出要配对的字符串,因此需要定义一个map类型dict来记录模板pattern中的字母对应配对的字符串,set类型used记录这个配对的字符串是否被枚举过。

2. 对输入的字符串str进行深度优先搜索，传入的参数包括：模板pattern、字符串str、dict、used；
    a. 当pattern搜索到末尾且str也搜索到末尾即能完全匹配，返回true；

    b. 如果当前模板的字母已经有匹配过字符串word:
如果word和现应匹配的str不匹配，则返回false；（例如模板为：ABA，字符串为abc，则搜索到第三位时A已经匹配过a，但现在str中是c无法匹配；）
如果word和现应匹配的str匹配，则递归调用dfs并返回结果，步进为：pattern往后1位，str往后word的长度位数；

    c. 如果当前模板的字母未匹配过字符串：
遍历整个str，枚举字符串前缀word的作为匹配；
若当前的word在set中则证明其已经在b.步骤中完成，可以剪枝；
将word加入dict和used；
递归调用dfs并返回结果，步进为：pattern往后1位，str往后word长度位数；
将word从dict和used中删除；
若所有的word都无法匹配，返回false；

复杂度分析
时间复杂度：O(lengthStr^lengthPattern)

每次递归有lengthStr种匹配串，一共有lengthPattern次，为指数级；
空间复杂度：O(lengthPattern), 需要使用map和set进行存储记录；
*/
public class Solution {
    /**
     * @param pattern: a string,denote pattern string
     * @param str:     a string, denote matching string
     * @return: a boolean
     */
    public boolean wordPatternMatch(String pattern, String str) {
        Map<Character, String> dict = new HashMap<>();
        Set<String> used = new HashSet<>();
        return match(pattern, str, dict, used);
    }

    private boolean match(String pattern, String str, Map<Character, String> dict, Set<String> used) {
        if (pattern.length() == 0) {
            return str.length() == 0;
        }
        Character ch = pattern.charAt(0);

        // 此前已匹配过字母ch
        if (dict.containsKey(ch)) {
            String word = dict.get(ch);

            // ch对应的word当前无法和str的前缀匹配
            if (!str.startsWith(word)) {
                return false;
            }

            // 下一步递归dfs, 不用管下面的for loop,因为已经return了
            // 相当于pattern中的char已经找到了对应str中的word
            return match(pattern.substring(1), str.substring(dict.get(ch).length()), dict, used);
        }
        
        // 这个for loop就是为了枚举pattern的char可能对应的所有word in str
        for (int i = 0; i < str.length(); i++) {
            // 剩下的str不够pattern分： str剩下的char数量小于剩下pattern的char数量（pattern的每个char还分不到一个char in str）
            if (str.length() - i -1< pattern.length() -1){
                return false;
            }
            // 枚举匹配的字符串,index从0到i
            String word = str.substring(0, i + 1);

            // 字符串已经有出现过，则可以进行剪枝
            // 上面的if statement排除了，pattern的char一样，但str的word不同。这里是str的word相同，但pattern的char不同。
            // 因为如果pattern相同那么此次dfs应该结束在if statement，不会进入for loop
            if (used.contains(word)) {
                continue;
            }

            // 下一步递归dfs
            dict.put(ch, word);
            used.add(word);
            if (match(pattern.substring(1), str.substring(i + 1), dict, used)) {
                return true;
            }
            used.remove(word);
            dict.remove(ch);
        }
        return false;
    }
}
