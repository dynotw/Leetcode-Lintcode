Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. 
Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. 
For example, there won't be input like 3a or 2[4].

 
Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"
Example 4:

Input: s = "abc3[cd]xyz"
Output: "abccdcdcdxyz"




// time:O(n), space: O(n)
// The core is int index is a global varible
class Solution {    
    int index = 0;
    
    String decodeString(String s) {  
        StringBuilder result = new StringBuilder();
        
        while (index < s.length() && s.charAt(index) != ']') {
            // element is char, 直接加入result
            if (!Character.isDigit(s.charAt(index)))
                result.append(s.charAt(index++));
            
            // element is digit
            else {
                int k = 0;
                // build k until next character isn't a digit
                // k*10 是因为 100 其实是 ‘1’ ‘0’ ‘0’ 三个char，而不是100这个数字
                while (index < s.length() && Character.isDigit(s.charAt(index))){
                    k = k * 10 + s.charAt(index++) - '0';
                }
                // ignore the opening bracket '['    
                index++;
                
                String decodedString = decodeString(s);
                
                // ignore the closing bracket ']'
                index++;
                // build k[decodedString] and append to the result
                while (k > 0){
                    result.append(decodedString);
                    k--;
                }
            }
        }
        
        return new String(result);
    }
}
