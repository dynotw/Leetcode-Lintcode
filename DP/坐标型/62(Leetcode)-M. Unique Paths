62. Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Example 3:
Input: m = 7, n = 3
Output: 28

Example 4:
Input: m = 3, n = 3
Output: 6
 
Constraints:
1 <= m, n <= 100
It's guaranteed that the answer will be less than or equal to 2 * 109.



# DP
# Time complexity: O(n^2); space complexity: O(n^2)
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        # 二维数组表示坐标
        grid = list()
        for i in range(m):
            row = [1] * n
            grid.append(row)

        # grid[i][j]的路径数等于器左边和上边的路径之和
        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0:
                    grid[i][j] = 1
                
                else:
                    grid[i][j] = grid[i-1][j] + grid[i][j-1]
        
        return grid[i][j]
        
        
