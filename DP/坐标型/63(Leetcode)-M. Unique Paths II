63. Unique Paths II

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space is marked as 1 and 0 respectively in the grid.

 

Example 1:

Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1
 

Constraints:
m == obstacleGrid.length
n == obstacleGrid[i].length
1 <= m, n <= 100
obstacleGrid[i][j] is 0 or 1.


# It's based on Unique Paths(62), but 状态转移方程需要改动
# Time complexity: O(n^2); Space complexity: O(n^2)
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        # initialize
        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:
            return 0
        
        grid = list()
        for i in range(len(obstacleGrid)):
            row = [0] * len(obstacleGrid[0])
            grid.append(row)
        grid[0][0] == 1
        
        for i in range(len(obstacleGrid)):
            for j in range(len(obstacleGrid[0])):
                if obstacleGrid[i][j] == 1:
                    continue
                    
                elif i == 0 and j == 0:
                    grid[i][j] = 1
                    
                elif i == 0:
                    grid[i][j] = grid[i][j-1]
                
                elif j == 0:
                    grid[i][j] = grid[i-1][j]
                
                else:
                    grid[i][j] = grid[i-1][j] + grid[i][j-1]
        
        print(grid)
        return grid[-1][-1]
