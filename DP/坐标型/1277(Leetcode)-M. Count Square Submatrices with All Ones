1277. Count Square Submatrices with All Ones
Medium


Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.




# Use DP, see the below link 
# https://leetcode.com/problems/count-square-submatrices-with-all-ones/discuss/643429/Python-DP-Solution-%2B-Thinking-Process-Diagrams-(O(mn)-runtime-O(1)-space)
# 以bottom-right为右下角所能形成square个数（最大边长）
# Time Complexity: O(m*n); Space Complexity: O(1)
class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        result = 0
        for row in range(len(matrix)):
            for column in range(len(matrix[0])):
                # In terms of 1st row/column, 以自身为右下角的最大边长就是本身
                if row == 0 or column == 0:
                    continue
                
                if matrix[row][column] == 1:
                    matrix[row][column] += min(matrix[row-1][column], matrix[row-1][column-1], matrix[row][column-1])
        
        
                
            result += sum(matrix[row])
        
        return result
