55. Jump Game

Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

 

Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.



# 状态方程-- f[i] = OR 0<=j<i (f[j] AND j + a[j] >= i)
# f[i] 表示 是否能跳到i位置; 注意此题的index所代表的的含义
# Time complexity: O(n^2); space coplexity: O(n)
# Java pass, python3 time exceed
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        # initialize
        state = [False] * len(nums)
        state[0] = True
        
        # 
        for i in range(1, len(nums)):
            for j in range(i):
                if state[j] == True and j + nums[j] >= i:
                    state[i] = True
                    break
        
        return state[len(nums)-1]
        
        
 public class Solution {
    public boolean canJump(int[] A) {
        boolean[] can = new boolean[A.length];
        can[0] = true;
        
        for (int i = 1; i < A.length; i++) {
            for (int j = 0; j < i; j++) {
                if (can[j] && j + A[j] >= i) {
                    can[i] = true;
                    break;
                }
            }
        }
        
        return can[A.length - 1];
    }
}
