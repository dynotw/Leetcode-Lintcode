453. Flatten Binary Tree to Linked List

Flatten a binary tree to a fake "linked list" in pre-order traversal.

Here we use the right pointer in TreeNode as the next pointer in ListNode.

Example
Example 1:

Input:{1,2,5,3,4,#,6}
Output：{1,#,2,#,3,#,4,#,5,#,6}
Explanation：
     1
    / \
   2   5
  / \   \
 3   4   6

1
\
 2
  \
   3
    \
     4
      \
       5
        \
         6
Example 2:

Input:{1}
Output:{1}
Explanation：
         1
         1
Challenge
Do it in-place without any extra memory.

Notice
Don't forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.






/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// Binary Tree, Divide, Traverse
// This problem is difficult, I can't figure out
/*
// 自己的做法，错误在Left.right = Right
// Right应该放在Left的leaf.right而不是直接放在Left.right。因为这样使得原本的Left.right所引导的subtree消失了。
public class Solution {
    public void flatten(TreeNode root) {
        // write your code here
        helper(root);
    }
    
    private TreeNode helper(TreeNode root){
        if(root == null){
            return null;
        }
        
        TreeNode Left = helper(root.left);
        TreeNode Right = helper(root.right);
        

        if (Left != null){
            Left.right = Right;
            Left.left = null;
            root.right = Left;
            root.left = null;
        }
        
        if (Left == null){
            root.right = Right;
            root.left = null;
        }
        
        return root;
    }
}
*/


// 画图才能理解
// 答案有一点没理解，答案return的是新的Binary Tree的leaf而不是root
public class Solution {
    /**
     * @param root: a TreeNode, the root of the binary tree
     * @return: nothing
     */
    public void flatten(TreeNode root) {
        helper(root);
    }
    
    // flatten root and return the last node
    private TreeNode helper(TreeNode root) {
        if (root == null) {
            return null;
        }
        
        TreeNode leftLast = helper(root.left);
        TreeNode rightLast = helper(root.right);
        
        // connect leftLast to root.right
        if (leftLast != null) {
            leftLast.right = root.right;
            root.right = root.left;
            root.left = null;
        }
        
        if (rightLast != null) {
            return rightLast;
        }
        
        if (leftLast != null) {
            return leftLast;
        }
        
        return root;
    }
}
