134. LRU Cache

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
Finally, you need to return the data from each get.

Example
Example1

Input:
LRUCache(2)
set(2, 1)
set(1, 1)
get(2)
set(4, 1)
get(1)
get(2)
Output: [1,-1,1]
Explanation：
cache cap is 2，set(2,1)，set(1, 1)，get(2) and return 1，set(4,1) and delete (1,1)，because （1,1）is the least use，get(1) and return -1，get(2) and return 1.
Example 2:

Input：
LRUCache(1)
set(2, 1)
get(2)
set(3, 2)
get(2)
get(3)
Output：[1,-1,2]
Explanation：
cache cap is 1，set(2,1)，get(2) and return 1，set(3,2) and delete (2,1)，get(2) and return -1，get(3) and return 2.


// Java method1
// define double-linked listnode
class ListNode{
    ListNode prev;
    ListNode next;
    int key;
    int value;

    public ListNode(int key, int value) {
        this.key = key;
        this.value = value;
        this.prev = null;
        this.next = null;
    }
}

public class LRUCache {
    private int capacity;
    private HashMap<Integer, ListNode> map = new HashMap<Integer, ListNode>();
    private ListNode head = new ListNode(-1, -1);
    private ListNode tail = new ListNode(-1, -1);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }

    public int get(int key) {
        //key找不到, there's no key in map
        if(!map.containsKey(key)) {
            return -1;
        }
        
        // update status of key, remove it, then put key to the end of double-linked(before tail)
        else{
            // remove current
            ListNode current = map.get(key);
            current.prev.next = current.next;
            current.next.prev = current.prev;
    
            // move current to tail
            move_to_tail(current);
    
            return map.get(key).value;            
        }
    }
    
    public void set(int key, int value) {
        // 超出了capacity
        if (map.size() >= capacity) {
            // the key is in map, set not insert
            if(map.containsKey(key)){
                // remove current, and put it to end of double-linked
                ListNode current = map.get(key);
                current.prev.next = current.next;
                current.next.prev = current.prev;
            }
            else{
                // the key isn't in map, insert not set
                //删除头部数据(head之后), insert new key
                map.remove(head.next.key);		
                head.next = head.next.next;
                head.next.prev = head;               
            }
            
            ListNode insert = new ListNode(key, value);		//新建节点
            map.put(key, insert);
            move_to_tail(insert);					//放于尾部
        }
        
        else{
            if(map.containsKey(key)){
                // remove current, and put it to end of double-linked
                ListNode current = map.get(key);
                current.prev.next = current.next;
                current.next.prev = current.prev;
            }
            
            ListNode insert = new ListNode(key, value);		//新建节点
            map.put(key, insert);
            move_to_tail(insert);					//放于尾部
        }

    }
    
    //移动数据至尾部(tail之前), insert 
    private void move_to_tail(ListNode current){
        current.prev = tail.prev;
        tail.prev = current;
        current.prev.next = current;
        current.next = tail;
    }
}

// Java method2, wrong method, but I don't know where problem is
public class LRUCache {
    /*
    * @param capacity: An integer
    */
    List<Integer> order = new LinkedList<>();
    Map<Integer,Integer> map = new HashMap<>();
    int size = 0;
    public LRUCache(int capacity) {
        // do intialization if necessary
        this.size = capacity;
        this.order = new LinkedList<>();
        this.map = new HashMap<>();
    }

    /*
     * @param key: An integer
     * @return: An integer
     */
    public int get(int key) {
        // write your code here
        if(map.containsKey(key)){
            order.remove(new Integer(key));
            order.add(key);
            return map.get(key);
        }
        else{
            return -1;
        }
    }

    /*
     * @param key: An integer
     * @param value: An integer
     * @return: nothing
     */
    public void set(int key, int value) {
        // write your code here
        if(map.size() >= size){
            int deleteNum = order.get(0);
            order.remove(0);
            map.remove(deleteNum);
            order.add(key);
            map.put(key, value);
        }
        
        else{
            if(order.contains(key)){
                order.remove(new Integer(key));
                order.add(key);
                map.put(key, value);
            }
            else{
                order.add(key);
                map.put(key, value);
            }
        }
    }
}



# Python have a special data structure, named OrderedDict, so we also can use OrderedDict in Python
# use OrdereDict in python
# we also can use doublelinkedlist in Java(must, Java don't have OrderedDict) and Python(optional)
'''
Time complexity: O(1) both for put and get since all operations with ordered dictionary : 
        get/in/set/move_to_end/popitem (get/containsKey/put/remove) are done in a constant time.

Space complexity: O(capacity) since the space is used only for an ordered dictionary with at most capacity + 1 elements.
'''

import collections
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.order = collections.OrderedDict()

    def get(self, key: int) -> int:
        if (key not in self.order.keys()):
            return -1
        else:
            self.order.move_to_end(key)
            return self.order[key]

                
        

    def put(self, key: int, value: int) -> None:
        if key in self.order.keys():
            self.order.move_to_end(key)
        
        self.order[key] = value
        
        if(len(self.order) > self.capacity):
            self.order.popitem(last = False)


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
