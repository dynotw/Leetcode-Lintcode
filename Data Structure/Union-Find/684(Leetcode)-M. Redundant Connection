In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
    
    
    

# time complexity: O(n); Space complexity: O(n)
class Union_Find(object):
    def __init__(self, n):
        # 这样的做法就是parent和rank的index就表示对象本身。例：数字1在parent和rank中的index就是1
        # 因为parent[0] and rank[0]实际上是无意义点，因为没有数字0加入到graph中
        self.parent = [i for i in range(n+1)]
        self.rank = [1] * (n+1)
        self.num = n
    
    # 第一次使用find method,(compress-find), so the following find method is O(1)
    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    # 第一次使用union method is O(n), and the following union method is O(1)
    # 如果两者已经union了，返回false； 反之返回true
    def union(self, x, y):
        xRoot, yRoot = self.find(x), self.find(y)
        
        # x and y are already in the same union
        if xRoot == yRoot:
            return False
        
        if self.rank[xRoot] < self.rank[yRoot]:
            self.parent[xRoot] = yRoot
            self.rank[yRoot] += self.rank[xRoot]
            
        elif self.rank[xRoot] > self.rank[yRoot]:
            self.parent[yRoot] = xRoot
            self.rank[xRoot] += self.rank[yRoot]
            
        else:
            self.parent[yRoot] = xRoot
            self.rank[xRoot] += self.rank[yRoot]
        
        self.num -= 1
        return True

class Solution(object):
    def findRedundantConnection(self, edges):
        dsu = Union_Find(len(edges))
        for edge in edges:
            if not dsu.union(edge[0], edge[1]):
                print(dsu.num)
                return edge
