Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 
Example 1:
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:
Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

Example 4:
Input: s = "(a(b(c)d)"
Output: "a(b(c)d)"







# Use Stack
# Time complexity: O(n^2), because 'in' operation in list() is O(n); Space complexity: O(n)
class Solution:
    def minRemoveToMakeValid_1(self, s: str) -> str:        
        visited = list()
        # index use set() rather than list(), because 'in' operation in set() is O(1); in list() is O(n) 
        # But there's no index in set(), it's a problem. See method 2
        index = list()
        for i in range(len(s)):
            if s[i] == "(":
                index.append(i)
                visited.append(s[i])
                
            elif s[i] == ")" :
                if len(visited) != 0 and visited[-1] == "(":
                    index.pop()
                    visited.pop()
                else:
                    index.append(i)
                    visited.append(s[i])
        
        result = ""
        for i in range(len(s)):
            if i not in index:
                result += s[i]
                
        return result
    
    
# Method 2
# visited stores indexes of "(" rather than "(" or ")" itself
# Time complexity: O(n), use set(); space complexity: O(n)
    def minRemoveToMakeValid(self, s: str) -> str:        
        visited = list()
        # index use set() rather than list(), because 'in' operation in set() is O(1); in list() is O(n) 
        # But there's no index in set(), it's a problem 
        index = set()
        
        for i in range(len(s)):
            if s[i] == "(":
                visited.append(i)
                
            elif s[i] == ")" :
                if len(visited) == 0 :
                    index.add(i)
                else:
                    visited.pop()
        
        index = index.union(visited)
        result = ""
        for i in range(len(s)):
            if i not in index:
                result += s[i]
                
        return result   
