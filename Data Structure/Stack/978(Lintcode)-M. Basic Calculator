978. Basic Calculator

Implement a basic calculator to evaluate a simple expression string.

The expression string may contain open '(' and closing parentheses ')', the plus '+' or minus sign '-', non-negative integers and empty spaces ' '.

You may assume that the given expression is always valid.

Example
Example 1
Input："1 + 1"
Output：2

Example 2
Input："(1+(4+5+2)-3)+(6+8)" 
Output：23

Notice
Do not use the eval built-in library function

// Stack
public class Solution {
    /**
     * @param s: the given expression
     * @return: the result of expression
     */
    public int calculate(String s) {
        // 这里的Stack与980中的Stack作用不一样
        Stack<Integer> stack = new Stack<Integer>();
        int result = 0;
        int number = 0;
        // 这里sign不赋值成‘+’ （980）中赋值成‘+’。 因为sign也要放入Stack中（注意978和980的Stack作用不一样）
        int sign = 1;
        
        for (int i = 0; i < s.length(); i ++) {
            char c = s.charAt(i);
            // 针对连续digit时，将char转换成int
            if (Character.isDigit(c)) {
                number = 10 * number + (c - '0');
            }
            else if (c == '+') {
                result += sign * number;
                number = 0;
                sign = 1;
            } 
            else if (c == '-') {
                result += sign * number;
                number = 0;
                sign = -1;
            } 
            else if (c == '(') {
                //we push the result first, then sign;
                stack.push(result);
                stack.push(sign);
                //reset the sign and result for the value in the parenthesis，相当于重新开始一套计算
                sign = 1;
                number = 0;
                result = 0;
            } 
            else if (c == ')') {
                result += sign * number;
                result *= stack.pop();    //stack.pop() is the sign before the parenthesis
                result += stack.pop();   //stack.pop() now is the result calculated before the parenthesis
                number = 0;
            }
        }
        
        // 最后一个Number没被加入带result中：因为只有在碰到sign后，才会将sign之前的number加入到result中
        if (number != 0) {
            result += sign * number;
        }
        return result;
    }
}





// Python
# Calculator is all about stack, notice that number can be 100, 10000
# time complexity: O(n); space complexity: O(n)
class Solution:
    def calculate(self, s: str) -> int:
        if len(s) == 1:
            return s
        
        result = 0        
        index = 0
        operator = 1
        record = list()
        
        
        while(index < len(s)):
            if s[index].isdigit():
                temp = 0
                while (index < len(s) and s[index].isdigit()):
                    temp *= 10 
                    temp += int(s[index])
                    index += 1
                result += operator * temp
            
            elif s[index] == '-':
                operator = -1
                index += 1
            
            elif s[index] == '+':
                operator = 1
                index += 1
            
            elif s[index] == ' ':
                index += 1
                
            elif (s[index] == '('):
                ## we push the result first, then sign;
                record.append(result)
                record.append(operator)
                ## reset the sign and result for the value in the parenthesis，相当于重新开始一套计算
                operator = 1
                result = 0
                index += 1
            
            elif (s[index] == ')'):

                operator_temp = record.pop()
                result_temp = record.pop()
                result_temp += operator_temp * result
                result = result_temp
                index += 1
            
        
        return result
