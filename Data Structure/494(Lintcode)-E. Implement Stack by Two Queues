494. Implement Stack by Two Queues

Implement a stack by two queues. The queue is first in first out (FIFO). That means you can not directly pop the last element in a queue.

Example
Example 1:

Input:
push(1)
pop()
push(2)
isEmpty() // return false
top() // return 2
pop()
isEmpty() // return true
Example 2:

Input:
isEmpty()



//
public class Stack {
    /*
     * @param x: An integer
     * @return: nothing
     */
    
    private Queue<Integer> queue1 = new LinkedList<>();
    private Queue<Integer> queue2 = new LinkedList<>();
    
    public void push(int x) {
        // write your code here
        queue1.offer(x);
        System.out.println("push: "+"queue1 is "+queue1 + " queue2 is "+queue2);
    }

    /*
     * @return: nothing
     */
    public void pop() {
        // write your code here
        // all numbers have been put into queue2
        if(queue1.isEmpty()){
            int size = queue2.size();
            for (int i=0; i<size-1; i++){
                queue1.offer(queue2.poll());
            }
            queue2.poll();
            System.out.println("pop: "+"queue1 is "+queue1 + " queue2 is "+queue2);
            return;
        }
        
        // queue1 is empty or not
        else{
            int size = queue1.size();
            for(int i=0; i<size-1; i++){
                queue2.offer(queue1.poll());
            }
            queue1.poll();
            System.out.println("pop: "+"queue1 is "+queue1 + " queue2 is "+queue2);
            return;
        }
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        // all numbers have been put into queue2
        if(queue1.isEmpty()){
            int size = queue2.size();
            for (int i=0; i<size-1; i++){
                queue1.offer(queue2.poll());
            }
            int result = queue2.peek();
            queue1.offer(queue2.poll());
            System.out.println("top: "+"queue1 is "+queue1 + " queue2 is "+queue2);
            return result;
        }
        
        else{
            int size = queue1.size();
            for(int i=0; i<size-1; i++){
                queue2.offer(queue1.poll());
            }
            int result = queue1.peek();
            queue2.offer(queue1.poll());
            System.out.println("top: "+"queue1 is "+queue1 + " queue2 is "+queue2);
            return result;
        }
    }
    /*
     * @return: True if the stack is empty
     */
    public boolean isEmpty() {
        // write your code here
        return (queue1.isEmpty() && queue2.isEmpty());
    }
}


//
