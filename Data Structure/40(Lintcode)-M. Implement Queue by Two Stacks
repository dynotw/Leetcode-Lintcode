40. Implement Queue by Two Stacks
As the title described, you should only use two stacks to implement a queue's actions.

The queue should support push(element), pop() and top() where pop is pop the first(a.k.a front) element in the queue.

Both pop and top methods should return the value of first element.

Example
Example 1:

Input:
    push(1)
    pop()    
    push(2)
    push(3)
    top()    
    pop()     
Output:
    1
    2
    2
Example 2:

Input:
    push(1)
    push(2)
    push(2)
    push(3)
    push(4)
    push(5)
    push(6)
    push(7)
    push(1)
Output:
[]
Challenge
implement it by two stacks, do not use any other data structure and push, pop and top should be O(1) by AVERAGE.

Notice
Suppose the queue is not empty when the pop() function is called.


// Python
class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.s1 = []
        self.s2 = []        

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        while self.s1:
            self.s2.append(self.s1.pop())
        self.s1.append(x)
        while self.s2:
            self.s1.append(self.s2.pop())        

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        return self.s1.pop()        

    def peek(self) -> int:
        """
        Get the front element.
        """
        return self.s1[-1]        

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return not self.s1     



// Java
public class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();
    public MyQueue() {
        // do intialization if necessary
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    public void push(int element) {
        // write your code here
        if(s2.isEmpty()) {
            s1.push(element);
            return;
        }
        while(!s2.isEmpty()) {
            s1.push(s2.pop());
        }
        s1.push(element);
    }

    /*
     * @return: An integer
     */
    public int pop() {
        // write your code here
        while(!s1.isEmpty()) {
            s2.push(s1.pop());
        }
        if(s2.isEmpty()) {
            return -1;
        }
        return s2.pop();
    }

    /*
     * @return: An integer
     */
    public int top() {
        // write your code here
        while(!s1.isEmpty()) {
            s2.push(s1.pop());
        }
        if(s2.isEmpty()) {
            return -1;
        }
        return s2.peek();
    }
}
