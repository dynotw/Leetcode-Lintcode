1030. K-th Smallest Prime Fraction
中文English
A sorted list A contains 1, plus some number of primes. Then, for every p < q in the list, we consider the fraction p/q.

What is the K-th smallest fraction considered? Return your answer as an array of ints, where answer[0] = p and answer[1] = q.

Example
Example 1:

Input: A = [1, 2, 3, 5], K = 3
Output: [2, 5]

Explanation:
The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, 2/3.
The third fraction is 2/5.
Example 2:

Input: A = [1, 7], K = 1
Output: [1, 7]
Notice
A will have length between 2 and 2000.
Each A[i] will be between 1 and 30000.
K will be between 1 and A.length * (A.length - 1) / 2.


// Python
import heapq
class Solution:
    def kthSmallestPrimeFraction(self, A: List[int], K: int) -> List[int]:
        heap = []
        n = len(A)
        for i in range(n):
            # A contains 1, because all numbers are prime, 1 must be smallest prime
            heapq.heappush(heap, (1/A[i], 0, i))
        while K > 0:
            fraction, numerator, denominator = heapq.heappop(heap)
            K -= 1
            if K == 0: 
                return[A[numerator], A[denominator]]
            numerator += 1
            # fraction 的要求就是小于1，所以判断一下
            if numerator < denominator:
                heapq.heappush(heap, (A[numerator]/A[denominator], numerator, denominator))
