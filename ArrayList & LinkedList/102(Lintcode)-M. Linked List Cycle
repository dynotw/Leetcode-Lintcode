102. Linked List Cycle

Given a linked list, determine if it has a cycle in it.



Example
	Example 1:
		Input: 21->10->4->5,  then tail connects to node index 1(value 10).
		Output: true
		
	Example 2:
		Input: 21->10->4->5->null
		Output: false
	
	```
Challenge
Follow up:
Can you solve it without using extra space?


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


// LinkedList 
// solve the problem is easy, but conquer the challenge is difficult
// 直接看103， 不用看102。因为103是完全建立在102基础上

// 1st method, use extra space
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: True if it has a cycle, or false
     */
    public boolean hasCycle(ListNode head) {
        // write your code here
        
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    
    Set<ListNode> visited = new HashSet<>();
    
    while(head != null){
        if (visited.contains(head)){
            return true;
        }
        else{
            visited.add(head);
        }
        
        head = head.next;
    }
    
    return false;
    }
}


// 2nd method
public class Solution{
    public boolean hasCycle(ListNode head){
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode fast = head;
        ListNode slow = dummy;
        
        if(head == null || head.next == null){
            return false;    
        }
        
        // 必须把fast != null 放在 fast.next != null的前面判断
        // 因为如果fast == null, 那么fast.next根本就不存在，会报错的
        while(fast!= null && fast.next != null){
            if (fast == slow){
                return true;
            }
            
            else{
                fast = fast.next.next;
                slow = slow.next;
            }
        }
        
        return false;
    }
}
