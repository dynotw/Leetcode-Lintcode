103. Linked List Cycle II

Given a linked list, return the node where the cycle begins.

If there is no cycle, return null.

Example
Example 1:

Input：null,no cycle
Output：no cycle
Explanation：
List is null，so no cycle.
Example 2:

Input：-21->10->4->5，tail connects to node index 1
Output：10
Explanation：
The last node 5 points to the node whose index is 1, which is 10, so the entrance of the ring is 10
Challenge
Follow up:

Can you solve it without using extra space?


// LinkedList
// compared with 102, in 103 we also need to return the List
// Solve the problem isn't difficult, but the challenge is quite difficult
/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// 1st method, use HashSet(use extra space), doesn't meet the challenge
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @return: The node where the cycle begins. if there is no cycle, return null
     */
    public ListNode detectCycle(ListNode head) {
        // write your code here
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        Set<ListNode> visited = new HashSet<>();
        
        while(head != null){
            if (visited.contains(head)){
                return head;
            }
            else{
                visited.add(head);
            }
            head = head.next;
        }
        return null;
    }
}


// 2nd method, no extra space(mean space complexity is O(1))
