96. Partition List

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example
Example 1:

Input:  list = null, x = 0
Output: null	
Explanation: The empty list Satisfy the conditions by itself.
Example 2:

Input:  list = 1->4->3->2->5->2->null, x = 3
Output: 1->2->2->4->3->5->null	
Explanation:  keep the original relative order of the nodes in each of the two partitions.


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */


// LinkedList
/*
双指针方法，用两个指针将两个部分分别串起来。最后在将两个部分拼接起来。
left指针用来串起来所有小于x的结点，
right指针用来串起来所有大于等于x的结点。
得到两个链表，一个是小于x的，一个是大于等于x的，做一个拼接即可。
*/
public class Solution {
    /**
     * @param head: The first node of linked list
     * @param x: An integer
     * @return: A ListNode
     */
    public ListNode partition(ListNode head, int x) {
        // write your code here
       if (head == null) {
            return null;
        }
        
        // 1. intialize dummy 
        ListNode leftDummy = new ListNode(0);
        ListNode rightDummy = new ListNode(0);
        ListNode left = leftDummy; 
        ListNode right = rightDummy;
        
        // 2. while (head != null) loop
        while (head != null) {
            if (head.val < x) {
                left.next = head;
                left = head;
            } 
            
            else {
                right.next = head;
                right = head;
            }
            
            head = head.next;
        }
        
        // 3.拼接
        right.next = null;
        left.next = rightDummy.next;
        return leftDummy.next;
    }
}
