139. Subarray Sum Closest

Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.

Example
Example1

Input: 
[-3,1,1,-3,5] 
Output: 
[0,2]
Explanation: [0,2], [1,3], [1,1], [2,2], [0,4]
Challenge
O(nlogn) time


// SubArray
// Once see SubArray Sum, think about PrefixSum
class Pair {
    int sum;
    int index;
    public Pair (int sum, int index) {
        this.sum = sum;
        this.index = index; // index直接对应nums的index（0 ~ nums.length-1）
        // (1,0) 表示index=0 之前（包括自身）的sum
    }
}

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    
    public int[] subarraySumClosest(int[] nums) {
        // write your code here
        
        int[] result = new int[2];
        if (nums == null || nums.length == 0) {
            return result;
        }
        
        if (nums.length == 1) {
            result[0] = 0;
            result[1] = 0;
            return result;
        }
        
        
        Pair[] prefixSum = new Pair[nums.length + 1];
        prefixSum[0] = new Pair(0, -1);
        for (int i = 1; i < nums.length + 1; i++) {
            prefixSum[i] = new Pair(prefixSum[i - 1].sum + nums[i-1], i-1);
        }
        
        Pair[] sortedSum = prefixSum;
        Arrays.sort(sortedSum, 
                    new Comparator<Pair>() {
                        public int compare(Pair x, Pair y) {
                            return x.sum - y.sum;
                        }
                    }
        );
        
        int closest = Integer.MAX_VALUE;
        for (int i = 1; i < sortedSum.length; i++) {
            if (sortedSum[i].sum - sortedSum[i - 1].sum < closest) {
                closest = sortedSum[i].sum - sortedSum[i - 1].sum;
                result[0] = sortedSum[i].index;
                result[1] = sortedSum[i - 1].index;
            }
        }
        
        // 此处sort是确保index的顺序正确
        Arrays.sort(result);
        result[0]++;
        return result;
    }
}
