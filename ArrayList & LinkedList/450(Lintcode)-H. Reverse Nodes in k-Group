450. Reverse Nodes in k-Group

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.
Only constant memory is allowed.

Example
Example 1

Input:
list = 1->2->3->4->5->null
k = 2
Output:
2->1->4->3->5
Example 2

Input:
list = 1->2->3->4->5->null
k = 3
Output:
3->2->1->4->5



/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

// LinkedList
// 翻转的时候，我们需要知道被翻转的node的前一个点。比如1 -> 2 -> 3 -> 4 -> 5，要把2和3翻过来，我们需要把翻转好的点先接到1的后面，
// 也就是1 -> 3。然后，翻转完的最后一个点，也要和后面的链表接起来，也就是2 -> 4。最后变成1 -> 3 -> 2 -> 4 -> 5。
public class Solution {
    /**
     * @param head a ListNode
     * @param k an integer
     * @return a ListNode
     */
    public ListNode reverseKGroup(ListNode head, int k) {
        // Write your code here
        // dummy format
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        head = dummy;
        
        while (head != null) {
            head = reverseKNodes(head, k);
        }
        return dummy.next;
    }
    
    // head 是翻转Node的前一个点，current是翻转LinkedNode的第一个点
    public ListNode reverseKNodes(ListNode head, int k) {
        
        ListNode current = head.next;
        
        // 确保存在k个LinkedNode，说明可以翻转
        for (int i = 0; i < k; i++) {
            if (current == null) {
                return null;
            }
            current = current.next;
        }
        
        // 上面的for loop已经将current移到了最后一个点，所以我们需要重新赋值current
        ListNode prev = null;
        current = head.next;
        
        for (int i = 0; i < k; i++) {
            ListNode next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        
        ListNode newHead = head.next;
        head.next.next = current;
        head.next = prev;
    
        return newHead;
    }
}
