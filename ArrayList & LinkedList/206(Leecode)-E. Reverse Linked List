Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?

# Reverse is different from the deepcopy
# Reverse: we need three nodes(current_pre, current, current_next) to realize reverse in each iteration
# Deepcopy: we need two nodes(current, current_next)
class Solution:
    def reverseList_1(self, head: ListNode) -> ListNode:
        pre = None
        current = head
        nextone= ListNode(-1)
        
        while(current != None):
            nextOne = current.next
            current.next = pre
            pre = current
            current = nextOne
        
        head = pre
        return head
    
    def reverseList(self, head: ListNode) -> ListNode:
        current_pre = None
        current = head
        current_next = None
        
        while(current != None):
            current_next = current.next
            current.next = current_pre
            current_pre = current
            current = current_next
        
        return current_pre
            


// Java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode pre = null;
        ListNode current = head;
        ListNode nextOne = new ListNode(-1);
        
        while(current != null){
            nextOne = current.next;
            current.next = pre;
            pre = current;
            current = nextOne;
        }
        
        head = pre;
        
        return head;
    }
}
