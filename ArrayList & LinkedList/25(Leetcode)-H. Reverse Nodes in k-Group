Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:
Could you solve the problem in O(1) extra memory space?
You may not alter the values in the list's nodes, only nodes itself may be changed.
 
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
Output: [1]
 
Constraints:
The number of nodes in the list is in the range sz.
1 <= sz <= 5000
0 <= Node.val <= 1000
1 <= k <= sz





# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

## This problem is very interesting, is a difficult reverse linkedlist
# 在206. Reverse Linkedlist基础上进行修改
# 过程，将每个K-group分别reverse后，再将其连接起来
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        
        # 确定linkedlist一共有几个nodes
        dummy = head
        num = 0
        while(dummy):
            dummy = dummy.next
            num += 1
            
        # 已知nodes数量后，得到一共得分成几个k-group
        times = num // k
        
        # 与reverse linkedlist一样的初始化
        current_pre = ListNode(-2)
        current = head
        current_next = ListNode(-1)
        
        # result是保存output的第一个node
        # store用来保存reversed后每个k-group的首尾nodes，方便后续的各个K-group的连接
        result = None
        store = dict()
      
        # i for loop is times 个 K-group
        for i in range(times):         
            store[i] = [current]
            
            # j for loop is to reverse each k-group
            for j in range(k):
                current_next = current.next
                current.next = current_pre
                current_pre = current
                current = current_next            
            if(i == 0):
                result = current_pre                 
            store[i].append(current_pre)
        
        # 将各个reversed后的K-group串联起来
        for i in range(times-1):
            front = store[i][0]
            back = store[i+1][1]
            
            front.next = back
        
        # 针对还有剩余但无法组成K-group的nodes
        store[times-1][0].next = current
        
        return result
