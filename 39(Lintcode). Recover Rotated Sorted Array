39. Recover Rotated Sorted Array

Given a rotated sorted array, recover it to sorted array in-place.（Ascending）

Example
Example1:
[4, 5, 1, 2, 3] -> [1, 2, 3, 4, 5]
Example2:
[6,8,9,1,2] -> [1,2,6,8,9]

Challenge
In-place, O(1) extra space and O(n) time.

Clarification
What is rotated array?

For example, the orginal array is [1,2,3,4], The rotated array of it can be [1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]




// this problem has some requirement on Space and Time Complexity, so we need to think about it
// this kind of problem, we call ‘三步反转’. (define a function named reverse）
// Because this knid of problem is special, we only need to remeber its solution
// this problem is about two array like [4,5] and [1,2,3]
// if there's more than 2 arrays, [7,8] [4,5] and [1,2,3], then this solution can't work

public class Solution {
    /**
     * @param nums: An integer array
     * @return: nothing
     */
     
    
    public void recoverRotatedSortedArray(List<Integer> nums) {
        // write your code here


//找到第一个比后面的数大的数，以[4,5,1,2,3]为例，找到5，翻转[4,5]得到[5,4]，翻转[1,2,3]得到[3,2,1]
//最后翻转[5,4,3,2,1]得到[1,2,3,4,5]
        for (int i=0; i < nums.size()-1; i++){
            if (nums.get(i) > nums.get(i+1)){
                reverse(nums, 0, i);
                reverse(nums, i+1, nums.size()-1);
                reverse(nums, 0, nums.size()-1);
            }
        }
        
        return;
        
    }
    
    public void reverse(List<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }
}
