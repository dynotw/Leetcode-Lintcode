457. Classical Binary Search

Find any position of a target number in a sorted array. Return -1 if target does not exist.

Example
Example 1:

Input: nums = [1,2,2,4,5,5], target = 2
Output: 1 or 2 (这个表示返回1或2，其中任意一个都行)

Example 2:

Input: nums = [1,2,2,4,5,5], target = 6
Output: -1
Challenge
O(logn) time




// 因为要求是O(log n)，所以我们只能使用Binary Search

public class Solution {
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    public int findPosition(int[] nums, int target) {
        // write your code here
        
        if (nums == null || nums.length == 0){
            return -1;
        }
        
        int left = 0;
        int right = nums.length -1;
        
        
        // 要先判断，因为后续的while循环是 left+1 < right
        // 如果nums.length = 1 or 2, 则不会进入后续的while loop
        if (nums[left] == target){
            return left;
        }
        
        else if (nums[right] == target){
            return right;
        }
        
        
        
        while (left + 1 < right){
            int mid = left + (right - left)/2;
            
            if (nums[mid] == target){
                return mid;
            }
            
            else if (nums[mid] > target){
                right = mid;
            }
            
            else if (nums[mid] < target){
                left = mid;
            }
        }
        
        return -1;
    }
}

