In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, 
return true if and only if the given words are sorted lexicographicaly in this alien language.

Example 1:
Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.

Example 2:
Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.

Example 3:
Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) 
According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).



// This problem isn't difficult, but we need to understand it correctly.
# Time complexity: O(n); space complexity: O(n) 
class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:       
        if len(words) == 1:
            return True
        # build dictionary
        map = dict()
        index = 0
        for i in order:
            map[i] = index
            index += 1
        
        for i in range(len(words) - 1):
            first = words[i]
            second = words[i+1]
            size = min(len(first), len(second))
            
            # all_check 表示first and second较短的中的char全部核实完后，再比较first and second 长度 
            # only when all chars in first and second are equal, we need to compare length 
            # 例：[ppp, p]  and [p, ppp]
            all_check = True
            for j in range(size):
                if(map[first[j]] > map[second[j]]):
                    print(str(map[first[j]]) + "   " + str(map[second[j]]))
                    return False
                elif(map[first[j]] == map[second[j]]):
                    continue
                else:
                    all_check = False
                    break
            
            if all_check and len(first) > len(second):
                return False
        
        return True
