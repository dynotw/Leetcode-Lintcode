38. Search a 2D Matrix II

Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.

This matrix has the following properties:

Integers in each row are sorted from left to right.
Integers in each column are sorted from up to bottom.
No duplicate integers in each row or column.
Example
Example 1:

Input:
	[[3,4]]
	target=3
Output:1
Example 2:

Input:
    [
      [1, 3, 5, 7],
      [2, 4, 7, 8],
      [3, 5, 9, 10]
    ]
    target = 3
Output:2
Challenge
O(m+n) time and O(1) extra space





// 可以类比28 Search a 2D Matrix，但两者还是差了一些的
// time:O(m+n); space:O(1)
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param: A number you want to search in the matrix
     * @return: An integer indicate the occurrence of target in the given matrix
     */
    
    // 这道题建议画图帮助理解
    public int searchMatrix(int[][] matrix, int target) {
        
        // eliminate sepcial condition
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        if (matrix[0] == null || matrix[0].length == 0) {
            return 0;
        }
        
        
        // from bottom left to top right(从左下角或右上角出发都行)
        // 本质就是一行一列的排除（从左下角出发，就是向上和向右，朝[0][m-1]靠拢）
        int n = matrix.length;
        int m = matrix[0].length - 1;
        // [x][y] 表示了起点（左下角）
        int x = n - 1;
        int y = 0;
        int count = 0;
        
        while (x >= 0 && y <= m) {
            
            //y column 都 < target, so eliminate y column
            if (matrix[x][y] < target) {
                y++;
            } 
            
            // all elements in x row are bigger than target, so eliminate the x row
            else if (matrix[x][y] > target) {
                x--;
            } 
            
            else {
                count++;
                x--;
                y++;
            }
        }
        return count;
    }
}
