611. Knight Shortest Path

Given a knight in a chessboard (a binary matrix with 0 as empty and 1 as barrier) with a source position, find the shortest path to a destination position, return the length of the route.
Return -1 if destination cannot be reached.

Example
Example 1:

Input:
[[0,0,0],
 [0,0,0],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output: 2
Explanation:
[2,0]->[0,1]->[2,2]
Example 2:

Input:
[[0,1,0],
 [0,0,1],
 [0,0,0]]
source = [2, 0] destination = [2, 2] 
Output:-1
Clarification
If the knight is at (x, y), he can get to the following positions in one step:

(x + 1, y + 2)
(x + 1, y - 2)
(x - 1, y + 2)
(x - 1, y - 2)
(x + 2, y + 1)
(x + 2, y - 1)
(x - 2, y + 1)
(x - 2, y - 1)
Notice
source and destination must be empty.
Knight can not enter the barrier.
Path length refers to the number of steps the knight takes.




/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */


// BSF in matrix (shorest path)
// 本来matrix题，需要自定义coordinate，但是这里已经定义好了
// The first time, finish the BFS by myself
public class Solution {
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    public int shortestPath(boolean[][] grid, Point source, Point destination) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0 || source == destination){
            return 0;
        }
        
        Queue<Point> queue = new LinkedList<>();
        queue.offer(source);
        int[] directionX = {-1, -1, 1, 1, -2, -2, 2, 2};
        int[] directionY = {-2, 2, -2, 2, -1, 1, -1, 1};
        
        // BFS
        int time =0;
        while(!queue.isEmpty()){
            
            time++;
            
            int n = queue.size();
            for (int i = 0; i<n; i++){
                Point current = queue.poll();
                for (int j =0; j<8; j++){
                    Point move = new Point(
                        current.x + directionX[j],
                        current.y + directionY[j]);
                    
                    if(!isBound(grid, move)){
                        continue;
                    } 
                    
                    // IMPORTANT, here must be current.x == destination.x ....; 不能用current == destination
                    else if (move.x == destination.x && move.y == destination.y){
                        return time;
                    }
                    // meet the barrier
                    else if (grid[move.x][move.y] == true){
                        continue;
                    }
                    // 将走过的point标记为true，防止下次再次经过
                    else{
                        queue.offer(move);
                        grid[move.x][move.y] = true;
                    }
                }
            }
        }
        return -1;
    }
    
    private boolean isBound(boolean[][] grid, Point current){
        int n = grid.length;
        int m = grid[0].length;
        if (current.x >= 0 && current.x < n && current.y >=0 && current.y < m){
            return true;
        }
        else{
            return false;
        }
    }
}
