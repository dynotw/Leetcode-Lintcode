Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Example 2:
Input: strs = [""]
Output: [[""]]

Example 3:
Input: strs = ["a"]
Output: [["a"]]
 
Constraints:
1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.




# Time complexity: O(n*klogk); sapce complexity: O(n)
# We can optimize sort, by kinds of collections.Counter method, see method 2
from collections import defaultdict
class Solution:
    def groupAnagrams_1(self, strs: List[str]) -> List[List[str]]:
        mapping = defaultdict(list)
        for i in strs:
            mapping[tuple(sorted(i))].append(i)
        
        return mapping.values()
    
    # method 2, time complexity: O(nk)
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        mapping = defaultdict(list)
        for i in strs:
            mapping[self.helper(i)].append(i)
        
        return mapping.values()
    
    def helper(self, word):
        count = [0] * 26
        for i in word:
            count[ord(i) - ord('a')] += 1
        
        return tuple(count)
            
