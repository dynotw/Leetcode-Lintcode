17. Subsets
中文English
Given a set of distinct integers, return all possible subsets.

Example
Example 1:

Input: [0]
Output:
[
  [],
  [0]
]
Example 2:

Input: [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Challenge
Can you do it in both recursively and iteratively?

Notice
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.



class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> results = new LinkedList<>();
        if (nums == null){
            return results;
        }
        
     // 用搜索解决（DFS）
     // 1. 使用递归；2. 如何去除重复或无效子集结果
     // 如果是先搜索出所有结果，再依次进行判断是否去除，时间复杂度会比较高
        
        Arrays.sort(nums);
        
        // sort ArrayList nums, because the following dfs's time complexity is much higher than sort operation, so this sort operation won't affect time complexity so much 
        
        List<Integer> subset = new LinkedList<>();
        subsetsHelper(nums, 0 ,subset, results);
        
        return results;
    }
    
    // this recursion is hard to understand
    // 递归三要素
    // 1. 递归的定义：在 Nums 中找到所有以 subset 开头的的集合，并放到 results.At last, remove the last element in subset to start a new loop
    private void helper(LinkedList<Integer> subset,int[] nums, int startIndex, List<List<Integer>> results) {
        // 2. 递归的拆解
        // deep copy
        // results.add(subset);
        results.add(new ArrayList<Integer>(subset));
        
        for (int i = startIndex; i < nums.length; i++) {
            // [1] -> [1,2]
            subset.add(nums[i]);
            // 寻找所有以 [1,2] 开头的集合，并扔到 results
            helper(subset, nums, i + 1, results);
            // [1,2] -> [1]  回溯
            subset.remove(subset.size() - 1);
        }
    } 
}
