Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)


# time: O(n), space:O(n)
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        start = 1
        zeros = list()
        for i in range(len(nums)):
            if nums[i] == 0:
                zeros.append(i)
                continue
            start = start*nums[i]
        
        result = list()
        # all num are zero
        if(len(zeros) == len(nums) or len(zeros) > 1):
            return [0] * len(nums)
        # only one zero in nums
        if(len(zeros) == 1):        
            for i in range(len(nums)):
                if(i in zeros):
                    result.append(start)
                    continue
                result.append(0)
        else:
             for i in range(len(nums)):
                result.append(int(start/nums[i]))           
        
        return result
