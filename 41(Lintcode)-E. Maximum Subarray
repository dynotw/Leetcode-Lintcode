41. Maximum Subarray

Given an array of integers, find a contiguous subarray which has the largest sum.

Example
Example1:

Input: [−2,2,−3,4,−1,2,1,−5,3]
Output: 6
Explanation: the contiguous subarray [4,−1,2,1] has the largest sum = 6.
Example2:

Input: [1,2,3,4]
Output: 10
Explanation: the contiguous subarray [1,2,3,4] has the largest sum = 10.
Challenge
Can you do it in time complexity O(n)?

Notice
The subarray should contain at least one number.



// time: O(n); space: O(1)
class Solution {
    public int maxSubArray(int[] nums) {
        
        if (nums == null || nums.length == 0){
            return -1;
        }
        
        int max = Integer.MIN_VALUE;
        int sum = 0;
        int minSum = 0;
        
        for (int i: nums){
            sum += i;
            
            // minSum must be behind max. 
            // Becasue if nums[0] < 0, then max == 0 (sum - minSum, where minSum == sum = nums[0]), instead of == nums[0]
            max = Math.max(max, sum -minSum);
            minSum = Math.min(minSum, sum);
        }
        
        return max;
    }
}
