178. Graph Valid Tree

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), 
write a function to check whether these edges make up a valid tree.

Example
Example 1:

Input: n = 5 edges = [[0, 1], [0, 2], [0, 3], [1, 4]]
Output: true.
Example 2:

Input: n = 5 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]
Output: false.
Notice
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] 
and thus will not appear together in edges.



// version 1: BFS for Graph
// BSF, Binary Tree, Graph, Hash, Queue
public class Solution {
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    public boolean validTree(int n, int[][] edges) {
        if (n == 0) {
            return false;
        }
        
        // 判断Tree的第一条，n个节点就有n-1条edges
        if (edges.length != n - 1) {
            return false;
        }
        // initializeGraph function 是我们自己定义的
        // Generate adjacent table decsribing graph
        Map<Integer, Set<Integer>> graph = initializeGraph(n, edges);
        
        // bfs
        // HashSet 仅仅是为了过滤重复的neighbor node
        // Queue and HashSet always appear together in Graph not Binary Tree
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> hash = new HashSet<>();
        
        // 将一个element放入queue后，马上将其放入HashSet
        queue.offer(0);
        hash.add(0);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            
            // This problem we don't calculate the size of queue,
            // because we needn't traverse Tree by level order
            for (Integer neighbor : graph.get(node)) {
                // 如果neighbor重复了，执行contiune，hash.add 和 queue.offer就不执行了
                if (hash.contains(neighbor)) {
                    continue;
                }
                hash.add(neighbor);
                queue.offer(neighbor);
            }
        }
        
        // 判断各点之间是否互通。（只要有一个点满足，就全部满足）
        // 判断size是否为n，因为我们从root出发，如果size=n，说明我们从root出发，找到了所有的n个点，即root可以通向任何一点
        return (hash.size() == n);
    }
    
    
    // This function is to generate graph by using edges
    // key is one node; value is the neighbor node of the node
    // value is Set，就是保证每个node的neighbor node没有重复
    private Map<Integer, Set<Integer>> initializeGraph(int n, int[][] edges) {
    // 1st is key, 2nd is value (Compared to dictionary in Python)
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        // 有n个点就有n个键值对
        for (int i = 0; i < n; i++) {
            graph.put(i, new HashSet<Integer>());
        }
        
        // 根据edges建立各个node之间的联系（neighbor关系）
        for (int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        }
  
        return graph;
    }
}
